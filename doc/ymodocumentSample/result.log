10:31:35.118 [main] DEBUG i.g.l.shared.lang.ExchangeResource - パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.YmoScript, name=YmoScript.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.1.00.jar!/io/github/longfish801/yakumo/YmoScript.groovy
10:31:35.221 [main] DEBUG i.g.l.shared.lang.ExchangeResource - パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.YmoDocument, name=YmoDocument.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.1.00.jar!/io/github/longfish801/yakumo/YmoDocument.groovy
10:31:35.248 [main] DEBUG i.g.l.shared.lang.ExchangeResource - パッケージからリソースを参照しました。clazz=class io.github.longfish801.shared.util.ClassConfig, name=ClassConfig.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/shared/jars/shared-0.1.06.jar!/io/github/longfish801/shared/util/ClassConfig.groovy
10:31:35.268 [main] DEBUG i.g.l.shared.lang.ExchangeResource - パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.ConvertEngine, name=ConvertEngine.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.1.00.jar!/io/github/longfish801/yakumo/ConvertEngine.groovy
10:31:35.481 [main] DEBUG i.g.l.shared.lang.ExchangeResource - パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.tpac.Tpac, name=Tpac.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.1.00.jar!/io/github/longfish801/yakumo/tpac/Tpac.groovy
10:31:35.488 [main] DEBUG i.g.l.shared.lang.ExchangeResource - パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.clmap.Clmap, name=Clmap.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.1.00.jar!/io/github/longfish801/yakumo/clmap/Clmap.groovy
10:31:35.518 [main] DEBUG i.g.l.shared.lang.ExchangeResource - パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.washscr.WashScrMaker, name=WashScrMaker.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.1.00.jar!/io/github/longfish801/yakumo/washscr/WashScrMaker.groovy
10:31:35.528 [main] DEBUG i.g.l.shared.lang.ExchangeResource - パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.clmap.ClmapMaker, name=ClmapMaker.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.1.00.jar!/io/github/longfish801/yakumo/clmap/ClmapMaker.groovy
10:31:35.542 [main] DEBUG i.g.l.shared.lang.ExchangeResource - パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.clmap.ClmapMaker, name=ClmapMaker.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.1.00.jar!/io/github/longfish801/yakumo/clmap/ClmapMaker.groovy
10:31:35.548 [main] DEBUG i.g.l.yakumo.parser.TpacParser - dec tag=washscr name=BLtxt文書へ整形
10:31:35.562 [main] DEBUG i.g.l.shared.lang.ExchangeResource - パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.tpac.element.TpacElement, name=TpacElement.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.1.00.jar!/io/github/longfish801/yakumo/tpac/element/TpacElement.groovy
10:31:35.601 [main] DEBUG i.g.l.shared.lang.ExchangeResource - パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.tpac.element.TpacAttrs, name=TpacAttrs.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.1.00.jar!/io/github/longfish801/yakumo/tpac/element/TpacAttrs.groovy
10:31:35.618 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=slice name=空白行区切り
10:31:35.628 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=judge value=BLエスケープ#除外判定
10:31:35.628 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=call name=箇条書き
10:31:35.628 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=judge value=箇条書き#判定
10:31:35.628 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=combi value=箇条書き#整形
10:31:35.628 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=reprex name=各種置換
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=between name=BLエスケープ
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=bgn value=＃.*
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=end value=＃.*
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=divhandle value=include
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=replace name=エスケープ
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=first value=BLエスケープ#区切り行退避
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=last value=BLエスケープ#区切り行回復
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=between name=表
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=bgn value=^-{5,} 表 -{5,}$
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=divhandle value=delete
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=call name=表
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=combi value=表#整形
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=between name=コラム
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=bgn value=^-{5,}$
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=divhandle value=delete
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=call name=コラムを整形
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=combi value=コラム#整形
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=between name=タグ付きコラム
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=bgn value=^-{5,} \S+ -{5,}$
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=divhandle value=include
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=call name=タグ付きコラムを整形
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - attr key=combi value=コラム#タグ付きコラム整形
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=map name=BLエスケープ
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=args name=
10:31:35.638 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=除外判定
10:31:35.648 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=区切り行退避
10:31:35.648 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=区切り行回復
10:31:35.648 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=map name=箇条書き
10:31:35.648 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=dec name=
10:31:35.648 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=args name=
10:31:35.648 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=判定
10:31:35.648 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=整形
10:31:35.648 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=map name=表
10:31:35.648 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=dec name=
10:31:35.648 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=args name=
10:31:35.648 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=整形
10:31:35.648 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=map name=コラム
10:31:35.648 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=args name=
10:31:35.648 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=整形
10:31:35.648 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=タグ付きコラム整形
10:31:35.658 [main] DEBUG i.g.l.yakumo.parser.TpacParser - dec tag=clmap name=HTMLに加工
10:31:35.658 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=dec name=
10:31:35.668 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=prefix name=
10:31:35.668 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=map name=
10:31:35.668 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=args name=
10:31:35.668 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=prefix name=
10:31:35.668 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=
10:31:35.668 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=body
10:31:35.668 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=head
10:31:35.668 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=index
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=note
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=map name=para
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=args name=
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=prefix name=
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=map name=block
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=args name=
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=prefix name=
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=見出し
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=小見出し
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=挿入図
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=箇条書き
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=項目
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=対象
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=説明
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=表
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=行
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=見出しセル
10:31:35.672 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=セル
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=コラム
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=注意
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=引用
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=引用元
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=コード
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=整形済
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=生データ
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=map name=line
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=args name=
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=prefix name=
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=map name=inline
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=args name=
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=prefix name=
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=註
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=リンク
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=強調
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=最強調
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=傍点
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=ぼかし
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=訂正
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=縦中横
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=備考
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=ルビ
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=map name=text
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=dec name=
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=args name=
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=prefix name=
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - parent tag=map name=raw
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=args name=
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=para
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=line
10:31:35.678 [main] DEBUG i.g.l.yakumo.parser.TpacParser - child tag=closure name=text
10:31:35.788 [main] INFO  i.g.l.shared.util.ClassConfig - データフォルダを作成しました。dataDir=C:\Users\longfish\AppData\Local\Temp\gstart\io.github.longfish801.yakumo.ConvertEngine
10:31:35.801 [main] DEBUG i.g.l.shared.lang.ExchangeResource - パッケージからリソースを参照しました。clazz=class io.github.longfish801.shared.util.ConfigXml, name=ConfigXml.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/shared/jars/shared-0.1.06.jar!/io/github/longfish801/shared/util/ConfigXml.groovy
10:31:35.868 [main] DEBUG i.g.l.shared.lang.ExchangeResource - パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.bltxt.BLtxt, name=BLtxt.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.1.00.jar!/io/github/longfish801/yakumo/bltxt/BLtxt.groovy
10:31:35.868 [Thread-1] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行開始 key=washscr#BLtxt文書へ整形
10:31:36.238 [ForkJoinPool-1-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY reprex#各種置換
10:31:36.238 [ForkJoinPool-1-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#箇条書き
10:31:36.238 [ForkJoinPool-3-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#表
10:31:36.238 [ForkJoinPool-2-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY replace#エスケープ
10:31:36.248 [ForkJoinPool-4-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#コラムを整形
10:31:36.271 [ForkJoinPool-5-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#タグ付きコラムを整形
10:31:36.278 [ForkJoinPool-6-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#タグ付きコラム
10:31:36.278 [ForkJoinPool-6-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY slice#空白行区切り
10:31:36.278 [ForkJoinPool-6-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#BLエスケープ
10:31:36.278 [ForkJoinPool-6-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#コラム
10:31:36.278 [ForkJoinPool-6-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#表
10:31:36.278 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【＃タイトル】BLtxt記法]
10:31:36.312 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■BLtxt記法とは]
10:31:36.332 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　BLtxt記法は、テキストをXMLのような階層関係がある構造（【リンク：BLtxtクラス：/bltxt/groovydoc/io/github/longfish801/yakumo/bltxt/BLtxt.html】のインスタンス）へ変換することを目的としています。, 　名称はタグに隅付き括弧(black lenticular bracket)を用いることに由来しています。]
10:31:36.362 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＃タイトル】BLtxt記法]
10:31:36.382 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■サンプル]
10:31:36.407 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】BLtxt記法とは]
10:31:36.432 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　BLtxt記法によるテキストの例を以下に示します。, 　ファイル【リンク：bltxtSample/sample.txt】として保存したとします。]
10:31:36.448 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　BLtxt記法は、テキストをXMLのような階層関係がある構造（【｜リンク：/bltxt/groovydoc/io/github/longfish801/yakumo/bltxt/BLtxt.html】BLtxtクラス【リンク｜】のインスタンス）へ変換することを目的としています。, 　名称はタグに隅付き括弧(black lenticular bracket)を用いることに由来しています。]
10:31:36.472 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----------, 【＃タイトル】BLtxt記法について]
10:31:36.492 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】サンプル]
10:31:36.518 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　テキストをXMLのような階層のある構造へ変換するための記法です。, 　タグ付けのために隅付き括弧（￥【、￥】）を使います。]
10:31:36.531 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　BLtxt記法によるテキストの例を以下に示します。, 　ファイル【｜リンク：bltxtSample/sample.txt】bltxtSample/sample.txt【リンク｜】として保存したとします。]
10:31:36.548 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　以下は文範囲タグのサンプルです。]
10:31:36.571 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【－囲み記事】, 　海の日、山の日に続いて【｜強調】空の日【強調｜】という祝日はどうだろう。, 【囲み記事－】, ＃----------]
10:31:36.594 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　クラス【リンク：BLtxt：/bltxt/groovydoc/io/github/longfish801/yakumo/bltxt/BLtxt.html】を利用して、以下の XMLへ変換することができます。, 　ファイル【リンク：bltxtSample/sample.xml】として保存したとします。]
10:31:36.613 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <meta tag="タイトル" lnum="2" snum="1">,     <para lnum="2" snum="1">,       <line lnum="2">,         <text>BLtxt記法について</text>,       </line>,     </para>,   </meta>,   <para lnum="4" snum="2">,     <line lnum="4">,       <text>　テキストをXMLのような階層のある構造へ変換するための記法です。</text>,     </line>,     <line lnum="5">,       <text>　タグ付けのために隅付き括弧（￥【、￥】）を使います。</text>,     </line>,   </para>,   <para lnum="7" snum="3">,     <line lnum="7">,       <text>　以下は文範囲タグのサンプルです。</text>,     </line>,   </para>,   <block tag="囲み記事" lnum="9" snum="1">,     <para lnum="9" snum="4">,       <line lnum="10">,         <text>　海の日、山の日に続いて</text>,         <inline tag="強調" lnum="10" snum="1">,           <text>空の日</text>,         </inline>,         <text>という祝日はどうだろう。</text>,       </line>,     </para>,   </block>, </bltxt>, ----- コード -----]
10:31:36.652 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　クラス【｜リンク：/bltxt/groovydoc/io/github/longfish801/yakumo/bltxt/BLtxt.html】BLtxt【リンク｜】を利用して、以下の XMLへ変換することができます。, 　ファイル【｜リンク：bltxtSample/sample.xml】bltxtSample/sample.xml【リンク｜】として保存したとします。]
10:31:36.658 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　以下を【リンク：bltxtSample/sample.groovy】として保存し、groovyコマンドで実行してください。, 　上記 BLtxt文書を XMLに変換した結果が上記の XMLと一致することを確認しています。]
10:31:36.696 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <meta tag="タイトル" lnum="2" snum="1">,     <para lnum="2" snum="1">,       <line lnum="2">,         <text>BLtxt記法について</text>,       </line>,     </para>,   </meta>,   <para lnum="4" snum="2">,     <line lnum="4">,       <text>　テキストをXMLのような階層のある構造へ変換するための記法です。</text>,     </line>,     <line lnum="5">,       <text>　タグ付けのために隅付き括弧（￥【、￥】）を使います。</text>,     </line>,   </para>,   <para lnum="7" snum="3">,     <line lnum="7">,       <text>　以下は文範囲タグのサンプルです。</text>,     </line>,   </para>,   <block tag="囲み記事" lnum="9" snum="1">,     <para lnum="9" snum="4">,       <line lnum="10">,         <text>　海の日、山の日に続いて</text>,         <inline tag="強調" lnum="10" snum="1">,           <text>空の日</text>,         </inline>,         <text>という祝日はどうだろう。</text>,       </line>,     </para>,   </block>, </bltxt>, ----- コード -----]
10:31:36.707 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コード -----, @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/'), @Grab('io.github.longfish801:yakumo:0.1.00'), @GrabExclude('org.codehaus.groovy:groovy-all')]
10:31:36.762 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　以下を【｜リンク：bltxtSample/sample.groovy】bltxtSample/sample.groovy【リンク｜】として保存し、groovyコマンドで実行してください。, 　上記 BLtxt文書を XMLに変換した結果が上記の XMLと一致することを確認しています。]
10:31:36.768 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [import io.github.longfish801.yakumo.bltxt.BLtxt;, import io.github.longfish801.yakumo.parser.ParseException;]
10:31:36.797 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コード -----, @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/'), @Grab('io.github.longfish801:yakumo:0.1.00'), @GrabExclude('org.codehaus.groovy:groovy-all')]
10:31:36.812 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [BLtxt bltxt = null;, try {, 	bltxt = new BLtxt(new File('sample.txt'));, 	assert bltxt.toXml() == new File('sample.xml').getText('UTF-8');, } catch (ParseException exc){, 	println "文法誤りがあるため BLtxt文書を解析できません。exc=${exc}";, }, ----- コード -----]
10:31:36.838 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[import io.github.longfish801.yakumo.bltxt.BLtxt;, import io.github.longfish801.yakumo.parser.ParseException;]
10:31:36.852 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■記法]
10:31:36.884 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[BLtxt bltxt = null;, try {, 	bltxt = new BLtxt(new File('sample.txt'));, 	assert bltxt.toXml() == new File('sample.xml').getText('UTF-8');, } catch (ParseException exc){, 	println "文法誤りがあるため BLtxt文書を解析できません。exc=${exc}";, }, ----- コード -----]
10:31:36.900 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□構成]
10:31:36.928 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】記法]
10:31:36.938 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　空行、平文、タグから構成されます。, 　タグは左隅付き括弧（￥【）と右隅付き括弧（￥】）に囲まれます。, 　二行以上連続する空行は、ひとつの空行と同じ扱いとします。, 　末尾が改行で終わっても、終わらなくても、どちらでも構いません。]
10:31:36.968 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】構成]
10:31:36.985 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□タグ]
10:31:37.013 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　空行、平文、タグから構成されます。, 　タグは左隅付き括弧（￥【）と右隅付き括弧（￥】）に囲まれます。, 　二行以上連続する空行は、ひとつの空行と同じ扱いとします。, 　末尾が改行で終わっても、終わらなくても、どちらでも構いません。]
10:31:37.028 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　タグには以下の種類があります。]
10:31:37.051 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】タグ]
10:31:37.071 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [－文中タグ, 　→文の中で用います。, －文範囲タグ, 　→文中の特定範囲を示すために用います。, －行タグ, 　→特定の一文あるいは単独のタグのみ示すのに用います。, －行範囲タグ, 　→特定の行の範囲を示すために用います。, －含意タグ, 　→文章に含めない情報を記述するのに用います。, －含意範囲タグ, 　→文章に含めない情報を特定の行の範囲について示すのに用います。]
10:31:37.108 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　タグには以下の種類があります。]
10:31:37.108 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　タグは、タグ名と属性から成ります。, 　タグ名は省略できません。, 　属性は、タグ名に続けて記述します。省略することもできます。, 　全角コロン（￥：）区切りで複数指定できます。]
10:31:37.158 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　属性を指定できるのは以下のタグのみです。]
10:31:37.208 [ForkJoinPool-1-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：対象】, 【－対象】, 文中タグ, 【対象－】, 【－箇条書き：説明】, 【－説明】, 文の中で用います。, 【説明－】, 【箇条書き－】, 【－対象】, 文範囲タグ, 【対象－】, 【－箇条書き：説明】, 【－説明】, 文中の特定範囲を示すために用います。, 【説明－】, 【箇条書き－】, 【－対象】, 行タグ, 【対象－】, 【－箇条書き：説明】, 【－説明】, 特定の一文あるいは単独のタグのみ示すのに用います。, 【説明－】, 【箇条書き－】, 【－対象】, 行範囲タグ, 【対象－】, 【－箇条書き：説明】, 【－説明】, 特定の行の範囲を示すために用います。, 【説明－】, 【箇条書き－】, 【－対象】, 含意タグ, 【対象－】, 【－箇条書き：説明】, 【－説明】, 文章に含めない情報を記述するのに用います。, 【説明－】, 【箇条書き－】, 【－対象】, 含意範囲タグ, 【対象－】, 【－箇条書き：説明】, 【－説明】, 文章に含めない情報を特定の行の範囲について示すのに用います。, 【説明－】, 【箇条書き－】, 【箇条書き－】]
10:31:37.208 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [・文中タグ, ・文範囲開始タグ, ・行タグ, ・行範囲開始タグ, ・含意タグ]
10:31:37.208 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：対象】, 【－対象】, 文中タグ, 【対象－】, 【－箇条書き：説明】, 【－説明】, 文の中で用います。, 【説明－】, 【箇条書き－】, 【－対象】, 文範囲タグ, 【対象－】, 【－箇条書き：説明】, 【－説明】, 文中の特定範囲を示すために用います。, 【説明－】, 【箇条書き－】, 【－対象】, 行タグ, 【対象－】, 【－箇条書き：説明】, 【－説明】, 特定の一文あるいは単独のタグのみ示すのに用います。, 【説明－】, 【箇条書き－】, 【－対象】, 行範囲タグ, 【対象－】, 【－箇条書き：説明】, 【－説明】, 特定の行の範囲を示すために用います。, 【説明－】, 【箇条書き－】, 【－対象】, 含意タグ, 【対象－】, 【－箇条書き：説明】, 【－説明】, 文章に含めない情報を記述するのに用います。, 【説明－】, 【箇条書き－】, 【－対象】, 含意範囲タグ, 【対象－】, 【－箇条書き：説明】, 【－説明】, 文章に含めない情報を特定の行の範囲について示すのに用います。, 【説明－】, 【箇条書き－】, 【箇条書き－】]
10:31:37.238 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　タグは、タグ名と属性から成ります。, 　タグ名は省略できません。, 　属性は、タグ名に続けて記述します。省略することもできます。, 　全角コロン（￥：）区切りで複数指定できます。]
10:31:37.258 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□文中タグ]
10:31:37.272 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　属性を指定できるのは以下のタグのみです。]
10:31:37.307 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　左隅付き括弧（￥【）と右隅付き括弧（￥】）でタグ名を挟みます。]
10:31:37.338 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----------, 例）, 美しい【ルビ：薔薇：ばら】が咲いていた。, ＃----------]
10:31:37.385 [ForkJoinPool-1-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：順序なし】, 【－項目】, 文中タグ, 【項目－】, 【－項目】, 文範囲開始タグ, 【項目－】, 【－項目】, 行タグ, 【項目－】, 【－項目】, 行範囲開始タグ, 【項目－】, 【－項目】, 含意タグ, 【項目－】, 【箇条書き－】]
10:31:37.386 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：順序なし】, 【－項目】, 文中タグ, 【項目－】, 【－項目】, 文範囲開始タグ, 【項目－】, 【－項目】, 行タグ, 【項目－】, 【－項目】, 行範囲開始タグ, 【項目－】, 【－項目】, 含意タグ, 【項目－】, 【箇条書き－】]
10:31:37.398 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□文範囲タグ]
10:31:37.407 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】文中タグ]
10:31:37.442 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　文範囲開始タグと文範囲終了タグから成ります。]
10:31:37.452 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　左隅付き括弧（￥【）と右隅付き括弧（￥】）でタグ名を挟みます。]
10:31:37.452 [ForkJoinPool-6-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----------, 【＃タイトル】BLtxt記法について, , 　テキストをXMLのような階層のある構造へ変換するための記法です。, 　タグ付けのために隅付き括弧（￥【、￥】）を使います。, , 　以下は文範囲タグのサンプルです。, , 【－囲み記事】, 　海の日、山の日に続いて【｜強調】空の日【強調｜】という祝日はどうだろう。, 【囲み記事－】, ＃----------]
10:31:37.479 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　文範囲開始タグは左隅付き括弧＋全角パイプ（￥【｜）と右隅付き括弧（￥】）でタグ名を挟みます。, 　文範囲終了タグは左隅付き括弧（￥【）と全角パイプ＋右隅付き括弧（｜￥】）でタグ名を挟みます。]
10:31:37.508 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】文範囲タグ]
10:31:37.538 [ForkJoinPool-2-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----------, ￥【＃タイトル￥】BLtxt記法について, , 　テキストをXMLのような階層のある構造へ変換するための記法です。, 　タグ付けのために隅付き括弧（￥￥￥【、￥￥￥】）を使います。, , 　以下は文範囲タグのサンプルです。, , ￥【－囲み記事￥】, 　海の日、山の日に続いて￥【｜強調￥】空の日￥【強調｜￥】という祝日はどうだろう。, ￥【囲み記事－￥】, ----------]
10:31:37.558 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　文範囲開始タグと文範囲終了タグは、タグ名が同じである必要があります。, 　文範囲開始タグと文範囲終了タグの間に、改行を含むことはできません。, 　文範囲タグ同士で階層構造を作ることができます。]
10:31:37.568 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　文範囲開始タグと文範囲終了タグから成ります。]
10:31:37.596 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----------, 例）, 今日は【｜強調】重要【強調｜】な日だ。, ＃----------]
10:31:37.603 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　文範囲開始タグは左隅付き括弧＋全角パイプ（￥【｜）と右隅付き括弧（￥】）でタグ名を挟みます。, 　文範囲終了タグは左隅付き括弧（￥【）と全角パイプ＋右隅付き括弧（｜￥】）でタグ名を挟みます。]
10:31:37.622 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□行タグ]
10:31:37.642 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　文範囲開始タグと文範囲終了タグは、タグ名が同じである必要があります。, 　文範囲開始タグと文範囲終了タグの間に、改行を含むことはできません。, 　文範囲タグ同士で階層構造を作ることができます。]
10:31:37.642 [ForkJoinPool-6-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----------, 例）, 美しい【ルビ：薔薇：ばら】が咲いていた。, ＃----------]
10:31:37.671 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　行タグは、左隅付き括弧＋全角イコール（￥【＝）と右隅付き括弧（￥】）でタグ名を挟みます。, 　行タグに続けて文を続けることができます。省略も可能です。]
10:31:37.696 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----------, 【＝見出し】はじめに]
10:31:37.728 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】行タグ]
10:31:37.728 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【＝書影：999-1234567890】, ＃----------]
10:31:37.758 [ForkJoinPool-2-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----------, 例）, 美しい￥【ルビ￥：薔薇￥：ばら￥】が咲いていた。, ----------]
10:31:37.768 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□行範囲タグ]
10:31:37.801 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　行タグは、左隅付き括弧＋全角イコール（￥【＝）と右隅付き括弧（￥】）でタグ名を挟みます。, 　行タグに続けて文を続けることができます。省略も可能です。]
10:31:37.801 [ForkJoinPool-6-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----------, 例）, 今日は【｜強調】重要【強調｜】な日だ。, ＃----------]
10:31:37.818 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　行範囲開始タグと行範囲終了タグから成ります。]
10:31:37.848 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　行範囲開始タグは左隅付き括弧＋全角ハイフン（￥【－）と右隅付き括弧（￥】）でタグ名を挟みます。, 　行範囲終了タグは左隅付き括弧（￥【）と全角ハイフン＋右隅付き括弧（－￥】）でタグ名を挟みます。]
10:31:37.882 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】行範囲タグ]
10:31:37.888 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　行範囲開始タグと行範囲終了タグは、タグ名が同じである必要があります。, 　行範囲開始タグ、行範囲終了タグはそれぞれ一行で記述します。文中に記述することはできません。, 　あるいは一行で行範囲開始タグと行範囲終了タグ、およびその内容を記述することもできます。, 　行範囲タグ同士で階層構造を作ることができます。]
10:31:37.918 [ForkJoinPool-2-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----------, 例）, 今日は￥【｜強調￥】重要￥【強調｜￥】な日だ。, ----------]
10:31:37.922 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----------, 例）, 【－囲み記事】, 富士山麓にオウム鳴く。, 【囲み記事－】, ＃----------]
10:31:37.952 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　行範囲開始タグと行範囲終了タグから成ります。]
10:31:37.962 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□含意タグ]
10:31:37.991 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　行範囲開始タグは左隅付き括弧＋全角ハイフン（￥【－）と右隅付き括弧（￥】）でタグ名を挟みます。, 　行範囲終了タグは左隅付き括弧（￥【）と全角ハイフン＋右隅付き括弧（－￥】）でタグ名を挟みます。]
10:31:38.001 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　含意タグは、左隅付き括弧＋全角シャープ（￥【＃）と右隅付き括弧（￥】）でタグ名を挟みます。]
10:31:38.028 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　行範囲開始タグと行範囲終了タグは、タグ名が同じである必要があります。, 　行範囲開始タグ、行範囲終了タグはそれぞれ一行で記述します。文中に記述することはできません。, 　あるいは一行で行範囲開始タグと行範囲終了タグ、およびその内容を記述することもできます。, 　行範囲タグ同士で階層構造を作ることができます。]
10:31:38.028 [ForkJoinPool-6-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----------, 【＝見出し】はじめに, , 【＝書影：999-1234567890】, ＃----------]
10:31:38.048 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----------, 例）, 【＃コメント】ここから重要, ＃----------]
10:31:38.068 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】含意タグ]
10:31:38.078 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□含意範囲タグ]
10:31:38.122 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　含意タグは、左隅付き括弧＋全角アスタリスク（￥【＊）と右隅付き括弧（￥】）でタグ名を挟みます。]
10:31:38.142 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　含意タグは、左隅付き括弧＋全角シャープ（￥【＃）と右隅付き括弧（￥】）でタグ名を挟みます。]
10:31:38.142 [ForkJoinPool-6-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----------, 例）, 【－囲み記事】, 富士山麓にオウム鳴く。, 【囲み記事－】, ＃----------]
10:31:38.149 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　含意範囲開始タグと含意範囲終了タグから成ります。]
10:31:38.168 [ForkJoinPool-2-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----------, ￥【＝見出し￥】はじめに, , ￥【＝書影￥：999-1234567890￥】, ----------]
10:31:38.188 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　含意範囲開始タグは左隅付き括弧＋全角ハイフン（￥【＊）と右隅付き括弧（￥】）でタグ名を挟みます。, 　含意範囲終了タグは左隅付き括弧（￥【）と全角ハイフン＋右隅付き括弧（＊￥】）でタグ名を挟みます。]
10:31:38.213 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】含意範囲タグ]
10:31:38.222 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----------, 例）, 【＊註記】, 　正確には、そのような事実があったか確かめられていない。, 【註記＊】, ＃----------]
10:31:38.258 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□エスケープと使用可能文字]
10:31:38.288 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　含意タグは、左隅付き括弧＋全角アスタリスク（￥【＊）と右隅付き括弧（￥】）でタグ名を挟みます。]
10:31:38.292 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　エスケープするときは直前に全角円記号（￥￥）を付与してください。]
10:31:38.322 [ForkJoinPool-2-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----------, 例）, ￥【－囲み記事￥】, 富士山麓にオウム鳴く。, ￥【囲み記事－￥】, ----------]
10:31:38.328 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　タグの外では、以下をエスケープしてください。]
10:31:38.368 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　含意範囲開始タグと含意範囲終了タグから成ります。]
10:31:38.388 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [・左隅付き括弧（￥【）, ・右隅付き括弧（￥】）, ・全角円記号（￥￥）]
10:31:38.412 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　含意範囲開始タグは左隅付き括弧＋全角ハイフン（￥【＊）と右隅付き括弧（￥】）でタグ名を挟みます。, 　含意範囲終了タグは左隅付き括弧（￥【）と全角ハイフン＋右隅付き括弧（＊￥】）でタグ名を挟みます。]
10:31:38.412 [ForkJoinPool-6-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----------, 例）, 【＃コメント】ここから重要, ＃----------]
10:31:38.428 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　属性値では、以下をエスケープしてください。, 　属性値には、改行コードを使用できません。]
10:31:38.461 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】エスケープと使用可能文字]
10:31:38.481 [ForkJoinPool-2-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----------, 例）, ￥【＃コメント￥】ここから重要, ----------]
10:31:38.502 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [・左隅付き括弧（￥【）, ・右隅付き括弧（￥】）, ・全角コロン（￥：）, ・全角円記号（￥￥）]
10:31:38.517 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　エスケープするときは直前に全角円記号（￥￥）を付与してください。]
10:31:38.528 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　タグ名には、以下の文字を使用できません。, 　エスケープして使うこともできません。]
10:31:38.558 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　タグの外では、以下をエスケープしてください。]
10:31:38.568 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [・改行コード, ・全角円記号（￥￥）, ・全角コロン（￥：）, ・左隅付き括弧（￥【）, ・右隅付き括弧（￥】）, ・全角イコール（＝）, ・全角ハイフン（－）, ・全角パイプ（｜）, ・全角シャープ（＃）, ・全角アスタリスク（＊）]
10:31:38.598 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■XML化]
10:31:38.642 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　以下のタグを用いて XML化します。, 　XML化には【リンク：BLtxtクラス：/bltxt/groovydoc/io/github/longfish801/yakumo/bltxt/BLtxt.html】を利用してください。]
10:31:38.658 [ForkJoinPool-1-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：順序なし】, 【－項目】, 左隅付き括弧（￥【）, 【項目－】, 【－項目】, 右隅付き括弧（￥】）, 【項目－】, 【－項目】, 全角円記号（￥￥）, 【項目－】, 【箇条書き－】]
10:31:38.658 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：順序なし】, 【－項目】, 左隅付き括弧（￥【）, 【項目－】, 【－項目】, 右隅付き括弧（￥】）, 【項目－】, 【－項目】, 全角円記号（￥￥）, 【項目－】, 【箇条書き－】]
10:31:38.681 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [－blxml, 　→ルートタグ。複数のブロック要素、段落、メタ要素のいずれかから成ります。, －block, 　→ブロック要素。複数の段落、メタ要素、下位ブロック要素から成ります。, 　　行タグ、行範囲タグと対応します。, －para, 　→段落。複数の行から成ります。, －meta, 　→メタ要素。複数の段落、下位ブロック要素から成ります。, 　　含意タグ、含意範囲タグと対応します。, －line, 　→行。複数の平文、インライン要素から成ります。, －inline, 　→インライン要素。複数の平文、下位インライン要素から成ります。, 　　文中タグ、文範囲タグと対応します。, －attrs, attr, 　→属性。, 　　各タグの属性と対応します。, －text, 　→平文。]
10:31:38.698 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　属性値では、以下をエスケープしてください。, 　属性値には、改行コードを使用できません。]
10:31:38.718 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　以下の属性を保持します。]
10:31:38.742 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [－tag, 　→タグ名。, 　　block, para, meta, inlineが保持します。, －lnum, 　→BLtxt文書での行番号。, 　　block, para, meta, inline, lineが保持します。, －snum, 　→同じタグ、同じタグ名での通番。, 　　block, para, meta, inlineが保持します。]
10:31:38.788 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□平文]
10:31:38.798 [ForkJoinPool-1-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：順序なし】, 【－項目】, 左隅付き括弧（￥【）, 【項目－】, 【－項目】, 右隅付き括弧（￥】）, 【項目－】, 【－項目】, 全角コロン（￥：）, 【項目－】, 【－項目】, 全角円記号（￥￥）, 【項目－】, 【箇条書き－】]
10:31:38.808 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：順序なし】, 【－項目】, 左隅付き括弧（￥【）, 【項目－】, 【－項目】, 右隅付き括弧（￥】）, 【項目－】, 【－項目】, 全角コロン（￥：）, 【項目－】, 【－項目】, 全角円記号（￥￥）, 【項目－】, 【箇条書き－】]
10:31:38.808 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　タグの無い行は、一行ごとにlineタグで囲みます。, 　文字列はすべて textタグで囲みます。]
10:31:38.842 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　タグ名には、以下の文字を使用できません。, 　エスケープして使うこともできません。]
10:31:38.848 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　一行以上の空行区切りで、段落とみなします。段落をparaタグで囲みます。, 　空行は、ひとつのみでも、複数でも、すべて段落区切りとみなします。]
10:31:38.898 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----------, とりなくこえす、, ゆめさませ。]
10:31:38.942 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [みよあけわたる、]
10:31:38.948 [ForkJoinPool-1-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：順序なし】, 【－項目】, 改行コード, 【項目－】, 【－項目】, 全角円記号（￥￥）, 【項目－】, 【－項目】, 全角コロン（￥：）, 【項目－】, 【－項目】, 左隅付き括弧（￥【）, 【項目－】, 【－項目】, 右隅付き括弧（￥】）, 【項目－】, 【－項目】, 全角イコール（＝）, 【項目－】, 【－項目】, 全角ハイフン（－）, 【項目－】, 【－項目】, 全角パイプ（｜）, 【項目－】, 【－項目】, 全角シャープ（＃）, 【項目－】, 【－項目】, 全角アスタリスク（＊）, 【項目－】, 【箇条書き－】]
10:31:38.948 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：順序なし】, 【－項目】, 改行コード, 【項目－】, 【－項目】, 全角円記号（￥￥）, 【項目－】, 【－項目】, 全角コロン（￥：）, 【項目－】, 【－項目】, 左隅付き括弧（￥【）, 【項目－】, 【－項目】, 右隅付き括弧（￥】）, 【項目－】, 【－項目】, 全角イコール（＝）, 【項目－】, 【－項目】, 全角ハイフン（－）, 【項目－】, 【－項目】, 全角パイプ（｜）, 【項目－】, 【－項目】, 全角シャープ（＃）, 【項目－】, 【－項目】, 全角アスタリスク（＊）, 【項目－】, 【箇条書き－】]
10:31:38.961 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [ひんがしを。, ＃----------]
10:31:38.988 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】XML化]
10:31:38.998 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="1" snum="1">,     <line lnum="1">,       <text>とりなくこえす、</text>,     </line>,     <line lnum="2">,       <text>ゆめさませ。</text>,     </line>,   </para>,   <para lnum="4" snum="2">,     <line lnum="4">,       <text>みよあけわたる、</text>,     </line>,   </para>,   <para lnum="7" snum="3">,     <line lnum="7">,       <text>ひんがしを。</text>,     </line>,   </para>, </bltxt>, ----- コード -----]
10:31:39.022 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　以下のタグを用いて XML化します。, 　XML化には【｜リンク：/bltxt/groovydoc/io/github/longfish801/yakumo/bltxt/BLtxt.html】BLtxtクラス【リンク｜】を利用してください。]
10:31:39.038 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□文中タグ]
10:31:39.072 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　文中タグは、inlineタグに変換します。, 　属性値はattrs, attrタグとして inlineタグ内の先頭に保持します。]
10:31:39.118 [ForkJoinPool-1-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：対象】, 【－対象】, blxml, 【対象－】, 【－箇条書き：説明】, 【－説明】, ルートタグ。複数のブロック要素、段落、メタ要素のいずれかから成ります。, 【説明－】, 【箇条書き－】, 【－対象】, block, 【対象－】, 【－箇条書き：説明】, 【－説明】, ブロック要素。複数の段落、メタ要素、下位ブロック要素から成ります。, 行タグ、行範囲タグと対応します。, 【説明－】, 【箇条書き－】, 【－対象】, para, 【対象－】, 【－箇条書き：説明】, 【－説明】, 段落。複数の行から成ります。, 【説明－】, 【箇条書き－】, 【－対象】, meta, 【対象－】, 【－箇条書き：説明】, 【－説明】, メタ要素。複数の段落、下位ブロック要素から成ります。, 含意タグ、含意範囲タグと対応します。, 【説明－】, 【箇条書き－】, 【－対象】, line, 【対象－】, 【－箇条書き：説明】, 【－説明】, 行。複数の平文、インライン要素から成ります。, 【説明－】, 【箇条書き－】, 【－対象】, inline, 【対象－】, 【－箇条書き：説明】, 【－説明】, インライン要素。複数の平文、下位インライン要素から成ります。, 文中タグ、文範囲タグと対応します。, 【説明－】, 【箇条書き－】, 【－対象】, attrs, attr, 【対象－】, 【－箇条書き：説明】, 【－説明】, 属性。, 各タグの属性と対応します。, 【説明－】, 【箇条書き－】, 【－対象】, text, 【対象－】, 【－箇条書き：説明】, 【－説明】, 平文。, 【説明－】, 【箇条書き－】, 【箇条書き－】]
10:31:39.122 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----------, 美しい【ルビ：薔薇：ばら】が咲いていた。, ＃----------]
10:31:39.122 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：対象】, 【－対象】, blxml, 【対象－】, 【－箇条書き：説明】, 【－説明】, ルートタグ。複数のブロック要素、段落、メタ要素のいずれかから成ります。, 【説明－】, 【箇条書き－】, 【－対象】, block, 【対象－】, 【－箇条書き：説明】, 【－説明】, ブロック要素。複数の段落、メタ要素、下位ブロック要素から成ります。, 行タグ、行範囲タグと対応します。, 【説明－】, 【箇条書き－】, 【－対象】, para, 【対象－】, 【－箇条書き：説明】, 【－説明】, 段落。複数の行から成ります。, 【説明－】, 【箇条書き－】, 【－対象】, meta, 【対象－】, 【－箇条書き：説明】, 【－説明】, メタ要素。複数の段落、下位ブロック要素から成ります。, 含意タグ、含意範囲タグと対応します。, 【説明－】, 【箇条書き－】, 【－対象】, line, 【対象－】, 【－箇条書き：説明】, 【－説明】, 行。複数の平文、インライン要素から成ります。, 【説明－】, 【箇条書き－】, 【－対象】, inline, 【対象－】, 【－箇条書き：説明】, 【－説明】, インライン要素。複数の平文、下位インライン要素から成ります。, 文中タグ、文範囲タグと対応します。, 【説明－】, 【箇条書き－】, 【－対象】, attrs, attr, 【対象－】, 【－箇条書き：説明】, 【－説明】, 属性。, 各タグの属性と対応します。, 【説明－】, 【箇条書き－】, 【－対象】, text, 【対象－】, 【－箇条書き：説明】, 【－説明】, 平文。, 【説明－】, 【箇条書き－】, 【箇条書き－】]
10:31:39.142 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　以下の属性を保持します。]
10:31:39.168 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="1" snum="1">,     <line lnum="1">,       <text>美しい</text>,       <inline tag="ルビ" lnum="1" snum="1">,         <attrs>,           <attr>薔薇</attr>,           <attr>ばら</attr>,         </attrs>,       </inline>,       <text>が咲いていた。</text>,     </line>,   </para>, </bltxt>, ----- コード -----]
10:31:39.198 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□文範囲タグ]
10:31:39.242 [ForkJoinPool-1-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：対象】, 【－対象】, tag, 【対象－】, 【－箇条書き：説明】, 【－説明】, タグ名。, block, para, meta, inlineが保持します。, 【説明－】, 【箇条書き－】, 【－対象】, lnum, 【対象－】, 【－箇条書き：説明】, 【－説明】, BLtxt文書での行番号。, block, para, meta, inline, lineが保持します。, 【説明－】, 【箇条書き－】, 【－対象】, snum, 【対象－】, 【－箇条書き：説明】, 【－説明】, 同じタグ、同じタグ名での通番。, block, para, meta, inlineが保持します。, 【説明－】, 【箇条書き－】, 【箇条書き－】]
10:31:39.242 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：対象】, 【－対象】, tag, 【対象－】, 【－箇条書き：説明】, 【－説明】, タグ名。, block, para, meta, inlineが保持します。, 【説明－】, 【箇条書き－】, 【－対象】, lnum, 【対象－】, 【－箇条書き：説明】, 【－説明】, BLtxt文書での行番号。, block, para, meta, inline, lineが保持します。, 【説明－】, 【箇条書き－】, 【－対象】, snum, 【対象－】, 【－箇条書き：説明】, 【－説明】, 同じタグ、同じタグ名での通番。, block, para, meta, inlineが保持します。, 【説明－】, 【箇条書き－】, 【箇条書き－】]
10:31:39.258 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　文範囲タグも、inlineタグに変換します。, 　開始タグと終了タグに囲まれた範囲は、textタグで囲みます。, 　文範囲タグを入れ語にした場合、下位の inlineタグや textタグを保持します。, 　これにより、階層構造を作ることができます。]
10:31:39.268 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】平文]
10:31:39.298 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----------, ここが【｜傍点】重要【傍点｜】です。, 【｜強調】とても【｜ルビ：インポータント】重要【ルビ｜】ですよ。【強調｜】, ＃----------]
10:31:39.301 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　タグの無い行は、一行ごとにlineタグで囲みます。, 　文字列はすべて textタグで囲みます。]
10:31:39.331 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="2" snum="1">,     <line lnum="2">,       <text>ここが</text>,       <inline tag="傍点" lnum="2" snum="1">,         <text>重要</text>,       </inline>,       <text>です。</text>,     </line>,     <line lnum="3">,       <inline tag="強調" lnum="3" snum="1">,         <text>とても</text>,         <inline tag="ルビ" lnum="3" snum="1">,           <attrs>,             <attr>インポータント</attr>,           </attrs>,           <text>重要</text>,         </inline>,         <text>ですよ。</text>,       </inline>,     </line>,   </para>, </bltxt>, ----- コード -----]
10:31:39.342 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　一行以上の空行区切りで、段落とみなします。段落をparaタグで囲みます。, 　空行は、ひとつのみでも、複数でも、すべて段落区切りとみなします。]
10:31:39.342 [ForkJoinPool-6-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----------, 例）, 【＊註記】, 　正確には、そのような事実があったか確かめられていない。, 【註記＊】, ＃----------]
10:31:39.368 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□行タグ]
10:31:39.409 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="1" snum="1">,     <line lnum="1">,       <text>とりなくこえす、</text>,     </line>,     <line lnum="2">,       <text>ゆめさませ。</text>,     </line>,   </para>,   <para lnum="4" snum="2">,     <line lnum="4">,       <text>みよあけわたる、</text>,     </line>,   </para>,   <para lnum="7" snum="3">,     <line lnum="7">,       <text>ひんがしを。</text>,     </line>,   </para>, </bltxt>, ----- コード -----]
10:31:39.428 [ForkJoinPool-2-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----------, 例）, ￥【＊註記￥】, 　正確には、そのような事実があったか確かめられていない。, ￥【註記＊￥】, ----------]
10:31:39.458 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　行タグは blockタグに変換します。, 　行タグの前後は、空行の有無にかかわらず段落区切りとみなします。, 　行タグ同士で階層構造を作ることはできません。, 　ただし後述する行範囲タグの下位とすることはできます。]
10:31:39.461 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】文中タグ]
10:31:39.492 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----------, 【＝見出し】トランプの遊び方]
10:31:39.502 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　文中タグは、inlineタグに変換します。, 　属性値はattrs, attrタグとして inlineタグ内の先頭に保持します。]
10:31:39.502 [ForkJoinPool-6-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----------, とりなくこえす、, ゆめさませ。, , みよあけわたる、, , , ひんがしを。, ＃----------]
10:31:39.528 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [以下の画像を参照してください。, 【＝画像：howto.jpg】, ＃----------]
10:31:39.558 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="1" snum="1">,     <line lnum="1">,       <text>美しい</text>,       <inline tag="ルビ" lnum="1" snum="1">,         <attrs>,           <attr>薔薇</attr>,           <attr>ばら</attr>,         </attrs>,       </inline>,       <text>が咲いていた。</text>,     </line>,   </para>, </bltxt>, ----- コード -----]
10:31:39.582 [ForkJoinPool-2-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----------, とりなくこえす、, ゆめさませ。, , みよあけわたる、, , , ひんがしを。, ----------]
10:31:39.601 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <block tag="見出し" lnum="1" snum="1">,     <para lnum="1" snum="1">,       <line lnum="1">,         <text>トランプの遊び方</text>,       </line>,     </para>,   </block>,   <para lnum="3" snum="2">,     <line lnum="3">,       <text>以下の画像を参照してください。</text>,     </line>,   </para>,   <block tag="画像" lnum="4" snum="1">,     <attrs>,       <attr>howto.jpg</attr>,     </attrs>,   </block>, </bltxt>, ----- コード -----]
10:31:39.612 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】文範囲タグ]
10:31:39.642 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□行範囲タグ]
10:31:39.648 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　文範囲タグも、inlineタグに変換します。, 　開始タグと終了タグに囲まれた範囲は、textタグで囲みます。, 　文範囲タグを入れ語にした場合、下位の inlineタグや textタグを保持します。, 　これにより、階層構造を作ることができます。]
10:31:39.648 [ForkJoinPool-6-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----------, 美しい【ルビ：薔薇：ばら】が咲いていた。, ＃----------]
10:31:39.678 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　行範囲タグも blockタグに変換します。, 　開始タグ、終了タグの前後は、空行の有無にかかわらず段落区切りとみなします。, 　行範囲タグを入れ子にすることで、階層構造を作ることができます。]
10:31:39.702 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="2" snum="1">,     <line lnum="2">,       <text>ここが</text>,       <inline tag="傍点" lnum="2" snum="1">,         <text>重要</text>,       </inline>,       <text>です。</text>,     </line>,     <line lnum="3">,       <inline tag="強調" lnum="3" snum="1">,         <text>とても</text>,         <inline tag="ルビ" lnum="3" snum="1">,           <attrs>,             <attr>インポータント</attr>,           </attrs>,           <text>重要</text>,         </inline>,         <text>ですよ。</text>,       </inline>,     </line>,   </para>, </bltxt>, ----- コード -----]
10:31:39.732 [ForkJoinPool-2-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----------, 美しい￥【ルビ￥：薔薇￥：ばら￥】が咲いていた。, ----------]
10:31:39.748 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----------, 以下の記事を参照してください。]
10:31:39.758 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】行タグ]
10:31:39.788 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【－囲み記事】, リンカーンは次の言葉を残した。, 【－引用：『リンカーン語録』】, 人民の、, 人民による、]
10:31:39.788 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　行タグは blockタグに変換します。, 　行タグの前後は、空行の有無にかかわらず段落区切りとみなします。, 　行タグ同士で階層構造を作ることはできません。, 　ただし後述する行範囲タグの下位とすることはできます。]
10:31:39.788 [ForkJoinPool-6-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----------, ここが【｜傍点】重要【傍点｜】です。, 【｜強調】とても【｜ルビ：インポータント】重要【ルビ｜】ですよ。【強調｜】, ＃----------]
10:31:39.817 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [人民のための政治。, 【引用－】, 【囲み記事－】, ＃----------]
10:31:39.848 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <block tag="見出し" lnum="1" snum="1">,     <para lnum="1" snum="1">,       <line lnum="1">,         <text>トランプの遊び方</text>,       </line>,     </para>,   </block>,   <para lnum="3" snum="2">,     <line lnum="3">,       <text>以下の画像を参照してください。</text>,     </line>,   </para>,   <block tag="画像" lnum="4" snum="1">,     <attrs>,       <attr>howto.jpg</attr>,     </attrs>,   </block>, </bltxt>, ----- コード -----]
10:31:39.868 [ForkJoinPool-2-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----------, ここが￥【｜傍点￥】重要￥【傍点｜￥】です。, ￥【｜強調￥】とても￥【｜ルビ￥：インポータント￥】重要￥【ルビ｜￥】ですよ。￥【強調｜￥】, ----------]
10:31:39.898 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="1" snum="1">,     <line lnum="1">,       <text>以下の記事を参照してください。</text>,     </line>,   </para>,   <block tag="囲み記事" lnum="3" snum="1">,     <para lnum="3" snum="2">,       <line lnum="4">,         <text>リンカーンは次の言葉を残した。</text>,       </line>,     </para>,     <block tag="引用" lnum="5" snum="1">,       <attrs>,         <attr>『リンカーン語録』</attr>,       </attrs>,       <para lnum="5" snum="3">,         <line lnum="6">,           <text>人民の、</text>,         </line>,         <line lnum="7">,           <text>人民による、</text>,         </line>,       </para>,       <para lnum="9" snum="4">,         <line lnum="9">,           <text>人民のための政治。</text>,         </line>,       </para>,     </block>,   </block>, </bltxt>, ----- コード -----]
10:31:39.918 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】行範囲タグ]
10:31:39.948 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□含意タグ]
10:31:39.958 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　行範囲タグも blockタグに変換します。, 　開始タグ、終了タグの前後は、空行の有無にかかわらず段落区切りとみなします。, 　行範囲タグを入れ子にすることで、階層構造を作ることができます。]
10:31:39.958 [ForkJoinPool-6-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----------, 【＝見出し】トランプの遊び方, , 以下の画像を参照してください。, 【＝画像：howto.jpg】, ＃----------]
10:31:39.978 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　含意タグは metaタグに変換します。, 　行範囲タグ内に含意タグがあると、blockタグ内に metaタグを作成します。]
10:31:40.028 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="1" snum="1">,     <line lnum="1">,       <text>以下の記事を参照してください。</text>,     </line>,   </para>,   <block tag="囲み記事" lnum="3" snum="1">,     <para lnum="3" snum="2">,       <line lnum="4">,         <text>リンカーンは次の言葉を残した。</text>,       </line>,     </para>,     <block tag="引用" lnum="5" snum="1">,       <attrs>,         <attr>『リンカーン語録』</attr>,       </attrs>,       <para lnum="5" snum="3">,         <line lnum="6">,           <text>人民の、</text>,         </line>,         <line lnum="7">,           <text>人民による、</text>,         </line>,       </para>,       <para lnum="9" snum="4">,         <line lnum="9">,           <text>人民のための政治。</text>,         </line>,       </para>,     </block>,   </block>, </bltxt>, ----- コード -----]
10:31:40.058 [ForkJoinPool-2-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----------, ￥【＝見出し￥】トランプの遊び方, , 以下の画像を参照してください。, ￥【＝画像￥：howto.jpg￥】, ----------]
10:31:40.088 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----------, 【＃タイトル】円周率の暗記, 【＃著者：山田太郎】]
10:31:40.109 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】含意タグ]
10:31:40.128 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【＃コメント：ここから囲み記事】, 【－囲み記事】, 【＃コメント：3.14159265】, 産医師異国に向かう。, 【囲み記事－】, ＃----------]
10:31:40.132 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　含意タグは metaタグに変換します。, 　行範囲タグ内に含意タグがあると、blockタグ内に metaタグを作成します。]
10:31:40.148 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <meta tag="タイトル" lnum="1" snum="1">,     <para lnum="1" snum="1">,       <line lnum="1">,         <text>円周率の暗記</text>,       </line>,     </para>,   </meta>,   <meta tag="著者" lnum="2" snum="1">,     <attrs>,       <attr>山田太郎</attr>,     </attrs>,   </meta>,   <meta tag="コメント" lnum="4" snum="1">,     <attrs>,       <attr>ここから囲み記事</attr>,     </attrs>,   </meta>,   <block tag="囲み記事" lnum="5" snum="1">,     <meta tag="コメント" lnum="6" snum="2">,       <attrs>,         <attr>3.14159265</attr>,       </attrs>,     </meta>,     <para lnum="6" snum="2">,       <line lnum="7">,         <text>産医師異国に向かう。</text>,       </line>,     </para>,   </block>, </bltxt>, ----- コード -----]
10:31:40.148 [ForkJoinPool-6-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----------, 以下の記事を参照してください。, , 【－囲み記事】, リンカーンは次の言葉を残した。, 【－引用：『リンカーン語録』】, 人民の、, 人民による、, , 人民のための政治。, 【引用－】, 【囲み記事－】, ＃----------]
10:31:40.182 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□含意範囲タグ]
10:31:40.212 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　含意範囲タグはmetaタグに変換します。, 　タグ名はmetaタグのtag属性として保持します。, 　属性値はattrタグとしてmetaタグ内に保持します。, 　行範囲タグ内にある含意タグは、その行範囲タグに対応する blockタグ内に metaタグを設けます。]
10:31:40.238 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <meta tag="タイトル" lnum="1" snum="1">,     <para lnum="1" snum="1">,       <line lnum="1">,         <text>円周率の暗記</text>,       </line>,     </para>,   </meta>,   <meta tag="著者" lnum="2" snum="1">,     <attrs>,       <attr>山田太郎</attr>,     </attrs>,   </meta>,   <meta tag="コメント" lnum="4" snum="1">,     <attrs>,       <attr>ここから囲み記事</attr>,     </attrs>,   </meta>,   <block tag="囲み記事" lnum="5" snum="1">,     <meta tag="コメント" lnum="6" snum="2">,       <attrs>,         <attr>3.14159265</attr>,       </attrs>,     </meta>,     <para lnum="6" snum="2">,       <line lnum="7">,         <text>産医師異国に向かう。</text>,       </line>,     </para>,   </block>, </bltxt>, ----- コード -----]
10:31:40.252 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----------, 　そして下人は高尾山へと姿を消した【註：消息】。]
10:31:40.288 [ForkJoinPool-2-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----------, 以下の記事を参照してください。, , ￥【－囲み記事￥】, リンカーンは次の言葉を残した。, ￥【－引用￥：『リンカーン語録』￥】, 人民の、, 人民による、, , 人民のための政治。, ￥【引用－￥】, ￥【囲み記事－￥】, ----------]
10:31:40.322 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【＊註記：消息】, 　正確には、そのような事実があったか確かめられていない。, 【註記＊】]
10:31:40.338 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】含意範囲タグ]
10:31:40.362 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【－囲み記事】, 　芥川龍之介の文章を参考とした。, 【＊コメント】, 　要出典明記。, 【コメント＊】, 【囲み記事－】, ＃----------]
10:31:40.382 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　含意範囲タグはmetaタグに変換します。, 　タグ名はmetaタグのtag属性として保持します。, 　属性値はattrタグとしてmetaタグ内に保持します。, 　行範囲タグ内にある含意タグは、その行範囲タグに対応する blockタグ内に metaタグを設けます。]
10:31:40.382 [ForkJoinPool-6-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----------, 【＃タイトル】円周率の暗記, 【＃著者：山田太郎】, , 【＃コメント：ここから囲み記事】, 【－囲み記事】, 【＃コメント：3.14159265】, 産医師異国に向かう。, 【囲み記事－】, ＃----------]
10:31:40.382 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="1" snum="1">,     <line lnum="1">,       <text>　そして下人は高尾山へと姿を消した</text>,       <inline tag="註" lnum="1" snum="1">,         <attrs>,           <attr>消息</attr>,         </attrs>,       </inline>,       <text>。</text>,     </line>,   </para>,   <meta tag="註記" lnum="3" snum="1">,     <attrs>,       <attr>消息</attr>,     </attrs>,     <para lnum="3" snum="2">,       <line lnum="4">,         <text>　正確には、そのような事実があったか確かめられていない。</text>,       </line>,     </para>,   </meta>,   <block tag="囲み記事" lnum="7" snum="1">,     <para lnum="7" snum="3">,       <line lnum="8">,         <text>　芥川龍之介の文章を参考とした。</text>,       </line>,     </para>,     <meta tag="コメント" lnum="9" snum="1">,       <para lnum="9" snum="4">,         <line lnum="10">,           <text>　要出典明記。</text>,         </line>,       </para>,     </meta>,   </block>, </bltxt>, ----- コード -----]
10:31:40.417 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [以上]
10:31:40.452 [ForkJoinPool-6-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 slice#空白行区切り
10:31:40.468 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="1" snum="1">,     <line lnum="1">,       <text>　そして下人は高尾山へと姿を消した</text>,       <inline tag="註" lnum="1" snum="1">,         <attrs>,           <attr>消息</attr>,         </attrs>,       </inline>,       <text>。</text>,     </line>,   </para>,   <meta tag="註記" lnum="3" snum="1">,     <attrs>,       <attr>消息</attr>,     </attrs>,     <para lnum="3" snum="2">,       <line lnum="4">,         <text>　正確には、そのような事実があったか確かめられていない。</text>,       </line>,     </para>,   </meta>,   <block tag="囲み記事" lnum="7" snum="1">,     <para lnum="7" snum="3">,       <line lnum="8">,         <text>　芥川龍之介の文章を参考とした。</text>,       </line>,     </para>,     <meta tag="コメント" lnum="9" snum="1">,       <para lnum="9" snum="4">,         <line lnum="10">,           <text>　要出典明記。</text>,         </line>,       </para>,     </meta>,   </block>, </bltxt>, ----- コード -----]
10:31:40.488 [ForkJoinPool-2-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----------, ￥【＃タイトル￥】円周率の暗記, ￥【＃著者￥：山田太郎￥】, , ￥【＃コメント￥：ここから囲み記事￥】, ￥【－囲み記事￥】, ￥【＃コメント￥：3.14159265￥】, 産医師異国に向かう。, ￥【囲み記事－￥】, ----------]
10:31:40.509 [ForkJoinPool-1-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[以上]
10:31:40.509 [ForkJoinPool-1-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#箇条書き
10:31:40.509 [ForkJoinPool-1-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#箇条書き
10:31:40.509 [ForkJoinPool-1-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#箇条書き
10:31:40.509 [ForkJoinPool-1-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast reprex#各種置換
10:31:40.509 [ForkJoinPool-1-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate reprex#各種置換
10:31:40.509 [ForkJoinPool-1-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY reprex#各種置換
10:31:40.517 [ForkJoinPool-6-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY slice#空白行区切り
10:31:40.517 [ForkJoinPool-6-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----------, 　そして下人は高尾山へと姿を消した【註：消息】。, , 【＊註記：消息】, 　正確には、そのような事実があったか確かめられていない。, 【註記＊】, , 【－囲み記事】, 　芥川龍之介の文章を参考とした。, 【＊コメント】, 　要出典明記。, 【コメント＊】, 【囲み記事－】, ＃----------]
10:31:40.517 [ForkJoinPool-6-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#BLエスケープ
10:31:40.552 [ForkJoinPool-2-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----------, 　そして下人は高尾山へと姿を消した￥【註￥：消息￥】。, , ￥【＊註記￥：消息￥】, 　正確には、そのような事実があったか確かめられていない。, ￥【註記＊￥】, , ￥【－囲み記事￥】, 　芥川龍之介の文章を参考とした。, ￥【＊コメント￥】, 　要出典明記。, ￥【コメント＊￥】, ￥【囲み記事－￥】, ----------]
10:31:40.552 [ForkJoinPool-2-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast replace#エスケープ
10:31:40.552 [ForkJoinPool-2-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate replace#エスケープ
10:31:40.552 [ForkJoinPool-2-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY replace#エスケープ
10:31:40.552 [ForkJoinPool-6-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#BLエスケープ
10:31:40.552 [ForkJoinPool-6-worker-2] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#表
10:31:40.552 [ForkJoinPool-3-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#表
10:31:40.552 [ForkJoinPool-3-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#表
10:31:40.552 [ForkJoinPool-3-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#表
10:31:40.558 [ForkJoinPool-6-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [￥【＃タイトル￥】BLtxt記法について, , 　テキストをXMLのような階層のある構造へ変換するための記法です。, 　タグ付けのために隅付き括弧（￥￥￥【、￥￥￥】）を使います。, , 　以下は文範囲タグのサンプルです。, , ￥【－囲み記事￥】, 　海の日、山の日に続いて￥【｜強調￥】空の日￥【強調｜￥】という祝日はどうだろう。, ￥【囲み記事－￥】]
10:31:40.558 [ForkJoinPool-6-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [例）, 美しい￥【ルビ￥：薔薇￥：ばら￥】が咲いていた。]
10:31:40.558 [ForkJoinPool-6-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [例）, 今日は￥【｜強調￥】重要￥【強調｜￥】な日だ。]
10:31:40.558 [ForkJoinPool-6-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [￥【＝見出し￥】はじめに, , ￥【＝書影￥：999-1234567890￥】]
10:31:40.558 [ForkJoinPool-6-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [例）, ￥【－囲み記事￥】, 富士山麓にオウム鳴く。, ￥【囲み記事－￥】]
10:31:40.558 [ForkJoinPool-6-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#表
10:31:40.558 [ForkJoinPool-6-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [例）, ￥【＃コメント￥】ここから重要]
10:31:40.558 [ForkJoinPool-6-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [例）, ￥【＊註記￥】, 　正確には、そのような事実があったか確かめられていない。, ￥【註記＊￥】]
10:31:40.558 [ForkJoinPool-6-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [とりなくこえす、, ゆめさませ。, , みよあけわたる、, , , ひんがしを。]
10:31:40.558 [ForkJoinPool-6-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [美しい￥【ルビ￥：薔薇￥：ばら￥】が咲いていた。]
10:31:40.558 [ForkJoinPool-6-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [ここが￥【｜傍点￥】重要￥【傍点｜￥】です。, ￥【｜強調￥】とても￥【｜ルビ￥：インポータント￥】重要￥【ルビ｜￥】ですよ。￥【強調｜￥】]
10:31:40.558 [ForkJoinPool-6-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [￥【＝見出し￥】トランプの遊び方, , 以下の画像を参照してください。, ￥【＝画像￥：howto.jpg￥】]
10:31:40.558 [ForkJoinPool-6-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [以下の記事を参照してください。, , ￥【－囲み記事￥】, リンカーンは次の言葉を残した。, ￥【－引用￥：『リンカーン語録』￥】, 人民の、, 人民による、, , 人民のための政治。, ￥【引用－￥】, ￥【囲み記事－￥】]
10:31:40.558 [ForkJoinPool-6-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [￥【＃タイトル￥】円周率の暗記, ￥【＃著者￥：山田太郎￥】, , ￥【＃コメント￥：ここから囲み記事￥】, ￥【－囲み記事￥】, ￥【＃コメント￥：3.14159265￥】, 産医師異国に向かう。, ￥【囲み記事－￥】]
10:31:40.558 [ForkJoinPool-6-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [　そして下人は高尾山へと姿を消した￥【註￥：消息￥】。, , ￥【＊註記￥：消息￥】, 　正確には、そのような事実があったか確かめられていない。, ￥【註記＊￥】, , ￥【－囲み記事￥】, 　芥川龍之介の文章を参考とした。, ￥【＊コメント￥】, 　要出典明記。, ￥【コメント＊￥】, ￥【囲み記事－￥】]
10:31:40.558 [ForkJoinPool-6-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#コラム
10:31:40.578 [ForkJoinPool-4-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, ￥【＃タイトル￥】BLtxt記法について, , 　テキストをXMLのような階層のある構造へ変換するための記法です。, 　タグ付けのために隅付き括弧（￥￥￥【、￥￥￥】）を使います。, , 　以下は文範囲タグのサンプルです。, , ￥【－囲み記事￥】, 　海の日、山の日に続いて￥【｜強調￥】空の日￥【強調｜￥】という祝日はどうだろう。, ￥【囲み記事－￥】, 【コラム－】]
10:31:40.578 [ForkJoinPool-6-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <meta tag="タイトル" lnum="2" snum="1">,     <para lnum="2" snum="1">,       <line lnum="2">,         <text>BLtxt記法について</text>,       </line>,     </para>,   </meta>,   <para lnum="4" snum="2">,     <line lnum="4">,       <text>　テキストをXMLのような階層のある構造へ変換するための記法です。</text>,     </line>,     <line lnum="5">,       <text>　タグ付けのために隅付き括弧（￥【、￥】）を使います。</text>,     </line>,   </para>,   <para lnum="7" snum="3">,     <line lnum="7">,       <text>　以下は文範囲タグのサンプルです。</text>,     </line>,   </para>,   <block tag="囲み記事" lnum="9" snum="1">,     <para lnum="9" snum="4">,       <line lnum="10">,         <text>　海の日、山の日に続いて</text>,         <inline tag="強調" lnum="10" snum="1">,           <text>空の日</text>,         </inline>,         <text>という祝日はどうだろう。</text>,       </line>,     </para>,   </block>, </bltxt>, ----- コード -----]
10:31:40.609 [ForkJoinPool-4-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, 例）, 美しい￥【ルビ￥：薔薇￥：ばら￥】が咲いていた。, 【コラム－】]
10:31:40.628 [ForkJoinPool-5-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コード】, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <meta tag="タイトル" lnum="2" snum="1">,     <para lnum="2" snum="1">,       <line lnum="2">,         <text>BLtxt記法について</text>,       </line>,     </para>,   </meta>,   <para lnum="4" snum="2">,     <line lnum="4">,       <text>　テキストをXMLのような階層のある構造へ変換するための記法です。</text>,     </line>,     <line lnum="5">,       <text>　タグ付けのために隅付き括弧（￥【、￥】）を使います。</text>,     </line>,   </para>,   <para lnum="7" snum="3">,     <line lnum="7">,       <text>　以下は文範囲タグのサンプルです。</text>,     </line>,   </para>,   <block tag="囲み記事" lnum="9" snum="1">,     <para lnum="9" snum="4">,       <line lnum="10">,         <text>　海の日、山の日に続いて</text>,         <inline tag="強調" lnum="10" snum="1">,           <text>空の日</text>,         </inline>,         <text>という祝日はどうだろう。</text>,       </line>,     </para>,   </block>, </bltxt>, 【コード－】]
10:31:40.628 [ForkJoinPool-4-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, 例）, 今日は￥【｜強調￥】重要￥【強調｜￥】な日だ。, 【コラム－】]
10:31:40.652 [ForkJoinPool-4-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, ￥【＝見出し￥】はじめに, , ￥【＝書影￥：999-1234567890￥】, 【コラム－】]
10:31:40.668 [ForkJoinPool-4-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, 例）, ￥【－囲み記事￥】, 富士山麓にオウム鳴く。, ￥【囲み記事－￥】, 【コラム－】]
10:31:40.688 [ForkJoinPool-4-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, 例）, ￥【＃コメント￥】ここから重要, 【コラム－】]
10:31:40.708 [ForkJoinPool-4-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, 例）, ￥【＊註記￥】, 　正確には、そのような事実があったか確かめられていない。, ￥【註記＊￥】, 【コラム－】]
10:31:40.717 [ForkJoinPool-4-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, とりなくこえす、, ゆめさませ。, , みよあけわたる、, , , ひんがしを。, 【コラム－】]
10:31:40.717 [ForkJoinPool-6-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コード -----, @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/'), @Grab('io.github.longfish801:yakumo:0.1.00'), @GrabExclude('org.codehaus.groovy:groovy-all'), , import io.github.longfish801.yakumo.bltxt.BLtxt;, import io.github.longfish801.yakumo.parser.ParseException;, , BLtxt bltxt = null;, try {, 	bltxt = new BLtxt(new File('sample.txt'));, 	assert bltxt.toXml() == new File('sample.xml').getText('UTF-8');, } catch (ParseException exc){, 	println "文法誤りがあるため BLtxt文書を解析できません。exc=${exc}";, }, ----- コード -----]
10:31:40.758 [ForkJoinPool-4-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, 美しい￥【ルビ￥：薔薇￥：ばら￥】が咲いていた。, 【コラム－】]
10:31:40.758 [ForkJoinPool-6-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="1" snum="1">,     <line lnum="1">,       <text>とりなくこえす、</text>,     </line>,     <line lnum="2">,       <text>ゆめさませ。</text>,     </line>,   </para>,   <para lnum="4" snum="2">,     <line lnum="4">,       <text>みよあけわたる、</text>,     </line>,   </para>,   <para lnum="7" snum="3">,     <line lnum="7">,       <text>ひんがしを。</text>,     </line>,   </para>, </bltxt>, ----- コード -----]
10:31:40.768 [ForkJoinPool-5-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コード】, @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/'), @Grab('io.github.longfish801:yakumo:0.1.00'), @GrabExclude('org.codehaus.groovy:groovy-all'), , import io.github.longfish801.yakumo.bltxt.BLtxt;, import io.github.longfish801.yakumo.parser.ParseException;, , BLtxt bltxt = null;, try {, 	bltxt = new BLtxt(new File('sample.txt'));, 	assert bltxt.toXml() == new File('sample.xml').getText('UTF-8');, } catch (ParseException exc){, 	println "文法誤りがあるため BLtxt文書を解析できません。exc=${exc}";, }, 【コード－】]
10:31:40.792 [ForkJoinPool-4-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, ここが￥【｜傍点￥】重要￥【傍点｜￥】です。, ￥【｜強調￥】とても￥【｜ルビ￥：インポータント￥】重要￥【ルビ｜￥】ですよ。￥【強調｜￥】, 【コラム－】]
10:31:40.792 [ForkJoinPool-6-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="1" snum="1">,     <line lnum="1">,       <text>美しい</text>,       <inline tag="ルビ" lnum="1" snum="1">,         <attrs>,           <attr>薔薇</attr>,           <attr>ばら</attr>,         </attrs>,       </inline>,       <text>が咲いていた。</text>,     </line>,   </para>, </bltxt>, ----- コード -----]
10:31:40.810 [ForkJoinPool-5-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コード】, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="1" snum="1">,     <line lnum="1">,       <text>とりなくこえす、</text>,     </line>,     <line lnum="2">,       <text>ゆめさませ。</text>,     </line>,   </para>,   <para lnum="4" snum="2">,     <line lnum="4">,       <text>みよあけわたる、</text>,     </line>,   </para>,   <para lnum="7" snum="3">,     <line lnum="7">,       <text>ひんがしを。</text>,     </line>,   </para>, </bltxt>, 【コード－】]
10:31:40.828 [ForkJoinPool-4-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, ￥【＝見出し￥】トランプの遊び方, , 以下の画像を参照してください。, ￥【＝画像￥：howto.jpg￥】, 【コラム－】]
10:31:40.828 [ForkJoinPool-6-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="2" snum="1">,     <line lnum="2">,       <text>ここが</text>,       <inline tag="傍点" lnum="2" snum="1">,         <text>重要</text>,       </inline>,       <text>です。</text>,     </line>,     <line lnum="3">,       <inline tag="強調" lnum="3" snum="1">,         <text>とても</text>,         <inline tag="ルビ" lnum="3" snum="1">,           <attrs>,             <attr>インポータント</attr>,           </attrs>,           <text>重要</text>,         </inline>,         <text>ですよ。</text>,       </inline>,     </line>,   </para>, </bltxt>, ----- コード -----]
10:31:40.838 [ForkJoinPool-5-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コード】, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="1" snum="1">,     <line lnum="1">,       <text>美しい</text>,       <inline tag="ルビ" lnum="1" snum="1">,         <attrs>,           <attr>薔薇</attr>,           <attr>ばら</attr>,         </attrs>,       </inline>,       <text>が咲いていた。</text>,     </line>,   </para>, </bltxt>, 【コード－】]
10:31:40.848 [ForkJoinPool-4-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, 以下の記事を参照してください。, , ￥【－囲み記事￥】, リンカーンは次の言葉を残した。, ￥【－引用￥：『リンカーン語録』￥】, 人民の、, 人民による、, , 人民のための政治。, ￥【引用－￥】, ￥【囲み記事－￥】, 【コラム－】]
10:31:40.848 [ForkJoinPool-6-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <block tag="見出し" lnum="1" snum="1">,     <para lnum="1" snum="1">,       <line lnum="1">,         <text>トランプの遊び方</text>,       </line>,     </para>,   </block>,   <para lnum="3" snum="2">,     <line lnum="3">,       <text>以下の画像を参照してください。</text>,     </line>,   </para>,   <block tag="画像" lnum="4" snum="1">,     <attrs>,       <attr>howto.jpg</attr>,     </attrs>,   </block>, </bltxt>, ----- コード -----]
10:31:40.878 [ForkJoinPool-5-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コード】, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="2" snum="1">,     <line lnum="2">,       <text>ここが</text>,       <inline tag="傍点" lnum="2" snum="1">,         <text>重要</text>,       </inline>,       <text>です。</text>,     </line>,     <line lnum="3">,       <inline tag="強調" lnum="3" snum="1">,         <text>とても</text>,         <inline tag="ルビ" lnum="3" snum="1">,           <attrs>,             <attr>インポータント</attr>,           </attrs>,           <text>重要</text>,         </inline>,         <text>ですよ。</text>,       </inline>,     </line>,   </para>, </bltxt>, 【コード－】]
10:31:40.878 [ForkJoinPool-4-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, ￥【＃タイトル￥】円周率の暗記, ￥【＃著者￥：山田太郎￥】, , ￥【＃コメント￥：ここから囲み記事￥】, ￥【－囲み記事￥】, ￥【＃コメント￥：3.14159265￥】, 産医師異国に向かう。, ￥【囲み記事－￥】, 【コラム－】]
10:31:40.878 [ForkJoinPool-6-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="1" snum="1">,     <line lnum="1">,       <text>以下の記事を参照してください。</text>,     </line>,   </para>,   <block tag="囲み記事" lnum="3" snum="1">,     <para lnum="3" snum="2">,       <line lnum="4">,         <text>リンカーンは次の言葉を残した。</text>,       </line>,     </para>,     <block tag="引用" lnum="5" snum="1">,       <attrs>,         <attr>『リンカーン語録』</attr>,       </attrs>,       <para lnum="5" snum="3">,         <line lnum="6">,           <text>人民の、</text>,         </line>,         <line lnum="7">,           <text>人民による、</text>,         </line>,       </para>,       <para lnum="9" snum="4">,         <line lnum="9">,           <text>人民のための政治。</text>,         </line>,       </para>,     </block>,   </block>, </bltxt>, ----- コード -----]
10:31:40.910 [ForkJoinPool-5-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コード】, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <block tag="見出し" lnum="1" snum="1">,     <para lnum="1" snum="1">,       <line lnum="1">,         <text>トランプの遊び方</text>,       </line>,     </para>,   </block>,   <para lnum="3" snum="2">,     <line lnum="3">,       <text>以下の画像を参照してください。</text>,     </line>,   </para>,   <block tag="画像" lnum="4" snum="1">,     <attrs>,       <attr>howto.jpg</attr>,     </attrs>,   </block>, </bltxt>, 【コード－】]
10:31:40.917 [ForkJoinPool-4-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, 　そして下人は高尾山へと姿を消した￥【註￥：消息￥】。, , ￥【＊註記￥：消息￥】, 　正確には、そのような事実があったか確かめられていない。, ￥【註記＊￥】, , ￥【－囲み記事￥】, 　芥川龍之介の文章を参考とした。, ￥【＊コメント￥】, 　要出典明記。, ￥【コメント＊￥】, ￥【囲み記事－￥】, 【コラム－】]
10:31:40.917 [ForkJoinPool-4-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#コラムを整形
10:31:40.917 [ForkJoinPool-4-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#コラムを整形
10:31:40.917 [ForkJoinPool-4-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#コラムを整形
10:31:40.917 [ForkJoinPool-6-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#コラム
10:31:40.917 [ForkJoinPool-6-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <meta tag="タイトル" lnum="1" snum="1">,     <para lnum="1" snum="1">,       <line lnum="1">,         <text>円周率の暗記</text>,       </line>,     </para>,   </meta>,   <meta tag="著者" lnum="2" snum="1">,     <attrs>,       <attr>山田太郎</attr>,     </attrs>,   </meta>,   <meta tag="コメント" lnum="4" snum="1">,     <attrs>,       <attr>ここから囲み記事</attr>,     </attrs>,   </meta>,   <block tag="囲み記事" lnum="5" snum="1">,     <meta tag="コメント" lnum="6" snum="2">,       <attrs>,         <attr>3.14159265</attr>,       </attrs>,     </meta>,     <para lnum="6" snum="2">,       <line lnum="7">,         <text>産医師異国に向かう。</text>,       </line>,     </para>,   </block>, </bltxt>, ----- コード -----]
10:31:40.917 [ForkJoinPool-6-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コード -----, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="1" snum="1">,     <line lnum="1">,       <text>　そして下人は高尾山へと姿を消した</text>,       <inline tag="註" lnum="1" snum="1">,         <attrs>,           <attr>消息</attr>,         </attrs>,       </inline>,       <text>。</text>,     </line>,   </para>,   <meta tag="註記" lnum="3" snum="1">,     <attrs>,       <attr>消息</attr>,     </attrs>,     <para lnum="3" snum="2">,       <line lnum="4">,         <text>　正確には、そのような事実があったか確かめられていない。</text>,       </line>,     </para>,   </meta>,   <block tag="囲み記事" lnum="7" snum="1">,     <para lnum="7" snum="3">,       <line lnum="8">,         <text>　芥川龍之介の文章を参考とした。</text>,       </line>,     </para>,     <meta tag="コメント" lnum="9" snum="1">,       <para lnum="9" snum="4">,         <line lnum="10">,           <text>　要出典明記。</text>,         </line>,       </para>,     </meta>,   </block>, </bltxt>, ----- コード -----]
10:31:40.917 [ForkJoinPool-6-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#タグ付きコラム
10:31:40.942 [ForkJoinPool-5-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コード】, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="1" snum="1">,     <line lnum="1">,       <text>以下の記事を参照してください。</text>,     </line>,   </para>,   <block tag="囲み記事" lnum="3" snum="1">,     <para lnum="3" snum="2">,       <line lnum="4">,         <text>リンカーンは次の言葉を残した。</text>,       </line>,     </para>,     <block tag="引用" lnum="5" snum="1">,       <attrs>,         <attr>『リンカーン語録』</attr>,       </attrs>,       <para lnum="5" snum="3">,         <line lnum="6">,           <text>人民の、</text>,         </line>,         <line lnum="7">,           <text>人民による、</text>,         </line>,       </para>,       <para lnum="9" snum="4">,         <line lnum="9">,           <text>人民のための政治。</text>,         </line>,       </para>,     </block>,   </block>, </bltxt>, 【コード－】]
10:31:40.965 [ForkJoinPool-5-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コード】, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <meta tag="タイトル" lnum="1" snum="1">,     <para lnum="1" snum="1">,       <line lnum="1">,         <text>円周率の暗記</text>,       </line>,     </para>,   </meta>,   <meta tag="著者" lnum="2" snum="1">,     <attrs>,       <attr>山田太郎</attr>,     </attrs>,   </meta>,   <meta tag="コメント" lnum="4" snum="1">,     <attrs>,       <attr>ここから囲み記事</attr>,     </attrs>,   </meta>,   <block tag="囲み記事" lnum="5" snum="1">,     <meta tag="コメント" lnum="6" snum="2">,       <attrs>,         <attr>3.14159265</attr>,       </attrs>,     </meta>,     <para lnum="6" snum="2">,       <line lnum="7">,         <text>産医師異国に向かう。</text>,       </line>,     </para>,   </block>, </bltxt>, 【コード－】]
10:31:40.986 [ForkJoinPool-5-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コード】, <?xml version="1.0" encoding="UTF-8"?>, <bltxt>,   <para lnum="1" snum="1">,     <line lnum="1">,       <text>　そして下人は高尾山へと姿を消した</text>,       <inline tag="註" lnum="1" snum="1">,         <attrs>,           <attr>消息</attr>,         </attrs>,       </inline>,       <text>。</text>,     </line>,   </para>,   <meta tag="註記" lnum="3" snum="1">,     <attrs>,       <attr>消息</attr>,     </attrs>,     <para lnum="3" snum="2">,       <line lnum="4">,         <text>　正確には、そのような事実があったか確かめられていない。</text>,       </line>,     </para>,   </meta>,   <block tag="囲み記事" lnum="7" snum="1">,     <para lnum="7" snum="3">,       <line lnum="8">,         <text>　芥川龍之介の文章を参考とした。</text>,       </line>,     </para>,     <meta tag="コメント" lnum="9" snum="1">,       <para lnum="9" snum="4">,         <line lnum="10">,           <text>　要出典明記。</text>,         </line>,       </para>,     </meta>,   </block>, </bltxt>, 【コード－】]
10:31:40.987 [ForkJoinPool-5-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#タグ付きコラムを整形
10:31:40.987 [ForkJoinPool-5-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#タグ付きコラムを整形
10:31:40.987 [ForkJoinPool-5-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#タグ付きコラムを整形
10:31:40.987 [ForkJoinPool-6-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#タグ付きコラム
10:31:41.052 [Thread-1] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行終了 key=washscr#BLtxt文書へ整形
10:31:41.056 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：meta タイトル
10:31:41.057 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.060 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.060 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.061 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.061 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:31:41.061 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.062 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.062 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.062 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:31:41.063 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:31:41.063 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.063 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.063 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.063 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.064 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.064 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:31:41.064 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:31:41.065 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コード
10:31:41.065 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.068 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.068 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:31:41.069 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コード
10:31:41.069 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.069 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.070 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.070 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.070 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.071 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.071 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.071 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.071 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.071 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.072 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.072 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.072 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.072 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.072 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.072 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.072 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.072 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.073 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.073 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.073 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.073 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.073 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.073 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.073 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.073 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.073 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.074 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.074 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.074 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.074 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.074 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.074 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.074 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.074 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.075 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.075 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.075 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.075 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.075 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.075 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.075 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.075 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.076 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.076 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.076 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.076 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.076 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.076 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.076 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.076 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.077 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.077 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.077 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.077 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.077 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.077 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.077 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.078 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:31:41.078 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.078 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.078 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.078 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.078 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.079 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.079 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:31:41.079 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.079 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.079 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.079 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.080 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:31:41.080 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.080 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.080 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.080 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.080 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.081 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.081 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.081 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:31:41.081 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.082 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.082 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.082 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.082 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:31:41.082 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.083 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.083 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.083 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.083 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.083 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.083 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:31:41.083 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.084 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.084 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.084 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.084 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.084 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.084 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.085 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.085 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.085 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.085 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.085 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.085 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.085 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.085 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.086 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.086 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.086 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.086 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.086 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.086 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.086 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.086 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.087 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.087 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.087 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.087 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.087 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.087 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.088 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.088 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.088 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.088 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.088 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.088 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.088 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.088 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.089 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.089 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.089 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.089 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.089 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.089 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:31:41.089 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.089 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.089 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.090 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.090 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:31:41.090 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.090 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.090 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.090 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.090 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.091 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.091 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.091 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.091 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.091 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.091 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.091 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.091 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.092 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.092 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.092 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.092 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.092 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.092 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.092 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.092 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.093 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.093 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.093 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.093 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.093 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.093 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.093 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.093 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.093 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.093 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.094 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.094 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.094 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.094 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.094 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.094 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.094 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.095 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.095 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.095 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.095 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.095 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.095 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.095 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.095 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.095 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.095 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.096 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.096 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.096 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.096 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.096 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.096 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:31:41.096 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.097 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:31:41.097 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:31:41.097 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.097 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.097 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.097 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.097 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.098 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:31:41.098 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.098 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.098 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.098 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コード
10:31:41.099 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.101 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.101 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.101 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.101 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:31:41.101 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.101 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コード
10:31:41.101 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.103 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.103 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.103 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.103 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:31:41.104 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.104 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コード
10:31:41.104 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.106 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.106 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.107 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.107 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:31:41.107 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.107 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.107 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コード
10:31:41.108 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.109 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.110 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.110 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.110 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:31:41.110 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.110 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.111 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.111 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コード
10:31:41.111 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.115 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.115 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.115 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.115 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:31:41.115 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.115 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.116 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コード
10:31:41.116 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.137 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:31:41.137 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.137 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.138 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:31:41.138 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.138 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.138 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.139 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コード
10:31:41.139 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.143 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:31:41.288 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:31:41.338 [main] DEBUG io.github.longfish801 - para call
10:31:41.388 [main] DEBUG io.github.longfish801 - line call
10:31:41.445 [main] DEBUG io.github.longfish801 - text call: BLtxt記法とは
10:31:41.602 [main] DEBUG io.github.longfish801 - para call
10:31:41.648 [main] DEBUG io.github.longfish801 - line call
10:31:41.698 [main] DEBUG io.github.longfish801 - text call: 　BLtxt記法は、テキストをXMLのような階層関係がある構造（
10:31:41.748 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:31:41.802 [main] DEBUG io.github.longfish801 - text call: BLtxtクラス
10:31:41.848 [main] DEBUG io.github.longfish801 - text call: のインスタンス）へ変換することを目的としています。
10:31:41.898 [main] DEBUG io.github.longfish801 - line call
10:31:41.952 [main] DEBUG io.github.longfish801 - text call: 　名称はタグに隅付き括弧(black lenticular bracket)を用いることに由来しています。
10:31:42.008 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:31:42.058 [main] DEBUG io.github.longfish801 - para call
10:31:42.118 [main] DEBUG io.github.longfish801 - line call
10:31:42.168 [main] DEBUG io.github.longfish801 - text call: サンプル
10:31:42.218 [main] DEBUG io.github.longfish801 - para call
10:31:42.268 [main] DEBUG io.github.longfish801 - line call
10:31:42.318 [main] DEBUG io.github.longfish801 - text call: 　BLtxt記法によるテキストの例を以下に示します。
10:31:42.368 [main] DEBUG io.github.longfish801 - line call
10:31:42.418 [main] DEBUG io.github.longfish801 - text call: 　ファイル
10:31:42.472 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:31:42.518 [main] DEBUG io.github.longfish801 - text call: bltxtSample/sample.txt
10:31:42.579 [main] DEBUG io.github.longfish801 - text call: として保存したとします。
10:31:42.627 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:31:42.688 [main] DEBUG io.github.longfish801 - para call
10:31:42.736 [main] DEBUG io.github.longfish801 - line call
10:31:42.790 [main] DEBUG io.github.longfish801 - text call: 【＃タイトル】BLtxt記法について
10:31:42.843 [main] DEBUG io.github.longfish801 - para call
10:31:42.891 [main] DEBUG io.github.longfish801 - line call
10:31:42.938 [main] DEBUG io.github.longfish801 - text call: 　テキストをXMLのような階層のある構造へ変換するための記法です。
10:31:42.992 [main] DEBUG io.github.longfish801 - line call
10:31:43.041 [main] DEBUG io.github.longfish801 - text call: 　タグ付けのために隅付き括弧（￥【、￥】）を使います。
10:31:43.094 [main] DEBUG io.github.longfish801 - para call
10:31:43.142 [main] DEBUG io.github.longfish801 - line call
10:31:43.201 [main] DEBUG io.github.longfish801 - text call: 　以下は文範囲タグのサンプルです。
10:31:43.250 [main] DEBUG io.github.longfish801 - para call
10:31:43.300 [main] DEBUG io.github.longfish801 - line call
10:31:43.353 [main] DEBUG io.github.longfish801 - text call: 【－囲み記事】
10:31:43.398 [main] DEBUG io.github.longfish801 - line call
10:31:43.449 [main] DEBUG io.github.longfish801 - text call: 　海の日、山の日に続いて【｜強調】空の日【強調｜】という祝日はどうだろう。
10:31:43.503 [main] DEBUG io.github.longfish801 - line call
10:31:43.550 [main] DEBUG io.github.longfish801 - text call: 【囲み記事－】
10:31:43.604 [main] DEBUG io.github.longfish801 - para call
10:31:43.654 [main] DEBUG io.github.longfish801 - line call
10:31:43.705 [main] DEBUG io.github.longfish801 - text call: 　クラス
10:31:43.760 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:31:43.811 [main] DEBUG io.github.longfish801 - text call: BLtxt
10:31:43.861 [main] DEBUG io.github.longfish801 - text call: を利用して、以下の XMLへ変換することができます。
10:31:43.907 [main] DEBUG io.github.longfish801 - line call
10:31:43.961 [main] DEBUG io.github.longfish801 - text call: 　ファイル
10:31:44.011 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:31:44.062 [main] DEBUG io.github.longfish801 - text call: bltxtSample/sample.xml
10:31:44.117 [main] DEBUG io.github.longfish801 - text call: として保存したとします。
10:31:44.178 [main] DEBUG io.github.longfish801 - block call: block#コード
10:31:44.228 [main] DEBUG io.github.longfish801 - para call
10:31:44.278 [main] DEBUG io.github.longfish801 - line call
10:31:44.331 [main] DEBUG io.github.longfish801 - text call: <?xml version="1.0" encoding="UTF-8"?>
10:31:44.381 [main] DEBUG io.github.longfish801 - line call
10:31:44.437 [main] DEBUG io.github.longfish801 - text call: <bltxt>
10:31:44.480 [main] DEBUG io.github.longfish801 - line call
10:31:44.531 [main] DEBUG io.github.longfish801 - text call:   <meta tag="タイトル" lnum="2" snum="1">
10:31:44.582 [main] DEBUG io.github.longfish801 - line call
10:31:44.630 [main] DEBUG io.github.longfish801 - text call:     <para lnum="2" snum="1">
10:31:44.682 [main] DEBUG io.github.longfish801 - line call
10:31:44.730 [main] DEBUG io.github.longfish801 - text call:       <line lnum="2">
10:31:44.781 [main] DEBUG io.github.longfish801 - line call
10:31:44.834 [main] DEBUG io.github.longfish801 - text call:         <text>BLtxt記法について</text>
10:31:44.887 [main] DEBUG io.github.longfish801 - line call
10:31:44.939 [main] DEBUG io.github.longfish801 - text call:       </line>
10:31:44.986 [main] DEBUG io.github.longfish801 - line call
10:31:45.036 [main] DEBUG io.github.longfish801 - text call:     </para>
10:31:45.084 [main] DEBUG io.github.longfish801 - line call
10:31:45.137 [main] DEBUG io.github.longfish801 - text call:   </meta>
10:31:45.183 [main] DEBUG io.github.longfish801 - line call
10:31:45.231 [main] DEBUG io.github.longfish801 - text call:   <para lnum="4" snum="2">
10:31:45.283 [main] DEBUG io.github.longfish801 - line call
10:31:45.338 [main] DEBUG io.github.longfish801 - text call:     <line lnum="4">
10:31:45.390 [main] DEBUG io.github.longfish801 - line call
10:31:45.440 [main] DEBUG io.github.longfish801 - text call:       <text>　テキストをXMLのような階層のある構造へ変換するための記法です。</text>
10:31:45.489 [main] DEBUG io.github.longfish801 - line call
10:31:45.539 [main] DEBUG io.github.longfish801 - text call:     </line>
10:31:45.589 [main] DEBUG io.github.longfish801 - line call
10:31:45.637 [main] DEBUG io.github.longfish801 - text call:     <line lnum="5">
10:31:45.689 [main] DEBUG io.github.longfish801 - line call
10:31:45.741 [main] DEBUG io.github.longfish801 - text call:       <text>　タグ付けのために隅付き括弧（【、】）を使います。</text>
10:31:45.790 [main] DEBUG io.github.longfish801 - line call
10:31:45.836 [main] DEBUG io.github.longfish801 - text call:     </line>
10:31:45.897 [main] DEBUG io.github.longfish801 - line call
10:31:45.951 [main] DEBUG io.github.longfish801 - text call:   </para>
10:31:46.000 [main] DEBUG io.github.longfish801 - line call
10:31:46.053 [main] DEBUG io.github.longfish801 - text call:   <para lnum="7" snum="3">
10:31:46.101 [main] DEBUG io.github.longfish801 - line call
10:31:46.154 [main] DEBUG io.github.longfish801 - text call:     <line lnum="7">
10:31:46.201 [main] DEBUG io.github.longfish801 - line call
10:31:46.254 [main] DEBUG io.github.longfish801 - text call:       <text>　以下は文範囲タグのサンプルです。</text>
10:31:46.301 [main] DEBUG io.github.longfish801 - line call
10:31:46.351 [main] DEBUG io.github.longfish801 - text call:     </line>
10:31:46.409 [main] DEBUG io.github.longfish801 - line call
10:31:46.459 [main] DEBUG io.github.longfish801 - text call:   </para>
10:31:46.510 [main] DEBUG io.github.longfish801 - line call
10:31:46.560 [main] DEBUG io.github.longfish801 - text call:   <block tag="囲み記事" lnum="9" snum="1">
10:31:46.609 [main] DEBUG io.github.longfish801 - line call
10:31:46.662 [main] DEBUG io.github.longfish801 - text call:     <para lnum="9" snum="4">
10:31:46.709 [main] DEBUG io.github.longfish801 - line call
10:31:46.760 [main] DEBUG io.github.longfish801 - text call:       <line lnum="10">
10:31:46.811 [main] DEBUG io.github.longfish801 - line call
10:31:46.864 [main] DEBUG io.github.longfish801 - text call:         <text>　海の日、山の日に続いて</text>
10:31:46.909 [main] DEBUG io.github.longfish801 - line call
10:31:46.968 [main] DEBUG io.github.longfish801 - text call:         <inline tag="強調" lnum="10" snum="1">
10:31:47.018 [main] DEBUG io.github.longfish801 - line call
10:31:47.068 [main] DEBUG io.github.longfish801 - text call:           <text>空の日</text>
10:31:47.118 [main] DEBUG io.github.longfish801 - line call
10:31:47.169 [main] DEBUG io.github.longfish801 - text call:         </inline>
10:31:47.212 [main] DEBUG io.github.longfish801 - line call
10:31:47.267 [main] DEBUG io.github.longfish801 - text call:         <text>という祝日はどうだろう。</text>
10:31:47.310 [main] DEBUG io.github.longfish801 - line call
10:31:47.361 [main] DEBUG io.github.longfish801 - text call:       </line>
10:31:47.414 [main] DEBUG io.github.longfish801 - line call
10:31:47.477 [main] DEBUG io.github.longfish801 - text call:     </para>
10:31:47.527 [main] DEBUG io.github.longfish801 - line call
10:31:47.581 [main] DEBUG io.github.longfish801 - text call:   </block>
10:31:47.629 [main] DEBUG io.github.longfish801 - line call
10:31:47.693 [main] DEBUG io.github.longfish801 - text call: </bltxt>
10:31:47.743 [main] DEBUG io.github.longfish801 - para call
10:31:47.792 [main] DEBUG io.github.longfish801 - line call
10:31:47.838 [main] DEBUG io.github.longfish801 - text call: 　以下を
10:31:47.889 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:31:47.948 [main] DEBUG io.github.longfish801 - text call: bltxtSample/sample.groovy
10:31:48.009 [main] DEBUG io.github.longfish801 - text call: として保存し、groovyコマンドで実行してください。
10:31:48.060 [main] DEBUG io.github.longfish801 - line call
10:31:48.112 [main] DEBUG io.github.longfish801 - text call: 　上記 BLtxt文書を XMLに変換した結果が上記の XMLと一致することを確認しています。
10:31:48.159 [main] DEBUG io.github.longfish801 - block call: block#コード
10:31:48.209 [main] DEBUG io.github.longfish801 - para call
10:31:48.250 [main] DEBUG io.github.longfish801 - line call
10:31:48.308 [main] DEBUG io.github.longfish801 - text call: @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/')
10:31:48.350 [main] DEBUG io.github.longfish801 - line call
10:31:48.408 [main] DEBUG io.github.longfish801 - text call: @Grab('io.github.longfish801:yakumo:0.1.00')
10:31:48.461 [main] DEBUG io.github.longfish801 - line call
10:31:48.512 [main] DEBUG io.github.longfish801 - text call: @GrabExclude('org.codehaus.groovy:groovy-all')
10:31:48.571 [main] DEBUG io.github.longfish801 - para call
10:31:48.622 [main] DEBUG io.github.longfish801 - line call
10:31:48.676 [main] DEBUG io.github.longfish801 - text call: import io.github.longfish801.yakumo.bltxt.BLtxt;
10:31:48.721 [main] DEBUG io.github.longfish801 - line call
10:31:48.770 [main] DEBUG io.github.longfish801 - text call: import io.github.longfish801.yakumo.parser.ParseException;
10:31:48.820 [main] DEBUG io.github.longfish801 - para call
10:31:48.869 [main] DEBUG io.github.longfish801 - line call
10:31:48.919 [main] DEBUG io.github.longfish801 - text call: BLtxt bltxt = null;
10:31:48.965 [main] DEBUG io.github.longfish801 - line call
10:31:49.021 [main] DEBUG io.github.longfish801 - text call: try {
10:31:49.069 [main] DEBUG io.github.longfish801 - line call
10:31:49.132 [main] DEBUG io.github.longfish801 - text call: 	bltxt = new BLtxt(new File('sample.txt'));
10:31:49.181 [main] DEBUG io.github.longfish801 - line call
10:31:49.231 [main] DEBUG io.github.longfish801 - text call: 	assert bltxt.toXml() == new File('sample.xml').getText('UTF-8');
10:31:49.279 [main] DEBUG io.github.longfish801 - line call
10:31:49.328 [main] DEBUG io.github.longfish801 - text call: } catch (ParseException exc){
10:31:49.376 [main] DEBUG io.github.longfish801 - line call
10:31:49.429 [main] DEBUG io.github.longfish801 - text call: 	println "文法誤りがあるため BLtxt文書を解析できません。exc=${exc}";
10:31:49.475 [main] DEBUG io.github.longfish801 - line call
10:31:49.527 [main] DEBUG io.github.longfish801 - text call: }
10:31:49.580 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:31:49.648 [main] DEBUG io.github.longfish801 - para call
10:31:49.697 [main] DEBUG io.github.longfish801 - line call
10:31:49.748 [main] DEBUG io.github.longfish801 - text call: 記法
10:31:49.802 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:31:49.852 [main] DEBUG io.github.longfish801 - para call
10:31:49.898 [main] DEBUG io.github.longfish801 - line call
10:31:49.952 [main] DEBUG io.github.longfish801 - text call: 構成
10:31:49.998 [main] DEBUG io.github.longfish801 - para call
10:31:50.048 [main] DEBUG io.github.longfish801 - line call
10:31:50.102 [main] DEBUG io.github.longfish801 - text call: 　空行、平文、タグから構成されます。
10:31:50.152 [main] DEBUG io.github.longfish801 - line call
10:31:50.218 [main] DEBUG io.github.longfish801 - text call: 　タグは左隅付き括弧（【）と右隅付き括弧（】）に囲まれます。
10:31:50.275 [main] DEBUG io.github.longfish801 - line call
10:31:50.328 [main] DEBUG io.github.longfish801 - text call: 　二行以上連続する空行は、ひとつの空行と同じ扱いとします。
10:31:50.372 [main] DEBUG io.github.longfish801 - line call
10:31:50.428 [main] DEBUG io.github.longfish801 - text call: 　末尾が改行で終わっても、終わらなくても、どちらでも構いません。
10:31:50.478 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:31:50.531 [main] DEBUG io.github.longfish801 - para call
10:31:50.578 [main] DEBUG io.github.longfish801 - line call
10:31:50.628 [main] DEBUG io.github.longfish801 - text call: タグ
10:31:50.672 [main] DEBUG io.github.longfish801 - para call
10:31:50.722 [main] DEBUG io.github.longfish801 - line call
10:31:50.782 [main] DEBUG io.github.longfish801 - text call: 　タグには以下の種類があります。
10:31:50.828 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:31:50.878 [main] DEBUG io.github.longfish801 - block call: block#対象
10:31:50.928 [main] DEBUG io.github.longfish801 - para call
10:31:50.977 [main] DEBUG io.github.longfish801 - line call
10:31:51.031 [main] DEBUG io.github.longfish801 - text call: 文中タグ
10:31:51.081 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:31:51.130 [main] DEBUG io.github.longfish801 - block call: block#説明
10:31:51.180 [main] DEBUG io.github.longfish801 - para call
10:31:51.231 [main] DEBUG io.github.longfish801 - line call
10:31:51.298 [main] DEBUG io.github.longfish801 - text call: 文の中で用います。
10:31:51.341 [main] DEBUG io.github.longfish801 - block call: block#対象
10:31:51.392 [main] DEBUG io.github.longfish801 - para call
10:31:51.441 [main] DEBUG io.github.longfish801 - line call
10:31:51.492 [main] DEBUG io.github.longfish801 - text call: 文範囲タグ
10:31:51.541 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:31:51.594 [main] DEBUG io.github.longfish801 - block call: block#説明
10:31:51.646 [main] DEBUG io.github.longfish801 - para call
10:31:51.696 [main] DEBUG io.github.longfish801 - line call
10:31:51.750 [main] DEBUG io.github.longfish801 - text call: 文中の特定範囲を示すために用います。
10:31:51.809 [main] DEBUG io.github.longfish801 - block call: block#対象
10:31:51.858 [main] DEBUG io.github.longfish801 - para call
10:31:51.908 [main] DEBUG io.github.longfish801 - line call
10:31:51.959 [main] DEBUG io.github.longfish801 - text call: 行タグ
10:31:52.008 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:31:52.060 [main] DEBUG io.github.longfish801 - block call: block#説明
10:31:52.110 [main] DEBUG io.github.longfish801 - para call
10:31:52.161 [main] DEBUG io.github.longfish801 - line call
10:31:52.212 [main] DEBUG io.github.longfish801 - text call: 特定の一文あるいは単独のタグのみ示すのに用います。
10:31:52.259 [main] DEBUG io.github.longfish801 - block call: block#対象
10:31:52.310 [main] DEBUG io.github.longfish801 - para call
10:31:52.370 [main] DEBUG io.github.longfish801 - line call
10:31:52.421 [main] DEBUG io.github.longfish801 - text call: 行範囲タグ
10:31:52.474 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:31:52.523 [main] DEBUG io.github.longfish801 - block call: block#説明
10:31:52.569 [main] DEBUG io.github.longfish801 - para call
10:31:52.620 [main] DEBUG io.github.longfish801 - line call
10:31:52.680 [main] DEBUG io.github.longfish801 - text call: 特定の行の範囲を示すために用います。
10:31:52.727 [main] DEBUG io.github.longfish801 - block call: block#対象
10:31:52.771 [main] DEBUG io.github.longfish801 - para call
10:31:52.818 [main] DEBUG io.github.longfish801 - line call
10:31:52.897 [main] DEBUG io.github.longfish801 - text call: 含意タグ
10:31:52.957 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:31:53.007 [main] DEBUG io.github.longfish801 - block call: block#説明
10:31:53.058 [main] DEBUG io.github.longfish801 - para call
10:31:53.110 [main] DEBUG io.github.longfish801 - line call
10:31:53.158 [main] DEBUG io.github.longfish801 - text call: 文章に含めない情報を記述するのに用います。
10:31:53.211 [main] DEBUG io.github.longfish801 - block call: block#対象
10:31:53.266 [main] DEBUG io.github.longfish801 - para call
10:31:53.309 [main] DEBUG io.github.longfish801 - line call
10:31:53.367 [main] DEBUG io.github.longfish801 - text call: 含意範囲タグ
10:31:53.417 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:31:53.477 [main] DEBUG io.github.longfish801 - block call: block#説明
10:31:53.525 [main] DEBUG io.github.longfish801 - para call
10:31:53.579 [main] DEBUG io.github.longfish801 - line call
10:31:53.630 [main] DEBUG io.github.longfish801 - text call: 文章に含めない情報を特定の行の範囲について示すのに用います。
10:31:53.680 [main] DEBUG io.github.longfish801 - para call
10:31:53.726 [main] DEBUG io.github.longfish801 - line call
10:31:53.777 [main] DEBUG io.github.longfish801 - text call: 　タグは、タグ名と属性から成ります。
10:31:53.820 [main] DEBUG io.github.longfish801 - line call
10:31:53.871 [main] DEBUG io.github.longfish801 - text call: 　タグ名は省略できません。
10:31:53.916 [main] DEBUG io.github.longfish801 - line call
10:31:53.981 [main] DEBUG io.github.longfish801 - text call: 　属性は、タグ名に続けて記述します。省略することもできます。
10:31:54.020 [main] DEBUG io.github.longfish801 - line call
10:31:54.071 [main] DEBUG io.github.longfish801 - text call: 　全角コロン（：）区切りで複数指定できます。
10:31:54.121 [main] DEBUG io.github.longfish801 - para call
10:31:54.165 [main] DEBUG io.github.longfish801 - line call
10:31:54.217 [main] DEBUG io.github.longfish801 - text call: 　属性を指定できるのは以下のタグのみです。
10:31:54.257 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:31:54.308 [main] DEBUG io.github.longfish801 - block call: block#項目
10:31:54.361 [main] DEBUG io.github.longfish801 - para call
10:31:54.409 [main] DEBUG io.github.longfish801 - line call
10:31:54.460 [main] DEBUG io.github.longfish801 - text call: 文中タグ
10:31:54.520 [main] DEBUG io.github.longfish801 - block call: block#項目
10:31:54.569 [main] DEBUG io.github.longfish801 - para call
10:31:54.620 [main] DEBUG io.github.longfish801 - line call
10:31:54.669 [main] DEBUG io.github.longfish801 - text call: 文範囲開始タグ
10:31:54.720 [main] DEBUG io.github.longfish801 - block call: block#項目
10:31:54.769 [main] DEBUG io.github.longfish801 - para call
10:31:54.819 [main] DEBUG io.github.longfish801 - line call
10:31:54.867 [main] DEBUG io.github.longfish801 - text call: 行タグ
10:31:54.920 [main] DEBUG io.github.longfish801 - block call: block#項目
10:31:54.969 [main] DEBUG io.github.longfish801 - para call
10:31:55.030 [main] DEBUG io.github.longfish801 - line call
10:31:55.083 [main] DEBUG io.github.longfish801 - text call: 行範囲開始タグ
10:31:55.130 [main] DEBUG io.github.longfish801 - block call: block#項目
10:31:55.179 [main] DEBUG io.github.longfish801 - para call
10:31:55.227 [main] DEBUG io.github.longfish801 - line call
10:31:55.277 [main] DEBUG io.github.longfish801 - text call: 含意タグ
10:31:55.329 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:31:55.378 [main] DEBUG io.github.longfish801 - para call
10:31:55.422 [main] DEBUG io.github.longfish801 - line call
10:31:55.472 [main] DEBUG io.github.longfish801 - text call: 文中タグ
10:31:55.521 [main] DEBUG io.github.longfish801 - para call
10:31:55.584 [main] DEBUG io.github.longfish801 - line call
10:31:55.629 [main] DEBUG io.github.longfish801 - text call: 　左隅付き括弧（【）と右隅付き括弧（】）でタグ名を挟みます。
10:31:55.682 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:31:55.728 [main] DEBUG io.github.longfish801 - para call
10:31:55.771 [main] DEBUG io.github.longfish801 - line call
10:31:55.826 [main] DEBUG io.github.longfish801 - text call: 例）
10:31:55.868 [main] DEBUG io.github.longfish801 - line call
10:31:55.920 [main] DEBUG io.github.longfish801 - text call: 美しい【ルビ：薔薇：ばら】が咲いていた。
10:31:55.971 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:31:56.023 [main] DEBUG io.github.longfish801 - para call
10:31:56.070 [main] DEBUG io.github.longfish801 - line call
10:31:56.133 [main] DEBUG io.github.longfish801 - text call: 文範囲タグ
10:31:56.178 [main] DEBUG io.github.longfish801 - para call
10:31:56.225 [main] DEBUG io.github.longfish801 - line call
10:31:56.274 [main] DEBUG io.github.longfish801 - text call: 　文範囲開始タグと文範囲終了タグから成ります。
10:31:56.316 [main] DEBUG io.github.longfish801 - para call
10:31:56.362 [main] DEBUG io.github.longfish801 - line call
10:31:56.410 [main] DEBUG io.github.longfish801 - text call: 　文範囲開始タグは左隅付き括弧＋全角パイプ（【｜）と右隅付き括弧（】）でタグ名を挟みます。
10:31:56.459 [main] DEBUG io.github.longfish801 - line call
10:31:56.508 [main] DEBUG io.github.longfish801 - text call: 　文範囲終了タグは左隅付き括弧（【）と全角パイプ＋右隅付き括弧（｜】）でタグ名を挟みます。
10:31:56.552 [main] DEBUG io.github.longfish801 - para call
10:31:56.600 [main] DEBUG io.github.longfish801 - line call
10:31:56.659 [main] DEBUG io.github.longfish801 - text call: 　文範囲開始タグと文範囲終了タグは、タグ名が同じである必要があります。
10:31:56.704 [main] DEBUG io.github.longfish801 - line call
10:31:56.757 [main] DEBUG io.github.longfish801 - text call: 　文範囲開始タグと文範囲終了タグの間に、改行を含むことはできません。
10:31:56.803 [main] DEBUG io.github.longfish801 - line call
10:31:56.849 [main] DEBUG io.github.longfish801 - text call: 　文範囲タグ同士で階層構造を作ることができます。
10:31:56.901 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:31:56.949 [main] DEBUG io.github.longfish801 - para call
10:31:56.996 [main] DEBUG io.github.longfish801 - line call
10:31:57.048 [main] DEBUG io.github.longfish801 - text call: 例）
10:31:57.094 [main] DEBUG io.github.longfish801 - line call
10:31:57.154 [main] DEBUG io.github.longfish801 - text call: 今日は【｜強調】重要【強調｜】な日だ。
10:31:57.208 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:31:57.257 [main] DEBUG io.github.longfish801 - para call
10:31:57.303 [main] DEBUG io.github.longfish801 - line call
10:31:57.350 [main] DEBUG io.github.longfish801 - text call: 行タグ
10:31:57.401 [main] DEBUG io.github.longfish801 - para call
10:31:57.447 [main] DEBUG io.github.longfish801 - line call
10:31:57.498 [main] DEBUG io.github.longfish801 - text call: 　行タグは、左隅付き括弧＋全角イコール（【＝）と右隅付き括弧（】）でタグ名を挟みます。
10:31:57.539 [main] DEBUG io.github.longfish801 - line call
10:31:57.593 [main] DEBUG io.github.longfish801 - text call: 　行タグに続けて文を続けることができます。省略も可能です。
10:31:57.637 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:31:57.699 [main] DEBUG io.github.longfish801 - para call
10:31:57.743 [main] DEBUG io.github.longfish801 - line call
10:31:57.791 [main] DEBUG io.github.longfish801 - text call: 【＝見出し】はじめに
10:31:57.844 [main] DEBUG io.github.longfish801 - para call
10:31:57.889 [main] DEBUG io.github.longfish801 - line call
10:31:57.940 [main] DEBUG io.github.longfish801 - text call: 【＝書影：999-1234567890】
10:31:57.990 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:31:58.039 [main] DEBUG io.github.longfish801 - para call
10:31:58.086 [main] DEBUG io.github.longfish801 - line call
10:31:58.137 [main] DEBUG io.github.longfish801 - text call: 行範囲タグ
10:31:58.182 [main] DEBUG io.github.longfish801 - para call
10:31:58.238 [main] DEBUG io.github.longfish801 - line call
10:31:58.291 [main] DEBUG io.github.longfish801 - text call: 　行範囲開始タグと行範囲終了タグから成ります。
10:31:58.330 [main] DEBUG io.github.longfish801 - para call
10:31:58.382 [main] DEBUG io.github.longfish801 - line call
10:31:58.432 [main] DEBUG io.github.longfish801 - text call: 　行範囲開始タグは左隅付き括弧＋全角ハイフン（【－）と右隅付き括弧（】）でタグ名を挟みます。
10:31:58.477 [main] DEBUG io.github.longfish801 - line call
10:31:58.526 [main] DEBUG io.github.longfish801 - text call: 　行範囲終了タグは左隅付き括弧（【）と全角ハイフン＋右隅付き括弧（－】）でタグ名を挟みます。
10:31:58.570 [main] DEBUG io.github.longfish801 - para call
10:31:58.618 [main] DEBUG io.github.longfish801 - line call
10:31:58.666 [main] DEBUG io.github.longfish801 - text call: 　行範囲開始タグと行範囲終了タグは、タグ名が同じである必要があります。
10:31:58.709 [main] DEBUG io.github.longfish801 - line call
10:31:58.772 [main] DEBUG io.github.longfish801 - text call: 　行範囲開始タグ、行範囲終了タグはそれぞれ一行で記述します。文中に記述することはできません。
10:31:58.818 [main] DEBUG io.github.longfish801 - line call
10:31:58.868 [main] DEBUG io.github.longfish801 - text call: 　あるいは一行で行範囲開始タグと行範囲終了タグ、およびその内容を記述することもできます。
10:31:58.908 [main] DEBUG io.github.longfish801 - line call
10:31:58.958 [main] DEBUG io.github.longfish801 - text call: 　行範囲タグ同士で階層構造を作ることができます。
10:31:59.008 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:31:59.058 [main] DEBUG io.github.longfish801 - para call
10:31:59.097 [main] DEBUG io.github.longfish801 - line call
10:31:59.157 [main] DEBUG io.github.longfish801 - text call: 例）
10:31:59.202 [main] DEBUG io.github.longfish801 - line call
10:31:59.267 [main] DEBUG io.github.longfish801 - text call: 【－囲み記事】
10:31:59.311 [main] DEBUG io.github.longfish801 - line call
10:31:59.362 [main] DEBUG io.github.longfish801 - text call: 富士山麓にオウム鳴く。
10:31:59.409 [main] DEBUG io.github.longfish801 - line call
10:31:59.460 [main] DEBUG io.github.longfish801 - text call: 【囲み記事－】
10:31:59.509 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:31:59.588 [main] DEBUG io.github.longfish801 - para call
10:31:59.628 [main] DEBUG io.github.longfish801 - line call
10:31:59.678 [main] DEBUG io.github.longfish801 - text call: 含意タグ
10:31:59.731 [main] DEBUG io.github.longfish801 - para call
10:31:59.777 [main] DEBUG io.github.longfish801 - line call
10:31:59.840 [main] DEBUG io.github.longfish801 - text call: 　含意タグは、左隅付き括弧＋全角シャープ（【＃）と右隅付き括弧（】）でタグ名を挟みます。
10:31:59.880 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:31:59.931 [main] DEBUG io.github.longfish801 - para call
10:31:59.981 [main] DEBUG io.github.longfish801 - line call
10:32:00.032 [main] DEBUG io.github.longfish801 - text call: 例）
10:32:00.081 [main] DEBUG io.github.longfish801 - line call
10:32:00.129 [main] DEBUG io.github.longfish801 - text call: 【＃コメント】ここから重要
10:32:00.184 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:32:00.230 [main] DEBUG io.github.longfish801 - para call
10:32:00.279 [main] DEBUG io.github.longfish801 - line call
10:32:00.324 [main] DEBUG io.github.longfish801 - text call: 含意範囲タグ
10:32:00.389 [main] DEBUG io.github.longfish801 - para call
10:32:00.430 [main] DEBUG io.github.longfish801 - line call
10:32:00.484 [main] DEBUG io.github.longfish801 - text call: 　含意タグは、左隅付き括弧＋全角アスタリスク（【＊）と右隅付き括弧（】）でタグ名を挟みます。
10:32:00.530 [main] DEBUG io.github.longfish801 - para call
10:32:00.577 [main] DEBUG io.github.longfish801 - line call
10:32:00.627 [main] DEBUG io.github.longfish801 - text call: 　含意範囲開始タグと含意範囲終了タグから成ります。
10:32:00.670 [main] DEBUG io.github.longfish801 - para call
10:32:00.720 [main] DEBUG io.github.longfish801 - line call
10:32:00.771 [main] DEBUG io.github.longfish801 - text call: 　含意範囲開始タグは左隅付き括弧＋全角ハイフン（【＊）と右隅付き括弧（】）でタグ名を挟みます。
10:32:00.816 [main] DEBUG io.github.longfish801 - line call
10:32:00.867 [main] DEBUG io.github.longfish801 - text call: 　含意範囲終了タグは左隅付き括弧（【）と全角ハイフン＋右隅付き括弧（＊】）でタグ名を挟みます。
10:32:00.922 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:32:00.972 [main] DEBUG io.github.longfish801 - para call
10:32:01.019 [main] DEBUG io.github.longfish801 - line call
10:32:01.071 [main] DEBUG io.github.longfish801 - text call: 例）
10:32:01.116 [main] DEBUG io.github.longfish801 - line call
10:32:01.167 [main] DEBUG io.github.longfish801 - text call: 【＊註記】
10:32:01.213 [main] DEBUG io.github.longfish801 - line call
10:32:01.264 [main] DEBUG io.github.longfish801 - text call: 　正確には、そのような事実があったか確かめられていない。
10:32:01.310 [main] DEBUG io.github.longfish801 - line call
10:32:01.361 [main] DEBUG io.github.longfish801 - text call: 【註記＊】
10:32:01.422 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:32:01.472 [main] DEBUG io.github.longfish801 - para call
10:32:01.519 [main] DEBUG io.github.longfish801 - line call
10:32:01.572 [main] DEBUG io.github.longfish801 - text call: エスケープと使用可能文字
10:32:01.617 [main] DEBUG io.github.longfish801 - para call
10:32:01.662 [main] DEBUG io.github.longfish801 - line call
10:32:01.710 [main] DEBUG io.github.longfish801 - text call: 　エスケープするときは直前に全角円記号（￥）を付与してください。
10:32:01.758 [main] DEBUG io.github.longfish801 - para call
10:32:01.804 [main] DEBUG io.github.longfish801 - line call
10:32:01.855 [main] DEBUG io.github.longfish801 - text call: 　タグの外では、以下をエスケープしてください。
10:32:01.901 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:32:01.958 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:02.008 [main] DEBUG io.github.longfish801 - para call
10:32:02.051 [main] DEBUG io.github.longfish801 - line call
10:32:02.108 [main] DEBUG io.github.longfish801 - text call: 左隅付き括弧（【）
10:32:02.152 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:02.203 [main] DEBUG io.github.longfish801 - para call
10:32:02.252 [main] DEBUG io.github.longfish801 - line call
10:32:02.305 [main] DEBUG io.github.longfish801 - text call: 右隅付き括弧（】）
10:32:02.349 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:02.400 [main] DEBUG io.github.longfish801 - para call
10:32:02.448 [main] DEBUG io.github.longfish801 - line call
10:32:02.508 [main] DEBUG io.github.longfish801 - text call: 全角円記号（￥）
10:32:02.558 [main] DEBUG io.github.longfish801 - para call
10:32:02.604 [main] DEBUG io.github.longfish801 - line call
10:32:02.652 [main] DEBUG io.github.longfish801 - text call: 　属性値では、以下をエスケープしてください。
10:32:02.699 [main] DEBUG io.github.longfish801 - line call
10:32:02.748 [main] DEBUG io.github.longfish801 - text call: 　属性値には、改行コードを使用できません。
10:32:02.794 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:32:02.841 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:02.891 [main] DEBUG io.github.longfish801 - para call
10:32:02.940 [main] DEBUG io.github.longfish801 - line call
10:32:03.003 [main] DEBUG io.github.longfish801 - text call: 左隅付き括弧（【）
10:32:03.051 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:03.100 [main] DEBUG io.github.longfish801 - para call
10:32:03.147 [main] DEBUG io.github.longfish801 - line call
10:32:03.200 [main] DEBUG io.github.longfish801 - text call: 右隅付き括弧（】）
10:32:03.241 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:03.294 [main] DEBUG io.github.longfish801 - para call
10:32:03.339 [main] DEBUG io.github.longfish801 - line call
10:32:03.395 [main] DEBUG io.github.longfish801 - text call: 全角コロン（：）
10:32:03.440 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:03.490 [main] DEBUG io.github.longfish801 - para call
10:32:03.557 [main] DEBUG io.github.longfish801 - line call
10:32:03.609 [main] DEBUG io.github.longfish801 - text call: 全角円記号（￥）
10:32:03.658 [main] DEBUG io.github.longfish801 - para call
10:32:03.703 [main] DEBUG io.github.longfish801 - line call
10:32:03.751 [main] DEBUG io.github.longfish801 - text call: 　タグ名には、以下の文字を使用できません。
10:32:03.799 [main] DEBUG io.github.longfish801 - line call
10:32:03.849 [main] DEBUG io.github.longfish801 - text call: 　エスケープして使うこともできません。
10:32:03.896 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:32:03.940 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:03.992 [main] DEBUG io.github.longfish801 - para call
10:32:04.041 [main] DEBUG io.github.longfish801 - line call
10:32:04.103 [main] DEBUG io.github.longfish801 - text call: 改行コード
10:32:04.151 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:04.202 [main] DEBUG io.github.longfish801 - para call
10:32:04.247 [main] DEBUG io.github.longfish801 - line call
10:32:04.299 [main] DEBUG io.github.longfish801 - text call: 全角円記号（￥）
10:32:04.349 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:04.396 [main] DEBUG io.github.longfish801 - para call
10:32:04.440 [main] DEBUG io.github.longfish801 - line call
10:32:04.497 [main] DEBUG io.github.longfish801 - text call: 全角コロン（：）
10:32:04.544 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:04.603 [main] DEBUG io.github.longfish801 - para call
10:32:04.651 [main] DEBUG io.github.longfish801 - line call
10:32:04.708 [main] DEBUG io.github.longfish801 - text call: 左隅付き括弧（【）
10:32:04.751 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:04.800 [main] DEBUG io.github.longfish801 - para call
10:32:04.850 [main] DEBUG io.github.longfish801 - line call
10:32:04.901 [main] DEBUG io.github.longfish801 - text call: 右隅付き括弧（】）
10:32:04.951 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:05.001 [main] DEBUG io.github.longfish801 - para call
10:32:05.049 [main] DEBUG io.github.longfish801 - line call
10:32:05.102 [main] DEBUG io.github.longfish801 - text call: 全角イコール（＝）
10:32:05.157 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:05.208 [main] DEBUG io.github.longfish801 - para call
10:32:05.251 [main] DEBUG io.github.longfish801 - line call
10:32:05.308 [main] DEBUG io.github.longfish801 - text call: 全角ハイフン（－）
10:32:05.357 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:05.403 [main] DEBUG io.github.longfish801 - para call
10:32:05.454 [main] DEBUG io.github.longfish801 - line call
10:32:05.507 [main] DEBUG io.github.longfish801 - text call: 全角パイプ（｜）
10:32:05.550 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:05.604 [main] DEBUG io.github.longfish801 - para call
10:32:05.664 [main] DEBUG io.github.longfish801 - line call
10:32:05.717 [main] DEBUG io.github.longfish801 - text call: 全角シャープ（＃）
10:32:05.760 [main] DEBUG io.github.longfish801 - block call: block#項目
10:32:05.810 [main] DEBUG io.github.longfish801 - para call
10:32:05.861 [main] DEBUG io.github.longfish801 - line call
10:32:05.911 [main] DEBUG io.github.longfish801 - text call: 全角アスタリスク（＊）
10:32:06.087 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:32:06.134 [main] DEBUG io.github.longfish801 - para call
10:32:06.181 [main] DEBUG io.github.longfish801 - line call
10:32:06.232 [main] DEBUG io.github.longfish801 - text call: XML化
10:32:06.278 [main] DEBUG io.github.longfish801 - para call
10:32:06.320 [main] DEBUG io.github.longfish801 - line call
10:32:06.371 [main] DEBUG io.github.longfish801 - text call: 　以下のタグを用いて XML化します。
10:32:06.418 [main] DEBUG io.github.longfish801 - line call
10:32:06.465 [main] DEBUG io.github.longfish801 - text call: 　XML化には
10:32:06.512 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:32:06.559 [main] DEBUG io.github.longfish801 - text call: BLtxtクラス
10:32:06.617 [main] DEBUG io.github.longfish801 - text call: を利用してください。
10:32:06.660 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:32:06.711 [main] DEBUG io.github.longfish801 - block call: block#対象
10:32:06.759 [main] DEBUG io.github.longfish801 - para call
10:32:06.803 [main] DEBUG io.github.longfish801 - line call
10:32:06.859 [main] DEBUG io.github.longfish801 - text call: blxml
10:32:06.909 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:32:06.958 [main] DEBUG io.github.longfish801 - block call: block#説明
10:32:07.008 [main] DEBUG io.github.longfish801 - para call
10:32:07.058 [main] DEBUG io.github.longfish801 - line call
10:32:07.115 [main] DEBUG io.github.longfish801 - text call: ルートタグ。複数のブロック要素、段落、メタ要素のいずれかから成ります。
10:32:07.162 [main] DEBUG io.github.longfish801 - block call: block#対象
10:32:07.212 [main] DEBUG io.github.longfish801 - para call
10:32:07.261 [main] DEBUG io.github.longfish801 - line call
10:32:07.318 [main] DEBUG io.github.longfish801 - text call: block
10:32:07.362 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:32:07.411 [main] DEBUG io.github.longfish801 - block call: block#説明
10:32:07.461 [main] DEBUG io.github.longfish801 - para call
10:32:07.512 [main] DEBUG io.github.longfish801 - line call
10:32:07.570 [main] DEBUG io.github.longfish801 - text call: ブロック要素。複数の段落、メタ要素、下位ブロック要素から成ります。
10:32:07.618 [main] DEBUG io.github.longfish801 - line call
10:32:07.677 [main] DEBUG io.github.longfish801 - text call: 行タグ、行範囲タグと対応します。
10:32:07.725 [main] DEBUG io.github.longfish801 - block call: block#対象
10:32:07.771 [main] DEBUG io.github.longfish801 - para call
10:32:07.820 [main] DEBUG io.github.longfish801 - line call
10:32:07.870 [main] DEBUG io.github.longfish801 - text call: para
10:32:07.920 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:32:07.971 [main] DEBUG io.github.longfish801 - block call: block#説明
10:32:08.021 [main] DEBUG io.github.longfish801 - para call
10:32:08.072 [main] DEBUG io.github.longfish801 - line call
10:32:08.129 [main] DEBUG io.github.longfish801 - text call: 段落。複数の行から成ります。
10:32:08.180 [main] DEBUG io.github.longfish801 - block call: block#対象
10:32:08.228 [main] DEBUG io.github.longfish801 - para call
10:32:08.271 [main] DEBUG io.github.longfish801 - line call
10:32:08.329 [main] DEBUG io.github.longfish801 - text call: meta
10:32:08.380 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:32:08.428 [main] DEBUG io.github.longfish801 - block call: block#説明
10:32:08.480 [main] DEBUG io.github.longfish801 - para call
10:32:08.531 [main] DEBUG io.github.longfish801 - line call
10:32:08.585 [main] DEBUG io.github.longfish801 - text call: メタ要素。複数の段落、下位ブロック要素から成ります。
10:32:08.629 [main] DEBUG io.github.longfish801 - line call
10:32:08.696 [main] DEBUG io.github.longfish801 - text call: 含意タグ、含意範囲タグと対応します。
10:32:08.742 [main] DEBUG io.github.longfish801 - block call: block#対象
10:32:08.790 [main] DEBUG io.github.longfish801 - para call
10:32:08.838 [main] DEBUG io.github.longfish801 - line call
10:32:08.893 [main] DEBUG io.github.longfish801 - text call: line
10:32:08.938 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:32:08.990 [main] DEBUG io.github.longfish801 - block call: block#説明
10:32:09.037 [main] DEBUG io.github.longfish801 - para call
10:32:09.091 [main] DEBUG io.github.longfish801 - line call
10:32:09.147 [main] DEBUG io.github.longfish801 - text call: 行。複数の平文、インライン要素から成ります。
10:32:09.189 [main] DEBUG io.github.longfish801 - block call: block#対象
10:32:09.248 [main] DEBUG io.github.longfish801 - para call
10:32:09.296 [main] DEBUG io.github.longfish801 - line call
10:32:09.348 [main] DEBUG io.github.longfish801 - text call: inline
10:32:09.398 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:32:09.452 [main] DEBUG io.github.longfish801 - block call: block#説明
10:32:09.507 [main] DEBUG io.github.longfish801 - para call
10:32:09.562 [main] DEBUG io.github.longfish801 - line call
10:32:09.621 [main] DEBUG io.github.longfish801 - text call: インライン要素。複数の平文、下位インライン要素から成ります。
10:32:09.672 [main] DEBUG io.github.longfish801 - line call
10:32:09.725 [main] DEBUG io.github.longfish801 - text call: 文中タグ、文範囲タグと対応します。
10:32:09.782 [main] DEBUG io.github.longfish801 - block call: block#対象
10:32:09.827 [main] DEBUG io.github.longfish801 - para call
10:32:09.883 [main] DEBUG io.github.longfish801 - line call
10:32:09.937 [main] DEBUG io.github.longfish801 - text call: attrs, attr
10:32:09.989 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:32:10.038 [main] DEBUG io.github.longfish801 - block call: block#説明
10:32:10.091 [main] DEBUG io.github.longfish801 - para call
10:32:10.141 [main] DEBUG io.github.longfish801 - line call
10:32:10.199 [main] DEBUG io.github.longfish801 - text call: 属性。
10:32:10.249 [main] DEBUG io.github.longfish801 - line call
10:32:10.312 [main] DEBUG io.github.longfish801 - text call: 各タグの属性と対応します。
10:32:10.358 [main] DEBUG io.github.longfish801 - block call: block#対象
10:32:10.412 [main] DEBUG io.github.longfish801 - para call
10:32:10.458 [main] DEBUG io.github.longfish801 - line call
10:32:10.518 [main] DEBUG io.github.longfish801 - text call: text
10:32:10.561 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:32:10.610 [main] DEBUG io.github.longfish801 - block call: block#説明
10:32:10.660 [main] DEBUG io.github.longfish801 - para call
10:32:10.714 [main] DEBUG io.github.longfish801 - line call
10:32:10.769 [main] DEBUG io.github.longfish801 - text call: 平文。
10:32:10.809 [main] DEBUG io.github.longfish801 - para call
10:32:10.870 [main] DEBUG io.github.longfish801 - line call
10:32:10.921 [main] DEBUG io.github.longfish801 - text call: 　以下の属性を保持します。
10:32:10.966 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:32:11.016 [main] DEBUG io.github.longfish801 - block call: block#対象
10:32:11.064 [main] DEBUG io.github.longfish801 - para call
10:32:11.112 [main] DEBUG io.github.longfish801 - line call
10:32:11.165 [main] DEBUG io.github.longfish801 - text call: tag
10:32:11.214 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:32:11.263 [main] DEBUG io.github.longfish801 - block call: block#説明
10:32:11.313 [main] DEBUG io.github.longfish801 - para call
10:32:11.367 [main] DEBUG io.github.longfish801 - line call
10:32:11.428 [main] DEBUG io.github.longfish801 - text call: タグ名。
10:32:11.481 [main] DEBUG io.github.longfish801 - line call
10:32:11.535 [main] DEBUG io.github.longfish801 - text call: block, para, meta, inlineが保持します。
10:32:11.582 [main] DEBUG io.github.longfish801 - block call: block#対象
10:32:11.630 [main] DEBUG io.github.longfish801 - para call
10:32:11.679 [main] DEBUG io.github.longfish801 - line call
10:32:11.731 [main] DEBUG io.github.longfish801 - text call: lnum
10:32:11.782 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:32:11.832 [main] DEBUG io.github.longfish801 - block call: block#説明
10:32:11.884 [main] DEBUG io.github.longfish801 - para call
10:32:11.938 [main] DEBUG io.github.longfish801 - line call
10:32:11.999 [main] DEBUG io.github.longfish801 - text call: BLtxt文書での行番号。
10:32:12.048 [main] DEBUG io.github.longfish801 - line call
10:32:12.103 [main] DEBUG io.github.longfish801 - text call: block, para, meta, inline, lineが保持します。
10:32:12.150 [main] DEBUG io.github.longfish801 - block call: block#対象
10:32:12.199 [main] DEBUG io.github.longfish801 - para call
10:32:12.247 [main] DEBUG io.github.longfish801 - line call
10:32:12.300 [main] DEBUG io.github.longfish801 - text call: snum
10:32:12.351 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:32:12.401 [main] DEBUG io.github.longfish801 - block call: block#説明
10:32:12.458 [main] DEBUG io.github.longfish801 - para call
10:32:12.508 [main] DEBUG io.github.longfish801 - line call
10:32:12.560 [main] DEBUG io.github.longfish801 - text call: 同じタグ、同じタグ名での通番。
10:32:12.616 [main] DEBUG io.github.longfish801 - line call
10:32:12.671 [main] DEBUG io.github.longfish801 - text call: block, para, meta, inlineが保持します。
10:32:12.722 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:32:12.769 [main] DEBUG io.github.longfish801 - para call
10:32:12.817 [main] DEBUG io.github.longfish801 - line call
10:32:12.870 [main] DEBUG io.github.longfish801 - text call: 平文
10:32:12.910 [main] DEBUG io.github.longfish801 - para call
10:32:12.971 [main] DEBUG io.github.longfish801 - line call
10:32:13.021 [main] DEBUG io.github.longfish801 - text call: 　タグの無い行は、一行ごとにlineタグで囲みます。
10:32:13.067 [main] DEBUG io.github.longfish801 - line call
10:32:13.119 [main] DEBUG io.github.longfish801 - text call: 　文字列はすべて textタグで囲みます。
10:32:13.160 [main] DEBUG io.github.longfish801 - para call
10:32:13.210 [main] DEBUG io.github.longfish801 - line call
10:32:13.261 [main] DEBUG io.github.longfish801 - text call: 　一行以上の空行区切りで、段落とみなします。段落をparaタグで囲みます。
10:32:13.307 [main] DEBUG io.github.longfish801 - line call
10:32:13.357 [main] DEBUG io.github.longfish801 - text call: 　空行は、ひとつのみでも、複数でも、すべて段落区切りとみなします。
10:32:13.399 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:32:13.450 [main] DEBUG io.github.longfish801 - para call
10:32:13.509 [main] DEBUG io.github.longfish801 - line call
10:32:13.558 [main] DEBUG io.github.longfish801 - text call: とりなくこえす、
10:32:13.607 [main] DEBUG io.github.longfish801 - line call
10:32:13.658 [main] DEBUG io.github.longfish801 - text call: ゆめさませ。
10:32:13.703 [main] DEBUG io.github.longfish801 - para call
10:32:13.752 [main] DEBUG io.github.longfish801 - line call
10:32:13.804 [main] DEBUG io.github.longfish801 - text call: みよあけわたる、
10:32:13.848 [main] DEBUG io.github.longfish801 - para call
10:32:13.900 [main] DEBUG io.github.longfish801 - line call
10:32:13.950 [main] DEBUG io.github.longfish801 - text call: ひんがしを。
10:32:14.001 [main] DEBUG io.github.longfish801 - block call: block#コード
10:32:14.061 [main] DEBUG io.github.longfish801 - para call
10:32:14.114 [main] DEBUG io.github.longfish801 - line call
10:32:14.171 [main] DEBUG io.github.longfish801 - text call: <?xml version="1.0" encoding="UTF-8"?>
10:32:14.220 [main] DEBUG io.github.longfish801 - line call
10:32:14.273 [main] DEBUG io.github.longfish801 - text call: <bltxt>
10:32:14.320 [main] DEBUG io.github.longfish801 - line call
10:32:14.372 [main] DEBUG io.github.longfish801 - text call:   <para lnum="1" snum="1">
10:32:14.419 [main] DEBUG io.github.longfish801 - line call
10:32:14.470 [main] DEBUG io.github.longfish801 - text call:     <line lnum="1">
10:32:14.520 [main] DEBUG io.github.longfish801 - line call
10:32:14.586 [main] DEBUG io.github.longfish801 - text call:       <text>とりなくこえす、</text>
10:32:14.631 [main] DEBUG io.github.longfish801 - line call
10:32:14.684 [main] DEBUG io.github.longfish801 - text call:     </line>
10:32:14.731 [main] DEBUG io.github.longfish801 - line call
10:32:14.783 [main] DEBUG io.github.longfish801 - text call:     <line lnum="2">
10:32:14.829 [main] DEBUG io.github.longfish801 - line call
10:32:14.887 [main] DEBUG io.github.longfish801 - text call:       <text>ゆめさませ。</text>
10:32:14.928 [main] DEBUG io.github.longfish801 - line call
10:32:14.988 [main] DEBUG io.github.longfish801 - text call:     </line>
10:32:15.041 [main] DEBUG io.github.longfish801 - line call
10:32:15.103 [main] DEBUG io.github.longfish801 - text call:   </para>
10:32:15.167 [main] DEBUG io.github.longfish801 - line call
10:32:15.228 [main] DEBUG io.github.longfish801 - text call:   <para lnum="4" snum="2">
10:32:15.282 [main] DEBUG io.github.longfish801 - line call
10:32:15.348 [main] DEBUG io.github.longfish801 - text call:     <line lnum="4">
10:32:15.397 [main] DEBUG io.github.longfish801 - line call
10:32:15.458 [main] DEBUG io.github.longfish801 - text call:       <text>みよあけわたる、</text>
10:32:15.502 [main] DEBUG io.github.longfish801 - line call
10:32:15.548 [main] DEBUG io.github.longfish801 - text call:     </line>
10:32:15.600 [main] DEBUG io.github.longfish801 - line call
10:32:15.651 [main] DEBUG io.github.longfish801 - text call:   </para>
10:32:15.707 [main] DEBUG io.github.longfish801 - line call
10:32:15.767 [main] DEBUG io.github.longfish801 - text call:   <para lnum="7" snum="3">
10:32:15.820 [main] DEBUG io.github.longfish801 - line call
10:32:15.878 [main] DEBUG io.github.longfish801 - text call:     <line lnum="7">
10:32:15.927 [main] DEBUG io.github.longfish801 - line call
10:32:15.981 [main] DEBUG io.github.longfish801 - text call:       <text>ひんがしを。</text>
10:32:16.030 [main] DEBUG io.github.longfish801 - line call
10:32:16.082 [main] DEBUG io.github.longfish801 - text call:     </line>
10:32:16.132 [main] DEBUG io.github.longfish801 - line call
10:32:16.183 [main] DEBUG io.github.longfish801 - text call:   </para>
10:32:16.231 [main] DEBUG io.github.longfish801 - line call
10:32:16.292 [main] DEBUG io.github.longfish801 - text call: </bltxt>
10:32:16.341 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:32:16.388 [main] DEBUG io.github.longfish801 - para call
10:32:16.437 [main] DEBUG io.github.longfish801 - line call
10:32:16.492 [main] DEBUG io.github.longfish801 - text call: 文中タグ
10:32:16.532 [main] DEBUG io.github.longfish801 - para call
10:32:16.582 [main] DEBUG io.github.longfish801 - line call
10:32:16.631 [main] DEBUG io.github.longfish801 - text call: 　文中タグは、inlineタグに変換します。
10:32:16.678 [main] DEBUG io.github.longfish801 - line call
10:32:16.727 [main] DEBUG io.github.longfish801 - text call: 　属性値はattrs, attrタグとして inlineタグ内の先頭に保持します。
10:32:16.777 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:32:16.828 [main] DEBUG io.github.longfish801 - para call
10:32:16.878 [main] DEBUG io.github.longfish801 - line call
10:32:16.927 [main] DEBUG io.github.longfish801 - text call: 美しい【ルビ：薔薇：ばら】が咲いていた。
10:32:16.976 [main] DEBUG io.github.longfish801 - block call: block#コード
10:32:17.027 [main] DEBUG io.github.longfish801 - para call
10:32:17.081 [main] DEBUG io.github.longfish801 - line call
10:32:17.136 [main] DEBUG io.github.longfish801 - text call: <?xml version="1.0" encoding="UTF-8"?>
10:32:17.187 [main] DEBUG io.github.longfish801 - line call
10:32:17.241 [main] DEBUG io.github.longfish801 - text call: <bltxt>
10:32:17.289 [main] DEBUG io.github.longfish801 - line call
10:32:17.357 [main] DEBUG io.github.longfish801 - text call:   <para lnum="1" snum="1">
10:32:17.405 [main] DEBUG io.github.longfish801 - line call
10:32:17.459 [main] DEBUG io.github.longfish801 - text call:     <line lnum="1">
10:32:17.508 [main] DEBUG io.github.longfish801 - line call
10:32:17.562 [main] DEBUG io.github.longfish801 - text call:       <text>美しい</text>
10:32:17.611 [main] DEBUG io.github.longfish801 - line call
10:32:17.664 [main] DEBUG io.github.longfish801 - text call:       <inline tag="ルビ" lnum="1" snum="1">
10:32:17.712 [main] DEBUG io.github.longfish801 - line call
10:32:17.766 [main] DEBUG io.github.longfish801 - text call:         <attrs>
10:32:17.815 [main] DEBUG io.github.longfish801 - line call
10:32:17.880 [main] DEBUG io.github.longfish801 - text call:           <attr>薔薇</attr>
10:32:17.929 [main] DEBUG io.github.longfish801 - line call
10:32:17.982 [main] DEBUG io.github.longfish801 - text call:           <attr>ばら</attr>
10:32:18.030 [main] DEBUG io.github.longfish801 - line call
10:32:18.085 [main] DEBUG io.github.longfish801 - text call:         </attrs>
10:32:18.133 [main] DEBUG io.github.longfish801 - line call
10:32:18.188 [main] DEBUG io.github.longfish801 - text call:       </inline>
10:32:18.236 [main] DEBUG io.github.longfish801 - line call
10:32:18.291 [main] DEBUG io.github.longfish801 - text call:       <text>が咲いていた。</text>
10:32:18.340 [main] DEBUG io.github.longfish801 - line call
10:32:18.394 [main] DEBUG io.github.longfish801 - text call:     </line>
10:32:18.451 [main] DEBUG io.github.longfish801 - line call
10:32:18.503 [main] DEBUG io.github.longfish801 - text call:   </para>
10:32:18.549 [main] DEBUG io.github.longfish801 - line call
10:32:18.599 [main] DEBUG io.github.longfish801 - text call: </bltxt>
10:32:18.658 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:32:18.707 [main] DEBUG io.github.longfish801 - para call
10:32:18.756 [main] DEBUG io.github.longfish801 - line call
10:32:18.839 [main] DEBUG io.github.longfish801 - text call: 文範囲タグ
10:32:18.907 [main] DEBUG io.github.longfish801 - para call
10:32:18.969 [main] DEBUG io.github.longfish801 - line call
10:32:19.046 [main] DEBUG io.github.longfish801 - text call: 　文範囲タグも、inlineタグに変換します。
10:32:19.097 [main] DEBUG io.github.longfish801 - line call
10:32:19.153 [main] DEBUG io.github.longfish801 - text call: 　開始タグと終了タグに囲まれた範囲は、textタグで囲みます。
10:32:19.214 [main] DEBUG io.github.longfish801 - line call
10:32:19.268 [main] DEBUG io.github.longfish801 - text call: 　文範囲タグを入れ語にした場合、下位の inlineタグや textタグを保持します。
10:32:19.318 [main] DEBUG io.github.longfish801 - line call
10:32:19.379 [main] DEBUG io.github.longfish801 - text call: 　これにより、階層構造を作ることができます。
10:32:19.433 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:32:19.487 [main] DEBUG io.github.longfish801 - para call
10:32:19.541 [main] DEBUG io.github.longfish801 - line call
10:32:19.608 [main] DEBUG io.github.longfish801 - text call: ここが【｜傍点】重要【傍点｜】です。
10:32:19.684 [main] DEBUG io.github.longfish801 - line call
10:32:19.744 [main] DEBUG io.github.longfish801 - text call: 【｜強調】とても【｜ルビ：インポータント】重要【ルビ｜】ですよ。【強調｜】
10:32:19.819 [main] DEBUG io.github.longfish801 - block call: block#コード
10:32:19.909 [main] DEBUG io.github.longfish801 - para call
10:32:19.966 [main] DEBUG io.github.longfish801 - line call
10:32:20.021 [main] DEBUG io.github.longfish801 - text call: <?xml version="1.0" encoding="UTF-8"?>
10:32:20.077 [main] DEBUG io.github.longfish801 - line call
10:32:20.142 [main] DEBUG io.github.longfish801 - text call: <bltxt>
10:32:20.201 [main] DEBUG io.github.longfish801 - line call
10:32:20.259 [main] DEBUG io.github.longfish801 - text call:   <para lnum="2" snum="1">
10:32:20.319 [main] DEBUG io.github.longfish801 - line call
10:32:20.392 [main] DEBUG io.github.longfish801 - text call:     <line lnum="2">
10:32:20.444 [main] DEBUG io.github.longfish801 - line call
10:32:20.501 [main] DEBUG io.github.longfish801 - text call:       <text>ここが</text>
10:32:20.552 [main] DEBUG io.github.longfish801 - line call
10:32:20.604 [main] DEBUG io.github.longfish801 - text call:       <inline tag="傍点" lnum="2" snum="1">
10:32:20.651 [main] DEBUG io.github.longfish801 - line call
10:32:20.700 [main] DEBUG io.github.longfish801 - text call:         <text>重要</text>
10:32:20.749 [main] DEBUG io.github.longfish801 - line call
10:32:20.805 [main] DEBUG io.github.longfish801 - text call:       </inline>
10:32:20.856 [main] DEBUG io.github.longfish801 - line call
10:32:20.920 [main] DEBUG io.github.longfish801 - text call:       <text>です。</text>
10:32:20.966 [main] DEBUG io.github.longfish801 - line call
10:32:21.019 [main] DEBUG io.github.longfish801 - text call:     </line>
10:32:21.066 [main] DEBUG io.github.longfish801 - line call
10:32:21.122 [main] DEBUG io.github.longfish801 - text call:     <line lnum="3">
10:32:21.171 [main] DEBUG io.github.longfish801 - line call
10:32:21.223 [main] DEBUG io.github.longfish801 - text call:       <inline tag="強調" lnum="3" snum="1">
10:32:21.270 [main] DEBUG io.github.longfish801 - line call
10:32:21.315 [main] DEBUG io.github.longfish801 - text call:         <text>とても</text>
10:32:21.368 [main] DEBUG io.github.longfish801 - line call
10:32:21.419 [main] DEBUG io.github.longfish801 - text call:         <inline tag="ルビ" lnum="3" snum="1">
10:32:21.478 [main] DEBUG io.github.longfish801 - line call
10:32:21.532 [main] DEBUG io.github.longfish801 - text call:           <attrs>
10:32:21.579 [main] DEBUG io.github.longfish801 - line call
10:32:21.628 [main] DEBUG io.github.longfish801 - text call:             <attr>インポータント</attr>
10:32:21.680 [main] DEBUG io.github.longfish801 - line call
10:32:21.730 [main] DEBUG io.github.longfish801 - text call:           </attrs>
10:32:21.782 [main] DEBUG io.github.longfish801 - line call
10:32:21.834 [main] DEBUG io.github.longfish801 - text call:           <text>重要</text>
10:32:21.883 [main] DEBUG io.github.longfish801 - line call
10:32:21.937 [main] DEBUG io.github.longfish801 - text call:         </inline>
10:32:21.997 [main] DEBUG io.github.longfish801 - line call
10:32:22.044 [main] DEBUG io.github.longfish801 - text call:         <text>ですよ。</text>
10:32:22.098 [main] DEBUG io.github.longfish801 - line call
10:32:22.150 [main] DEBUG io.github.longfish801 - text call:       </inline>
10:32:22.201 [main] DEBUG io.github.longfish801 - line call
10:32:22.247 [main] DEBUG io.github.longfish801 - text call:     </line>
10:32:22.301 [main] DEBUG io.github.longfish801 - line call
10:32:22.347 [main] DEBUG io.github.longfish801 - text call:   </para>
10:32:22.399 [main] DEBUG io.github.longfish801 - line call
10:32:22.450 [main] DEBUG io.github.longfish801 - text call: </bltxt>
10:32:22.505 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:32:22.587 [main] DEBUG io.github.longfish801 - para call
10:32:22.641 [main] DEBUG io.github.longfish801 - line call
10:32:22.687 [main] DEBUG io.github.longfish801 - text call: 行タグ
10:32:22.737 [main] DEBUG io.github.longfish801 - para call
10:32:22.788 [main] DEBUG io.github.longfish801 - line call
10:32:22.837 [main] DEBUG io.github.longfish801 - text call: 　行タグは blockタグに変換します。
10:32:22.878 [main] DEBUG io.github.longfish801 - line call
10:32:22.928 [main] DEBUG io.github.longfish801 - text call: 　行タグの前後は、空行の有無にかかわらず段落区切りとみなします。
10:32:22.981 [main] DEBUG io.github.longfish801 - line call
10:32:23.032 [main] DEBUG io.github.longfish801 - text call: 　行タグ同士で階層構造を作ることはできません。
10:32:23.088 [main] DEBUG io.github.longfish801 - line call
10:32:23.141 [main] DEBUG io.github.longfish801 - text call: 　ただし後述する行範囲タグの下位とすることはできます。
10:32:23.191 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:32:23.238 [main] DEBUG io.github.longfish801 - para call
10:32:23.288 [main] DEBUG io.github.longfish801 - line call
10:32:23.340 [main] DEBUG io.github.longfish801 - text call: 【＝見出し】トランプの遊び方
10:32:23.388 [main] DEBUG io.github.longfish801 - para call
10:32:23.434 [main] DEBUG io.github.longfish801 - line call
10:32:23.489 [main] DEBUG io.github.longfish801 - text call: 以下の画像を参照してください。
10:32:23.529 [main] DEBUG io.github.longfish801 - line call
10:32:23.584 [main] DEBUG io.github.longfish801 - text call: 【＝画像：howto.jpg】
10:32:23.639 [main] DEBUG io.github.longfish801 - block call: block#コード
10:32:23.687 [main] DEBUG io.github.longfish801 - para call
10:32:23.737 [main] DEBUG io.github.longfish801 - line call
10:32:23.788 [main] DEBUG io.github.longfish801 - text call: <?xml version="1.0" encoding="UTF-8"?>
10:32:23.836 [main] DEBUG io.github.longfish801 - line call
10:32:23.892 [main] DEBUG io.github.longfish801 - text call: <bltxt>
10:32:23.937 [main] DEBUG io.github.longfish801 - line call
10:32:23.989 [main] DEBUG io.github.longfish801 - text call:   <block tag="見出し" lnum="1" snum="1">
10:32:24.038 [main] DEBUG io.github.longfish801 - line call
10:32:24.091 [main] DEBUG io.github.longfish801 - text call:     <para lnum="1" snum="1">
10:32:24.137 [main] DEBUG io.github.longfish801 - line call
10:32:24.198 [main] DEBUG io.github.longfish801 - text call:       <line lnum="1">
10:32:24.247 [main] DEBUG io.github.longfish801 - line call
10:32:24.298 [main] DEBUG io.github.longfish801 - text call:         <text>トランプの遊び方</text>
10:32:24.347 [main] DEBUG io.github.longfish801 - line call
10:32:24.399 [main] DEBUG io.github.longfish801 - text call:       </line>
10:32:24.443 [main] DEBUG io.github.longfish801 - line call
10:32:24.498 [main] DEBUG io.github.longfish801 - text call:     </para>
10:32:24.544 [main] DEBUG io.github.longfish801 - line call
10:32:24.597 [main] DEBUG io.github.longfish801 - text call:   </block>
10:32:24.644 [main] DEBUG io.github.longfish801 - line call
10:32:24.707 [main] DEBUG io.github.longfish801 - text call:   <para lnum="3" snum="2">
10:32:24.748 [main] DEBUG io.github.longfish801 - line call
10:32:24.799 [main] DEBUG io.github.longfish801 - text call:     <line lnum="3">
10:32:24.847 [main] DEBUG io.github.longfish801 - line call
10:32:24.902 [main] DEBUG io.github.longfish801 - text call:       <text>以下の画像を参照してください。</text>
10:32:24.952 [main] DEBUG io.github.longfish801 - line call
10:32:24.997 [main] DEBUG io.github.longfish801 - text call:     </line>
10:32:25.047 [main] DEBUG io.github.longfish801 - line call
10:32:25.102 [main] DEBUG io.github.longfish801 - text call:   </para>
10:32:25.147 [main] DEBUG io.github.longfish801 - line call
10:32:25.209 [main] DEBUG io.github.longfish801 - text call:   <block tag="画像" lnum="4" snum="1">
10:32:25.260 [main] DEBUG io.github.longfish801 - line call
10:32:25.317 [main] DEBUG io.github.longfish801 - text call:     <attrs>
10:32:25.368 [main] DEBUG io.github.longfish801 - line call
10:32:25.419 [main] DEBUG io.github.longfish801 - text call:       <attr>howto.jpg</attr>
10:32:25.468 [main] DEBUG io.github.longfish801 - line call
10:32:25.519 [main] DEBUG io.github.longfish801 - text call:     </attrs>
10:32:25.569 [main] DEBUG io.github.longfish801 - line call
10:32:25.620 [main] DEBUG io.github.longfish801 - text call:   </block>
10:32:25.672 [main] DEBUG io.github.longfish801 - line call
10:32:25.730 [main] DEBUG io.github.longfish801 - text call: </bltxt>
10:32:25.799 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:32:25.852 [main] DEBUG io.github.longfish801 - para call
10:32:25.902 [main] DEBUG io.github.longfish801 - line call
10:32:25.957 [main] DEBUG io.github.longfish801 - text call: 行範囲タグ
10:32:26.004 [main] DEBUG io.github.longfish801 - para call
10:32:26.053 [main] DEBUG io.github.longfish801 - line call
10:32:26.104 [main] DEBUG io.github.longfish801 - text call: 　行範囲タグも blockタグに変換します。
10:32:26.151 [main] DEBUG io.github.longfish801 - line call
10:32:26.202 [main] DEBUG io.github.longfish801 - text call: 　開始タグ、終了タグの前後は、空行の有無にかかわらず段落区切りとみなします。
10:32:26.249 [main] DEBUG io.github.longfish801 - line call
10:32:26.300 [main] DEBUG io.github.longfish801 - text call: 　行範囲タグを入れ子にすることで、階層構造を作ることができます。
10:32:26.371 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:32:26.421 [main] DEBUG io.github.longfish801 - para call
10:32:26.467 [main] DEBUG io.github.longfish801 - line call
10:32:26.523 [main] DEBUG io.github.longfish801 - text call: 以下の記事を参照してください。
10:32:26.570 [main] DEBUG io.github.longfish801 - para call
10:32:26.619 [main] DEBUG io.github.longfish801 - line call
10:32:26.672 [main] DEBUG io.github.longfish801 - text call: 【－囲み記事】
10:32:26.719 [main] DEBUG io.github.longfish801 - line call
10:32:26.791 [main] DEBUG io.github.longfish801 - text call: リンカーンは次の言葉を残した。
10:32:26.838 [main] DEBUG io.github.longfish801 - line call
10:32:26.900 [main] DEBUG io.github.longfish801 - text call: 【－引用：『リンカーン語録』】
10:32:26.971 [main] DEBUG io.github.longfish801 - line call
10:32:27.027 [main] DEBUG io.github.longfish801 - text call: 人民の、
10:32:27.072 [main] DEBUG io.github.longfish801 - line call
10:32:27.128 [main] DEBUG io.github.longfish801 - text call: 人民による、
10:32:27.170 [main] DEBUG io.github.longfish801 - para call
10:32:27.219 [main] DEBUG io.github.longfish801 - line call
10:32:27.269 [main] DEBUG io.github.longfish801 - text call: 人民のための政治。
10:32:27.320 [main] DEBUG io.github.longfish801 - line call
10:32:27.371 [main] DEBUG io.github.longfish801 - text call: 【引用－】
10:32:27.421 [main] DEBUG io.github.longfish801 - line call
10:32:27.481 [main] DEBUG io.github.longfish801 - text call: 【囲み記事－】
10:32:27.527 [main] DEBUG io.github.longfish801 - block call: block#コード
10:32:27.578 [main] DEBUG io.github.longfish801 - para call
10:32:27.628 [main] DEBUG io.github.longfish801 - line call
10:32:27.678 [main] DEBUG io.github.longfish801 - text call: <?xml version="1.0" encoding="UTF-8"?>
10:32:27.729 [main] DEBUG io.github.longfish801 - line call
10:32:27.778 [main] DEBUG io.github.longfish801 - text call: <bltxt>
10:32:27.830 [main] DEBUG io.github.longfish801 - line call
10:32:27.885 [main] DEBUG io.github.longfish801 - text call:   <para lnum="1" snum="1">
10:32:27.934 [main] DEBUG io.github.longfish801 - line call
10:32:28.004 [main] DEBUG io.github.longfish801 - text call:     <line lnum="1">
10:32:28.053 [main] DEBUG io.github.longfish801 - line call
10:32:28.109 [main] DEBUG io.github.longfish801 - text call:       <text>以下の記事を参照してください。</text>
10:32:28.159 [main] DEBUG io.github.longfish801 - line call
10:32:28.214 [main] DEBUG io.github.longfish801 - text call:     </line>
10:32:28.263 [main] DEBUG io.github.longfish801 - line call
10:32:28.316 [main] DEBUG io.github.longfish801 - text call:   </para>
10:32:28.359 [main] DEBUG io.github.longfish801 - line call
10:32:28.416 [main] DEBUG io.github.longfish801 - text call:   <block tag="囲み記事" lnum="3" snum="1">
10:32:28.459 [main] DEBUG io.github.longfish801 - line call
10:32:28.517 [main] DEBUG io.github.longfish801 - text call:     <para lnum="3" snum="2">
10:32:28.571 [main] DEBUG io.github.longfish801 - line call
10:32:28.637 [main] DEBUG io.github.longfish801 - text call:       <line lnum="4">
10:32:28.687 [main] DEBUG io.github.longfish801 - line call
10:32:28.738 [main] DEBUG io.github.longfish801 - text call:         <text>リンカーンは次の言葉を残した。</text>
10:32:28.781 [main] DEBUG io.github.longfish801 - line call
10:32:28.838 [main] DEBUG io.github.longfish801 - text call:       </line>
10:32:28.887 [main] DEBUG io.github.longfish801 - line call
10:32:28.938 [main] DEBUG io.github.longfish801 - text call:     </para>
10:32:28.981 [main] DEBUG io.github.longfish801 - line call
10:32:29.039 [main] DEBUG io.github.longfish801 - text call:     <block tag="引用" lnum="5" snum="1">
10:32:29.098 [main] DEBUG io.github.longfish801 - line call
10:32:29.151 [main] DEBUG io.github.longfish801 - text call:       <attrs>
10:32:29.199 [main] DEBUG io.github.longfish801 - line call
10:32:29.249 [main] DEBUG io.github.longfish801 - text call:         <attr>『リンカーン語録』</attr>
10:32:29.297 [main] DEBUG io.github.longfish801 - line call
10:32:29.351 [main] DEBUG io.github.longfish801 - text call:       </attrs>
10:32:29.400 [main] DEBUG io.github.longfish801 - line call
10:32:29.449 [main] DEBUG io.github.longfish801 - text call:       <para lnum="5" snum="3">
10:32:29.504 [main] DEBUG io.github.longfish801 - line call
10:32:29.550 [main] DEBUG io.github.longfish801 - text call:         <line lnum="6">
10:32:29.600 [main] DEBUG io.github.longfish801 - line call
10:32:29.669 [main] DEBUG io.github.longfish801 - text call:           <text>人民の、</text>
10:32:29.718 [main] DEBUG io.github.longfish801 - line call
10:32:29.770 [main] DEBUG io.github.longfish801 - text call:         </line>
10:32:29.820 [main] DEBUG io.github.longfish801 - line call
10:32:29.870 [main] DEBUG io.github.longfish801 - text call:         <line lnum="7">
10:32:29.920 [main] DEBUG io.github.longfish801 - line call
10:32:29.977 [main] DEBUG io.github.longfish801 - text call:           <text>人民による、</text>
10:32:30.028 [main] DEBUG io.github.longfish801 - line call
10:32:30.079 [main] DEBUG io.github.longfish801 - text call:         </line>
10:32:30.130 [main] DEBUG io.github.longfish801 - line call
10:32:30.197 [main] DEBUG io.github.longfish801 - text call:       </para>
10:32:30.245 [main] DEBUG io.github.longfish801 - line call
10:32:30.298 [main] DEBUG io.github.longfish801 - text call:       <para lnum="9" snum="4">
10:32:30.348 [main] DEBUG io.github.longfish801 - line call
10:32:30.398 [main] DEBUG io.github.longfish801 - text call:         <line lnum="9">
10:32:30.451 [main] DEBUG io.github.longfish801 - line call
10:32:30.502 [main] DEBUG io.github.longfish801 - text call:           <text>人民のための政治。</text>
10:32:30.548 [main] DEBUG io.github.longfish801 - line call
10:32:30.599 [main] DEBUG io.github.longfish801 - text call:         </line>
10:32:30.649 [main] DEBUG io.github.longfish801 - line call
10:32:30.700 [main] DEBUG io.github.longfish801 - text call:       </para>
10:32:30.762 [main] DEBUG io.github.longfish801 - line call
10:32:30.818 [main] DEBUG io.github.longfish801 - text call:     </block>
10:32:30.862 [main] DEBUG io.github.longfish801 - line call
10:32:30.917 [main] DEBUG io.github.longfish801 - text call:   </block>
10:32:30.969 [main] DEBUG io.github.longfish801 - line call
10:32:31.021 [main] DEBUG io.github.longfish801 - text call: </bltxt>
10:32:31.074 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:32:31.123 [main] DEBUG io.github.longfish801 - para call
10:32:31.170 [main] DEBUG io.github.longfish801 - line call
10:32:31.223 [main] DEBUG io.github.longfish801 - text call: 含意タグ
10:32:31.282 [main] DEBUG io.github.longfish801 - para call
10:32:31.348 [main] DEBUG io.github.longfish801 - line call
10:32:31.399 [main] DEBUG io.github.longfish801 - text call: 　含意タグは metaタグに変換します。
10:32:31.446 [main] DEBUG io.github.longfish801 - line call
10:32:31.497 [main] DEBUG io.github.longfish801 - text call: 　行範囲タグ内に含意タグがあると、blockタグ内に metaタグを作成します。
10:32:31.540 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:32:31.591 [main] DEBUG io.github.longfish801 - para call
10:32:31.641 [main] DEBUG io.github.longfish801 - line call
10:32:31.688 [main] DEBUG io.github.longfish801 - text call: 【＃タイトル】円周率の暗記
10:32:31.739 [main] DEBUG io.github.longfish801 - line call
10:32:31.790 [main] DEBUG io.github.longfish801 - text call: 【＃著者：山田太郎】
10:32:31.851 [main] DEBUG io.github.longfish801 - para call
10:32:31.902 [main] DEBUG io.github.longfish801 - line call
10:32:31.947 [main] DEBUG io.github.longfish801 - text call: 【＃コメント：ここから囲み記事】
10:32:32.001 [main] DEBUG io.github.longfish801 - line call
10:32:32.047 [main] DEBUG io.github.longfish801 - text call: 【－囲み記事】
10:32:32.097 [main] DEBUG io.github.longfish801 - line call
10:32:32.154 [main] DEBUG io.github.longfish801 - text call: 【＃コメント：3.14159265】
10:32:32.198 [main] DEBUG io.github.longfish801 - line call
10:32:32.255 [main] DEBUG io.github.longfish801 - text call: 産医師異国に向かう。
10:32:32.299 [main] DEBUG io.github.longfish801 - line call
10:32:32.361 [main] DEBUG io.github.longfish801 - text call: 【囲み記事－】
10:32:32.411 [main] DEBUG io.github.longfish801 - block call: block#コード
10:32:32.460 [main] DEBUG io.github.longfish801 - para call
10:32:32.508 [main] DEBUG io.github.longfish801 - line call
10:32:32.562 [main] DEBUG io.github.longfish801 - text call: <?xml version="1.0" encoding="UTF-8"?>
10:32:32.609 [main] DEBUG io.github.longfish801 - line call
10:32:32.659 [main] DEBUG io.github.longfish801 - text call: <bltxt>
10:32:32.707 [main] DEBUG io.github.longfish801 - line call
10:32:32.760 [main] DEBUG io.github.longfish801 - text call:   <meta tag="タイトル" lnum="1" snum="1">
10:32:32.806 [main] DEBUG io.github.longfish801 - line call
10:32:32.857 [main] DEBUG io.github.longfish801 - text call:     <para lnum="1" snum="1">
10:32:32.912 [main] DEBUG io.github.longfish801 - line call
10:32:32.967 [main] DEBUG io.github.longfish801 - text call:       <line lnum="1">
10:32:33.011 [main] DEBUG io.github.longfish801 - line call
10:32:33.067 [main] DEBUG io.github.longfish801 - text call:         <text>円周率の暗記</text>
10:32:33.111 [main] DEBUG io.github.longfish801 - line call
10:32:33.167 [main] DEBUG io.github.longfish801 - text call:       </line>
10:32:33.209 [main] DEBUG io.github.longfish801 - line call
10:32:33.260 [main] DEBUG io.github.longfish801 - text call:     </para>
10:32:33.311 [main] DEBUG io.github.longfish801 - line call
10:32:33.361 [main] DEBUG io.github.longfish801 - text call:   </meta>
10:32:33.420 [main] DEBUG io.github.longfish801 - line call
10:32:33.470 [main] DEBUG io.github.longfish801 - text call:   <meta tag="著者" lnum="2" snum="1">
10:32:33.520 [main] DEBUG io.github.longfish801 - line call
10:32:33.571 [main] DEBUG io.github.longfish801 - text call:     <attrs>
10:32:33.618 [main] DEBUG io.github.longfish801 - line call
10:32:33.669 [main] DEBUG io.github.longfish801 - text call:       <attr>山田太郎</attr>
10:32:33.719 [main] DEBUG io.github.longfish801 - line call
10:32:33.770 [main] DEBUG io.github.longfish801 - text call:     </attrs>
10:32:33.817 [main] DEBUG io.github.longfish801 - line call
10:32:33.869 [main] DEBUG io.github.longfish801 - text call:   </meta>
10:32:33.914 [main] DEBUG io.github.longfish801 - line call
10:32:33.981 [main] DEBUG io.github.longfish801 - text call:   <meta tag="コメント" lnum="4" snum="1">
10:32:34.027 [main] DEBUG io.github.longfish801 - line call
10:32:34.078 [main] DEBUG io.github.longfish801 - text call:     <attrs>
10:32:34.129 [main] DEBUG io.github.longfish801 - line call
10:32:34.180 [main] DEBUG io.github.longfish801 - text call:       <attr>ここから囲み記事</attr>
10:32:34.230 [main] DEBUG io.github.longfish801 - line call
10:32:34.281 [main] DEBUG io.github.longfish801 - text call:     </attrs>
10:32:34.332 [main] DEBUG io.github.longfish801 - line call
10:32:34.379 [main] DEBUG io.github.longfish801 - text call:   </meta>
10:32:34.430 [main] DEBUG io.github.longfish801 - line call
10:32:34.496 [main] DEBUG io.github.longfish801 - text call:   <block tag="囲み記事" lnum="5" snum="1">
10:32:34.547 [main] DEBUG io.github.longfish801 - line call
10:32:34.596 [main] DEBUG io.github.longfish801 - text call:     <meta tag="コメント" lnum="6" snum="2">
10:32:34.647 [main] DEBUG io.github.longfish801 - line call
10:32:34.701 [main] DEBUG io.github.longfish801 - text call:       <attrs>
10:32:34.747 [main] DEBUG io.github.longfish801 - line call
10:32:34.801 [main] DEBUG io.github.longfish801 - text call:         <attr>3.14159265</attr>
10:32:34.851 [main] DEBUG io.github.longfish801 - line call
10:32:34.901 [main] DEBUG io.github.longfish801 - text call:       </attrs>
10:32:34.952 [main] DEBUG io.github.longfish801 - line call
10:32:35.007 [main] DEBUG io.github.longfish801 - text call:     </meta>
10:32:35.067 [main] DEBUG io.github.longfish801 - line call
10:32:35.121 [main] DEBUG io.github.longfish801 - text call:     <para lnum="6" snum="2">
10:32:35.168 [main] DEBUG io.github.longfish801 - line call
10:32:35.219 [main] DEBUG io.github.longfish801 - text call:       <line lnum="7">
10:32:35.269 [main] DEBUG io.github.longfish801 - line call
10:32:35.320 [main] DEBUG io.github.longfish801 - text call:         <text>産医師異国に向かう。</text>
10:32:35.370 [main] DEBUG io.github.longfish801 - line call
10:32:35.424 [main] DEBUG io.github.longfish801 - text call:       </line>
10:32:35.468 [main] DEBUG io.github.longfish801 - line call
10:32:35.526 [main] DEBUG io.github.longfish801 - text call:     </para>
10:32:35.587 [main] DEBUG io.github.longfish801 - line call
10:32:35.639 [main] DEBUG io.github.longfish801 - text call:   </block>
10:32:35.688 [main] DEBUG io.github.longfish801 - line call
10:32:35.739 [main] DEBUG io.github.longfish801 - text call: </bltxt>
10:32:35.789 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:32:35.840 [main] DEBUG io.github.longfish801 - para call
10:32:35.890 [main] DEBUG io.github.longfish801 - line call
10:32:35.941 [main] DEBUG io.github.longfish801 - text call: 含意範囲タグ
10:32:35.991 [main] DEBUG io.github.longfish801 - para call
10:32:36.039 [main] DEBUG io.github.longfish801 - line call
10:32:36.089 [main] DEBUG io.github.longfish801 - text call: 　含意範囲タグはmetaタグに変換します。
10:32:36.148 [main] DEBUG io.github.longfish801 - line call
10:32:36.199 [main] DEBUG io.github.longfish801 - text call: 　タグ名はmetaタグのtag属性として保持します。
10:32:36.246 [main] DEBUG io.github.longfish801 - line call
10:32:36.296 [main] DEBUG io.github.longfish801 - text call: 　属性値はattrタグとしてmetaタグ内に保持します。
10:32:36.341 [main] DEBUG io.github.longfish801 - line call
10:32:36.392 [main] DEBUG io.github.longfish801 - text call: 　行範囲タグ内にある含意タグは、その行範囲タグに対応する blockタグ内に metaタグを設けます。
10:32:36.439 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:32:36.488 [main] DEBUG io.github.longfish801 - para call
10:32:36.537 [main] DEBUG io.github.longfish801 - line call
10:32:36.589 [main] DEBUG io.github.longfish801 - text call: 　そして下人は高尾山へと姿を消した【註：消息】。
10:32:36.634 [main] DEBUG io.github.longfish801 - para call
10:32:36.697 [main] DEBUG io.github.longfish801 - line call
10:32:36.750 [main] DEBUG io.github.longfish801 - text call: 【＊註記：消息】
10:32:36.797 [main] DEBUG io.github.longfish801 - line call
10:32:36.849 [main] DEBUG io.github.longfish801 - text call: 　正確には、そのような事実があったか確かめられていない。
10:32:36.896 [main] DEBUG io.github.longfish801 - line call
10:32:36.948 [main] DEBUG io.github.longfish801 - text call: 【註記＊】
10:32:36.990 [main] DEBUG io.github.longfish801 - para call
10:32:37.041 [main] DEBUG io.github.longfish801 - line call
10:32:37.096 [main] DEBUG io.github.longfish801 - text call: 【－囲み記事】
10:32:37.140 [main] DEBUG io.github.longfish801 - line call
10:32:37.207 [main] DEBUG io.github.longfish801 - text call: 　芥川龍之介の文章を参考とした。
10:32:37.251 [main] DEBUG io.github.longfish801 - line call
10:32:37.302 [main] DEBUG io.github.longfish801 - text call: 【＊コメント】
10:32:37.352 [main] DEBUG io.github.longfish801 - line call
10:32:37.401 [main] DEBUG io.github.longfish801 - text call: 　要出典明記。
10:32:37.451 [main] DEBUG io.github.longfish801 - line call
10:32:37.502 [main] DEBUG io.github.longfish801 - text call: 【コメント＊】
10:32:37.549 [main] DEBUG io.github.longfish801 - line call
10:32:37.600 [main] DEBUG io.github.longfish801 - text call: 【囲み記事－】
10:32:37.651 [main] DEBUG io.github.longfish801 - block call: block#コード
10:32:37.701 [main] DEBUG io.github.longfish801 - para call
10:32:37.758 [main] DEBUG io.github.longfish801 - line call
10:32:37.809 [main] DEBUG io.github.longfish801 - text call: <?xml version="1.0" encoding="UTF-8"?>
10:32:37.859 [main] DEBUG io.github.longfish801 - line call
10:32:37.910 [main] DEBUG io.github.longfish801 - text call: <bltxt>
10:32:37.962 [main] DEBUG io.github.longfish801 - line call
10:32:38.016 [main] DEBUG io.github.longfish801 - text call:   <para lnum="1" snum="1">
10:32:38.065 [main] DEBUG io.github.longfish801 - line call
10:32:38.119 [main] DEBUG io.github.longfish801 - text call:     <line lnum="1">
10:32:38.170 [main] DEBUG io.github.longfish801 - line call
10:32:38.220 [main] DEBUG io.github.longfish801 - text call:       <text>　そして下人は高尾山へと姿を消した</text>
10:32:38.282 [main] DEBUG io.github.longfish801 - line call
10:32:38.337 [main] DEBUG io.github.longfish801 - text call:       <inline tag="註" lnum="1" snum="1">
10:32:38.387 [main] DEBUG io.github.longfish801 - line call
10:32:38.437 [main] DEBUG io.github.longfish801 - text call:         <attrs>
10:32:38.477 [main] DEBUG io.github.longfish801 - line call
10:32:38.537 [main] DEBUG io.github.longfish801 - text call:           <attr>消息</attr>
10:32:38.577 [main] DEBUG io.github.longfish801 - line call
10:32:38.638 [main] DEBUG io.github.longfish801 - text call:         </attrs>
10:32:38.681 [main] DEBUG io.github.longfish801 - line call
10:32:38.738 [main] DEBUG io.github.longfish801 - text call:       </inline>
10:32:38.780 [main] DEBUG io.github.longfish801 - line call
10:32:38.851 [main] DEBUG io.github.longfish801 - text call:       <text>。</text>
10:32:38.897 [main] DEBUG io.github.longfish801 - line call
10:32:38.950 [main] DEBUG io.github.longfish801 - text call:     </line>
10:32:38.999 [main] DEBUG io.github.longfish801 - line call
10:32:39.047 [main] DEBUG io.github.longfish801 - text call:   </para>
10:32:39.097 [main] DEBUG io.github.longfish801 - line call
10:32:39.151 [main] DEBUG io.github.longfish801 - text call:   <meta tag="註記" lnum="3" snum="1">
10:32:39.200 [main] DEBUG io.github.longfish801 - line call
10:32:39.250 [main] DEBUG io.github.longfish801 - text call:     <attrs>
10:32:39.303 [main] DEBUG io.github.longfish801 - line call
10:32:39.373 [main] DEBUG io.github.longfish801 - text call:       <attr>消息</attr>
10:32:39.424 [main] DEBUG io.github.longfish801 - line call
10:32:39.479 [main] DEBUG io.github.longfish801 - text call:     </attrs>
10:32:39.530 [main] DEBUG io.github.longfish801 - line call
10:32:39.585 [main] DEBUG io.github.longfish801 - text call:     <para lnum="3" snum="2">
10:32:39.628 [main] DEBUG io.github.longfish801 - line call
10:32:39.679 [main] DEBUG io.github.longfish801 - text call:       <line lnum="4">
10:32:39.736 [main] DEBUG io.github.longfish801 - line call
10:32:39.787 [main] DEBUG io.github.longfish801 - text call:         <text>　正確には、そのような事実があったか確かめられていない。</text>
10:32:39.837 [main] DEBUG io.github.longfish801 - line call
10:32:39.921 [main] DEBUG io.github.longfish801 - text call:       </line>
10:32:39.979 [main] DEBUG io.github.longfish801 - line call
10:32:40.040 [main] DEBUG io.github.longfish801 - text call:     </para>
10:32:40.094 [main] DEBUG io.github.longfish801 - line call
10:32:40.150 [main] DEBUG io.github.longfish801 - text call:   </meta>
10:32:40.202 [main] DEBUG io.github.longfish801 - line call
10:32:40.259 [main] DEBUG io.github.longfish801 - text call:   <block tag="囲み記事" lnum="7" snum="1">
10:32:40.314 [main] DEBUG io.github.longfish801 - line call
10:32:40.371 [main] DEBUG io.github.longfish801 - text call:     <para lnum="7" snum="3">
10:32:40.429 [main] DEBUG io.github.longfish801 - line call
10:32:40.484 [main] DEBUG io.github.longfish801 - text call:       <line lnum="8">
10:32:40.557 [main] DEBUG io.github.longfish801 - line call
10:32:40.622 [main] DEBUG io.github.longfish801 - text call:         <text>　芥川龍之介の文章を参考とした。</text>
10:32:40.676 [main] DEBUG io.github.longfish801 - line call
10:32:40.730 [main] DEBUG io.github.longfish801 - text call:       </line>
10:32:40.781 [main] DEBUG io.github.longfish801 - line call
10:32:40.835 [main] DEBUG io.github.longfish801 - text call:     </para>
10:32:40.885 [main] DEBUG io.github.longfish801 - line call
10:32:40.938 [main] DEBUG io.github.longfish801 - text call:     <meta tag="コメント" lnum="9" snum="1">
10:32:40.989 [main] DEBUG io.github.longfish801 - line call
10:32:41.043 [main] DEBUG io.github.longfish801 - text call:       <para lnum="9" snum="4">
10:32:41.105 [main] DEBUG io.github.longfish801 - line call
10:32:41.160 [main] DEBUG io.github.longfish801 - text call:         <line lnum="10">
10:32:41.214 [main] DEBUG io.github.longfish801 - line call
10:32:41.270 [main] DEBUG io.github.longfish801 - text call:           <text>　要出典明記。</text>
10:32:41.321 [main] DEBUG io.github.longfish801 - line call
10:32:41.378 [main] DEBUG io.github.longfish801 - text call:         </line>
10:32:41.429 [main] DEBUG io.github.longfish801 - line call
10:32:41.483 [main] DEBUG io.github.longfish801 - text call:       </para>
10:32:41.533 [main] DEBUG io.github.longfish801 - line call
10:32:41.587 [main] DEBUG io.github.longfish801 - text call:     </meta>
10:32:41.637 [main] DEBUG io.github.longfish801 - line call
10:32:41.703 [main] DEBUG io.github.longfish801 - text call:   </block>
10:32:41.752 [main] DEBUG io.github.longfish801 - line call
10:32:41.806 [main] DEBUG io.github.longfish801 - text call: </bltxt>
10:32:41.855 [main] DEBUG io.github.longfish801 - para call
10:32:41.903 [main] DEBUG io.github.longfish801 - line call
10:32:41.955 [main] DEBUG io.github.longfish801 - text call: 以上
10:32:42.052 [main] DEBUG io.github.longfish801 - para call
10:32:42.103 [main] DEBUG io.github.longfish801 - line call
10:32:42.156 [main] DEBUG io.github.longfish801 - text call: BLtxt記法
10:32:42.272 [main] DEBUG io.github.longfish801 - para call
10:32:42.325 [main] DEBUG io.github.longfish801 - line call
10:32:42.379 [main] DEBUG io.github.longfish801 - text call: BLtxt記法とは
10:32:42.428 [main] DEBUG io.github.longfish801 - para call
10:32:42.480 [main] DEBUG io.github.longfish801 - line call
10:32:42.534 [main] DEBUG io.github.longfish801 - text call: サンプル
10:32:42.583 [main] DEBUG io.github.longfish801 - para call
10:32:42.635 [main] DEBUG io.github.longfish801 - line call
10:32:42.688 [main] DEBUG io.github.longfish801 - text call: 記法
10:32:42.737 [main] DEBUG io.github.longfish801 - para call
10:32:42.801 [main] DEBUG io.github.longfish801 - line call
10:32:42.854 [main] DEBUG io.github.longfish801 - text call: 構成
10:32:42.902 [main] DEBUG io.github.longfish801 - para call
10:32:42.955 [main] DEBUG io.github.longfish801 - line call
10:32:43.008 [main] DEBUG io.github.longfish801 - text call: タグ
10:32:43.056 [main] DEBUG io.github.longfish801 - para call
10:32:43.107 [main] DEBUG io.github.longfish801 - line call
10:32:43.160 [main] DEBUG io.github.longfish801 - text call: 文中タグ
10:32:43.208 [main] DEBUG io.github.longfish801 - para call
10:32:43.259 [main] DEBUG io.github.longfish801 - line call
10:32:43.312 [main] DEBUG io.github.longfish801 - text call: 文範囲タグ
10:32:43.373 [main] DEBUG io.github.longfish801 - para call
10:32:43.424 [main] DEBUG io.github.longfish801 - line call
10:32:43.477 [main] DEBUG io.github.longfish801 - text call: 行タグ
10:32:43.526 [main] DEBUG io.github.longfish801 - para call
10:32:43.577 [main] DEBUG io.github.longfish801 - line call
10:32:43.630 [main] DEBUG io.github.longfish801 - text call: 行範囲タグ
10:32:43.679 [main] DEBUG io.github.longfish801 - para call
10:32:43.733 [main] DEBUG io.github.longfish801 - line call
10:32:43.788 [main] DEBUG io.github.longfish801 - text call: 含意タグ
10:32:43.840 [main] DEBUG io.github.longfish801 - para call
10:32:43.892 [main] DEBUG io.github.longfish801 - line call
10:32:43.956 [main] DEBUG io.github.longfish801 - text call: 含意範囲タグ
10:32:44.005 [main] DEBUG io.github.longfish801 - para call
10:32:44.056 [main] DEBUG io.github.longfish801 - line call
10:32:44.108 [main] DEBUG io.github.longfish801 - text call: エスケープと使用可能文字
10:32:44.157 [main] DEBUG io.github.longfish801 - para call
10:32:44.209 [main] DEBUG io.github.longfish801 - line call
10:32:44.261 [main] DEBUG io.github.longfish801 - text call: XML化
10:32:44.310 [main] DEBUG io.github.longfish801 - para call
10:32:44.361 [main] DEBUG io.github.longfish801 - line call
10:32:44.414 [main] DEBUG io.github.longfish801 - text call: 平文
10:32:44.463 [main] DEBUG io.github.longfish801 - para call
10:32:44.543 [main] DEBUG io.github.longfish801 - line call
10:32:44.596 [main] DEBUG io.github.longfish801 - text call: 文中タグ
10:32:44.645 [main] DEBUG io.github.longfish801 - para call
10:32:44.696 [main] DEBUG io.github.longfish801 - line call
10:32:44.749 [main] DEBUG io.github.longfish801 - text call: 文範囲タグ
10:32:44.798 [main] DEBUG io.github.longfish801 - para call
10:32:44.847 [main] DEBUG io.github.longfish801 - line call
10:32:44.901 [main] DEBUG io.github.longfish801 - text call: 行タグ
10:32:44.950 [main] DEBUG io.github.longfish801 - para call
10:32:45.002 [main] DEBUG io.github.longfish801 - line call
10:32:45.057 [main] DEBUG io.github.longfish801 - text call: 行範囲タグ
10:32:45.120 [main] DEBUG io.github.longfish801 - para call
10:32:45.171 [main] DEBUG io.github.longfish801 - line call
10:32:45.226 [main] DEBUG io.github.longfish801 - text call: 含意タグ
10:32:45.275 [main] DEBUG io.github.longfish801 - para call
10:32:45.324 [main] DEBUG io.github.longfish801 - line call
10:32:45.377 [main] DEBUG io.github.longfish801 - text call: 含意範囲タグ
10:32:45.441 [Thread-15] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行開始 key=washscr#BLtxt文書へ整形
10:32:45.520 [ForkJoinPool-7-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#箇条書き
10:32:45.520 [ForkJoinPool-7-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY reprex#各種置換
10:32:45.574 [ForkJoinPool-8-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY replace#エスケープ
10:32:45.603 [ForkJoinPool-9-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#表
10:32:45.625 [ForkJoinPool-10-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#コラムを整形
10:32:45.646 [ForkJoinPool-11-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#タグ付きコラムを整形
10:32:45.648 [ForkJoinPool-12-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY slice#空白行区切り
10:32:45.648 [ForkJoinPool-12-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#BLエスケープ
10:32:45.648 [ForkJoinPool-12-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#表
10:32:45.648 [ForkJoinPool-12-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#コラム
10:32:45.648 [ForkJoinPool-12-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#タグ付きコラム
10:32:45.648 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【＃タイトル】Clmap記法]
10:32:45.668 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■概要]
10:32:45.720 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＃タイトル】Clmap記法]
10:32:45.739 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　Clmap記法はクロージャマップを定義するための記法です。, 　クロージャマップは複数のクロージャをまとめたものです。, 　引数と戻り値のインタフェースが同じクロージャをまとめて定義するのに適しています。]
10:32:45.779 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】概要]
10:32:45.783 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　名称はクロージャ（Closure）のマップ（Map）に由来しています。, 　文法は【リンク：TPAC記法：tpac.html】がベースとなっています。]
10:32:45.820 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　Clmap記法はクロージャマップを定義するための記法です。, 　クロージャマップは複数のクロージャをまとめたものです。, 　引数と戻り値のインタフェースが同じクロージャをまとめて定義するのに適しています。]
10:32:45.824 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■サンプル]
10:32:45.860 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　名称はクロージャ（Closure）のマップ（Map）に由来しています。, 　文法は【｜リンク：tpac.html】TPAC記法【リンク｜】がベースとなっています。]
10:32:45.864 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　クロージャマップのサンプルを以下に示します。, 　上記の内容をファイル 【リンク：clmapSample/sample.tpac】に保存したとします。]
10:32:45.890 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】サンプル]
10:32:45.905 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [-----, #! clmap テスト, ## map map1, # args, 	String yourName]
10:32:45.930 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　クロージャマップのサンプルを以下に示します。, 　上記の内容をファイル 【｜リンク：clmapSample/sample.tpac】clmapSample/sample.tpac【リンク｜】に保存したとします。]
10:32:45.945 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [# closure, 	return "Hello, ${yourName}!";]
10:32:45.971 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[-----, #! clmap テスト, ## map map1, # args, 	String yourName]
10:32:45.986 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [# closure key1, 	return clmap.cl('map1').call(yourName.toLowerCase());]
10:32:46.011 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[# closure, 	return "Hello, ${yourName}!";]
10:32:46.027 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [# closure key2, 	config.msg = 'HELLO, WORLD!';, 	return clmap.cl('map1#nosuchKey').call(yourName.toUpperCase());]
10:32:46.052 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[# closure key1, 	return clmap.cl('map1').call(yourName.toLowerCase());]
10:32:46.067 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [# closure key3, 	return config.msg;, -----]
10:32:46.093 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[# closure key2, 	config.msg = 'HELLO, WORLD!';, 	return clmap.cl('map1#nosuchKey').call(yourName.toUpperCase());]
10:32:46.122 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　クロージャの実行には【リンク：Clmap：/clmap/groovydoc/io/github/longfish801/yakumo/clmap/Clmap.html】クラスを利用します。, 　map, closureそれぞれの名称を半角シャープ(#)でつないだコンビキーでクロージャを呼びます。, 　map名のみ、あるいは closureの名前が存在しない場合は、名前を省略した closureを呼びます。]
10:32:46.157 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[# closure key3, 	return config.msg;, -----]
10:32:46.162 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　以下をファイル 【リンク：clmapSample/sample.groovy】として保存したとします。, 　groovyコマンドで実行すると assertに成功します。]
10:32:46.188 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　クロージャの実行には【｜リンク：/clmap/groovydoc/io/github/longfish801/yakumo/clmap/Clmap.html】Clmap【リンク｜】クラスを利用します。, 　map, closureそれぞれの名称を半角シャープ(#)でつないだコンビキーでクロージャを呼びます。, 　map名のみ、あるいは closureの名前が存在しない場合は、名前を省略した closureを呼びます。]
10:32:46.203 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [-----, @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/'), @Grab('io.github.longfish801:yakumo:0.1.00'), @GrabExclude('org.codehaus.groovy:groovy-all')]
10:32:46.229 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　以下をファイル 【｜リンク：clmapSample/sample.groovy】clmapSample/sample.groovy【リンク｜】として保存したとします。, 　groovyコマンドで実行すると assertに成功します。]
10:32:46.244 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [import io.github.longfish801.yakumo.clmap.Clmap;]
10:32:46.270 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[-----, @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/'), @Grab('io.github.longfish801:yakumo:0.1.00'), @GrabExclude('org.codehaus.groovy:groovy-all')]
10:32:46.285 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [Clmap clmap = new Clmap(new File('sample.tpac'));]
10:32:46.311 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[import io.github.longfish801.yakumo.clmap.Clmap;]
10:32:46.326 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [assert 'Hello, World!' == clmap.cl('map1').call('World');, assert 'Hello, world!' == clmap.cl('map1#key1').call('World');, assert 'Hello, WORLD!' == clmap.cl('map1#key2').call('World');, assert 'HELLO, WORLD!' == clmap.cl('map1#key3').call('DUMMY');, -----]
10:32:46.363 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[Clmap clmap = new Clmap(new File('sample.tpac'));]
10:32:46.367 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■宣言]
10:32:46.404 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[assert 'Hello, World!' == clmap.cl('map1').call('World');, assert 'Hello, world!' == clmap.cl('map1#key1').call('World');, assert 'Hello, WORLD!' == clmap.cl('map1#key2').call('World');, assert 'HELLO, WORLD!' == clmap.cl('map1#key3').call('DUMMY');, -----]
10:32:46.408 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　先頭に宣言をひとつ持ちます。, 　タグ名は「clmap」です。, 　スペース区切りで任意の名前を付与してください。名前は省略可です。]
10:32:46.438 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】宣言]
10:32:46.450 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [-----, #! clmap テスト, -----]
10:32:46.475 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　先頭に宣言をひとつ持ちます。, 　タグ名は「clmap」です。, 　スペース区切りで任意の名前を付与してください。名前は省略可です。]
10:32:46.491 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■mapとclosure]
10:32:46.516 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[-----, #! clmap テスト, -----]
10:32:46.532 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　親要素として mapを複数指定できます。, 　mapには名前を付与してください。ひとつだけ省略可です。]
10:32:46.558 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】mapとclosure]
10:32:46.573 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　mapにはひとつだけ子要素 argsを指定します。, 　argsにはクロージャの引数を指定します。引数が無い場合は省略できます。, 　引数には暗黙で最後に Clmap clmap, ConfigObject configを付与します。, 　変数clmapで、同じクロージャマップに定義された他のクロージャを呼ぶことができます。, 　変数configで、クロージャ間の値の受け渡しができます。]
10:32:46.599 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　親要素として mapを複数指定できます。, 　mapには名前を付与してください。ひとつだけ省略可です。]
10:32:46.614 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　mapには複数の closureを定義できます。, 　ここにクロージャの処理を記述します。, 　closureには名前を指定します。ひとつだけ省略可です。]
10:32:46.640 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　mapにはひとつだけ子要素 argsを指定します。, 　argsにはクロージャの引数を指定します。引数が無い場合は省略できます。, 　引数には暗黙で最後に Clmap clmap, ConfigObject configを付与します。, 　変数clmapで、同じクロージャマップに定義された他のクロージャを呼ぶことができます。, 　変数configで、クロージャ間の値の受け渡しができます。]
10:32:46.656 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　同じ mapに属するクロージャは引数の型をすべて同じにする必要があることに注意してください。]
10:32:46.697 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　mapには複数の closureを定義できます。, 　ここにクロージャの処理を記述します。, 　closureには名前を指定します。ひとつだけ省略可です。]
10:32:46.713 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■dec, prefix, suffix]
10:32:46.739 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　同じ mapに属するクロージャは引数の型をすべて同じにする必要があることに注意してください。]
10:32:46.754 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　親要素、子要素それぞれに dec, prefix, suffixを指定できます。]
10:32:46.780 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】dec, prefix, suffix]
10:32:46.796 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　decに記述したテキストは、クロージャが開始する前の箇所に使用します。, 　たとえば import文の記述に利用してください。, 　親要素に指定した dec、子要素に指定した decの順番となります。]
10:32:46.824 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　親要素、子要素それぞれに dec, prefix, suffixを指定できます。]
10:32:46.841 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　prefixに記述したテキストは、closureに記述した処理よりも前に付与されます。, 　子要素に指定した prefix、親要素に指定した prefixの順番となります。]
10:32:46.868 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　decに記述したテキストは、クロージャが開始する前の箇所に使用します。, 　たとえば import文の記述に利用してください。, 　親要素に指定した dec、子要素に指定した decの順番となります。]
10:32:46.884 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　suffixに記述したテキストは、closureに記述した処理よりも後に付与されます。, 　親要素に指定した suffix、子要素に指定した suffixの順番となります。]
10:32:46.911 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　prefixに記述したテキストは、closureに記述した処理よりも前に付与されます。, 　子要素に指定した prefix、親要素に指定した prefixの順番となります。]
10:32:46.926 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　クロージャマップのサンプルを以下に示します。]
10:32:46.958 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　suffixに記述したテキストは、closureに記述した処理よりも後に付与されます。, 　親要素に指定した suffix、子要素に指定した suffixの順番となります。]
10:32:46.972 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [-----, #! clmap テスト, ## dec, 	import org.apache.commons.lang3.StringUtils;, ## prefix, 	println 'BGN HERE';, ## suffix, 	println 'END HERE';]
10:32:46.998 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　クロージャマップのサンプルを以下に示します。]
10:32:47.014 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [## map map1, # args, 	String yourName, # dec, 	String cmnString = 'This is';, # prefix, 	String result = '';, # suffix, 	return result;]
10:32:47.042 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[-----, #! clmap テスト, ## dec, 	import org.apache.commons.lang3.StringUtils;, ## prefix, 	println 'BGN HERE';, ## suffix, 	println 'END HERE';]
10:32:47.057 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [# closure key1, 	result = StringUtils.trim("   ${cmnString} ${yourName}.   ");, -----]
10:32:47.083 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[## map map1, # args, 	String yourName, # dec, 	String cmnString = 'This is';, # prefix, 	String result = '';, # suffix, 	return result;]
10:32:47.099 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　上記のクロージャマップからコンビキー「map1#key1」で参照されるクロージャのコードは以下のとおりです。, 　読みやすいよう整形しています。]
10:32:47.124 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[# closure key1, 	result = StringUtils.trim("   ${cmnString} ${yourName}.   ");, -----]
10:32:47.140 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [-----, import io.github.longfish801.yakumo.clmap.Clmap;, import org.apache.commons.lang3.StringUtils;]
10:32:47.165 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　上記のクロージャマップからコンビキー「map1#key1」で参照されるクロージャのコードは以下のとおりです。, 　読みやすいよう整形しています。]
10:32:47.181 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [String cmnString = 'This is';]
10:32:47.206 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[-----, import io.github.longfish801.yakumo.clmap.Clmap;, import org.apache.commons.lang3.StringUtils;]
10:32:47.222 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [{ String yourName, Clmap clmap ->, 	println 'BGN HERE';, 	String result = '';, 	result = StringUtils.trim("   ${cmnString} ${yourName}.   ");, 	println 'END HERE';, 	return result;, }, -----]
10:32:47.247 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[String cmnString = 'This is';]
10:32:47.277 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [以上]
10:32:47.301 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[{ String yourName, Clmap clmap ->, 	println 'BGN HERE';, 	String result = '';, 	result = StringUtils.trim("   ${cmnString} ${yourName}.   ");, 	println 'END HERE';, 	return result;, }, -----]
10:32:47.317 [ForkJoinPool-12-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 slice#空白行区切り
10:32:47.338 [ForkJoinPool-7-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#箇条書き
10:32:47.339 [ForkJoinPool-7-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#箇条書き
10:32:47.339 [ForkJoinPool-7-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#箇条書き
10:32:47.339 [ForkJoinPool-7-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[以上]
10:32:47.339 [ForkJoinPool-7-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast reprex#各種置換
10:32:47.339 [ForkJoinPool-7-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate reprex#各種置換
10:32:47.339 [ForkJoinPool-7-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY reprex#各種置換
10:32:47.340 [ForkJoinPool-12-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY slice#空白行区切り
10:32:47.340 [ForkJoinPool-12-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#BLエスケープ
10:32:47.340 [ForkJoinPool-8-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast replace#エスケープ
10:32:47.340 [ForkJoinPool-8-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate replace#エスケープ
10:32:47.340 [ForkJoinPool-8-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY replace#エスケープ
10:32:47.341 [ForkJoinPool-12-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#BLエスケープ
10:32:47.341 [ForkJoinPool-12-worker-2] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#表
10:32:47.341 [ForkJoinPool-9-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#表
10:32:47.341 [ForkJoinPool-9-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#表
10:32:47.341 [ForkJoinPool-9-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#表
10:32:47.341 [ForkJoinPool-12-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [#! clmap テスト, ## map map1, # args, 	String yourName, , # closure, 	return "Hello, ${yourName}!";, , # closure key1, 	return clmap.cl('map1').call(yourName.toLowerCase());, , # closure key2, 	config.msg = 'HELLO, WORLD!';, 	return clmap.cl('map1#nosuchKey').call(yourName.toUpperCase());, , # closure key3, 	return config.msg;]
10:32:47.341 [ForkJoinPool-12-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#表
10:32:47.342 [ForkJoinPool-12-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [@GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/'), @Grab('io.github.longfish801:yakumo:0.1.00'), @GrabExclude('org.codehaus.groovy:groovy-all'), , import io.github.longfish801.yakumo.clmap.Clmap;, , Clmap clmap = new Clmap(new File('sample.tpac'));, , assert 'Hello, World!' == clmap.cl('map1').call('World');, assert 'Hello, world!' == clmap.cl('map1#key1').call('World');, assert 'Hello, WORLD!' == clmap.cl('map1#key2').call('World');, assert 'HELLO, WORLD!' == clmap.cl('map1#key3').call('DUMMY');]
10:32:47.342 [ForkJoinPool-12-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [#! clmap テスト]
10:32:47.342 [ForkJoinPool-12-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [#! clmap テスト, ## dec, 	import org.apache.commons.lang3.StringUtils;, ## prefix, 	println 'BGN HERE';, ## suffix, 	println 'END HERE';, , ## map map1, # args, 	String yourName, # dec, 	String cmnString = 'This is';, # prefix, 	String result = '';, # suffix, 	return result;, , # closure key1, 	result = StringUtils.trim("   ${cmnString} ${yourName}.   ");]
10:32:47.342 [ForkJoinPool-12-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [import io.github.longfish801.yakumo.clmap.Clmap;, import org.apache.commons.lang3.StringUtils;, , String cmnString = 'This is';, , { String yourName, Clmap clmap ->, 	println 'BGN HERE';, 	String result = '';, 	result = StringUtils.trim("   ${cmnString} ${yourName}.   ");, 	println 'END HERE';, 	return result;, }]
10:32:47.342 [ForkJoinPool-12-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#コラム
10:32:47.361 [ForkJoinPool-10-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, #! clmap テスト, ## map map1, # args, 	String yourName, , # closure, 	return "Hello, ${yourName}!";, , # closure key1, 	return clmap.cl('map1').call(yourName.toLowerCase());, , # closure key2, 	config.msg = 'HELLO, WORLD!';, 	return clmap.cl('map1#nosuchKey').call(yourName.toUpperCase());, , # closure key3, 	return config.msg;, 【コラム－】]
10:32:47.380 [ForkJoinPool-10-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/'), @Grab('io.github.longfish801:yakumo:0.1.00'), @GrabExclude('org.codehaus.groovy:groovy-all'), , import io.github.longfish801.yakumo.clmap.Clmap;, , Clmap clmap = new Clmap(new File('sample.tpac'));, , assert 'Hello, World!' == clmap.cl('map1').call('World');, assert 'Hello, world!' == clmap.cl('map1#key1').call('World');, assert 'Hello, WORLD!' == clmap.cl('map1#key2').call('World');, assert 'HELLO, WORLD!' == clmap.cl('map1#key3').call('DUMMY');, 【コラム－】]
10:32:47.398 [ForkJoinPool-10-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, #! clmap テスト, 【コラム－】]
10:32:47.417 [ForkJoinPool-10-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, #! clmap テスト, ## dec, 	import org.apache.commons.lang3.StringUtils;, ## prefix, 	println 'BGN HERE';, ## suffix, 	println 'END HERE';, , ## map map1, # args, 	String yourName, # dec, 	String cmnString = 'This is';, # prefix, 	String result = '';, # suffix, 	return result;, , # closure key1, 	result = StringUtils.trim("   ${cmnString} ${yourName}.   ");, 【コラム－】]
10:32:47.436 [ForkJoinPool-10-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, import io.github.longfish801.yakumo.clmap.Clmap;, import org.apache.commons.lang3.StringUtils;, , String cmnString = 'This is';, , { String yourName, Clmap clmap ->, 	println 'BGN HERE';, 	String result = '';, 	result = StringUtils.trim("   ${cmnString} ${yourName}.   ");, 	println 'END HERE';, 	return result;, }, 【コラム－】]
10:32:47.436 [ForkJoinPool-10-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#コラムを整形
10:32:47.436 [ForkJoinPool-10-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#コラムを整形
10:32:47.436 [ForkJoinPool-10-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#コラムを整形
10:32:47.437 [ForkJoinPool-12-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#コラム
10:32:47.437 [ForkJoinPool-12-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#タグ付きコラム
10:32:47.437 [ForkJoinPool-11-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#タグ付きコラムを整形
10:32:47.437 [ForkJoinPool-11-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#タグ付きコラムを整形
10:32:47.437 [ForkJoinPool-11-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#タグ付きコラムを整形
10:32:47.438 [ForkJoinPool-12-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#タグ付きコラム
10:32:47.453 [Thread-15] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行終了 key=washscr#BLtxt文書へ整形
10:32:47.454 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：meta タイトル
10:32:47.455 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.455 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:32:47.455 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.455 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.455 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.456 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:32:47.456 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:32:47.456 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.456 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.456 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:32:47.456 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:32:47.457 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.457 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.457 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.457 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.458 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.458 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.458 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:32:47.459 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.459 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:32:47.459 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:32:47.459 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.460 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.460 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.460 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.460 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:32:47.460 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.460 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.461 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:32:47.461 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.461 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:32:47.461 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.461 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.461 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.462 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.462 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.462 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:32:47.463 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.463 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.463 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.463 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.463 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.464 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.464 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:32:47.464 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.465 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.466 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.466 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.466 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:32:47.466 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.467 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.467 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.467 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:32:47.605 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:32:47.659 [main] DEBUG io.github.longfish801 - para call
10:32:47.710 [main] DEBUG io.github.longfish801 - line call
10:32:47.765 [main] DEBUG io.github.longfish801 - text call: 概要
10:32:47.830 [main] DEBUG io.github.longfish801 - para call
10:32:47.880 [main] DEBUG io.github.longfish801 - line call
10:32:47.932 [main] DEBUG io.github.longfish801 - text call: 　Clmap記法はクロージャマップを定義するための記法です。
10:32:47.980 [main] DEBUG io.github.longfish801 - line call
10:32:48.032 [main] DEBUG io.github.longfish801 - text call: 　クロージャマップは複数のクロージャをまとめたものです。
10:32:48.080 [main] DEBUG io.github.longfish801 - line call
10:32:48.132 [main] DEBUG io.github.longfish801 - text call: 　引数と戻り値のインタフェースが同じクロージャをまとめて定義するのに適しています。
10:32:48.180 [main] DEBUG io.github.longfish801 - para call
10:32:48.228 [main] DEBUG io.github.longfish801 - line call
10:32:48.281 [main] DEBUG io.github.longfish801 - text call: 　名称はクロージャ（Closure）のマップ（Map）に由来しています。
10:32:48.328 [main] DEBUG io.github.longfish801 - line call
10:32:48.395 [main] DEBUG io.github.longfish801 - text call: 　文法は
10:32:48.444 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:32:48.498 [main] DEBUG io.github.longfish801 - text call: TPAC記法
10:32:48.548 [main] DEBUG io.github.longfish801 - text call: がベースとなっています。
10:32:48.601 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:32:48.652 [main] DEBUG io.github.longfish801 - para call
10:32:48.700 [main] DEBUG io.github.longfish801 - line call
10:32:48.754 [main] DEBUG io.github.longfish801 - text call: サンプル
10:32:48.802 [main] DEBUG io.github.longfish801 - para call
10:32:48.851 [main] DEBUG io.github.longfish801 - line call
10:32:48.903 [main] DEBUG io.github.longfish801 - text call: 　クロージャマップのサンプルを以下に示します。
10:32:48.967 [main] DEBUG io.github.longfish801 - line call
10:32:49.019 [main] DEBUG io.github.longfish801 - text call: 　上記の内容をファイル 
10:32:49.067 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:32:49.122 [main] DEBUG io.github.longfish801 - text call: clmapSample/sample.tpac
10:32:49.173 [main] DEBUG io.github.longfish801 - text call: に保存したとします。
10:32:49.439 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:32:49.489 [main] DEBUG io.github.longfish801 - para call
10:32:49.537 [main] DEBUG io.github.longfish801 - line call
10:32:49.591 [main] DEBUG io.github.longfish801 - text call: #! clmap テスト
10:32:49.639 [main] DEBUG io.github.longfish801 - line call
10:32:49.693 [main] DEBUG io.github.longfish801 - text call: ## map map1
10:32:49.741 [main] DEBUG io.github.longfish801 - line call
10:32:49.795 [main] DEBUG io.github.longfish801 - text call: # args
10:32:49.845 [main] DEBUG io.github.longfish801 - line call
10:32:49.899 [main] DEBUG io.github.longfish801 - text call: 	String yourName
10:32:49.949 [main] DEBUG io.github.longfish801 - para call
10:32:50.001 [main] DEBUG io.github.longfish801 - line call
10:32:50.056 [main] DEBUG io.github.longfish801 - text call: # closure
10:32:50.104 [main] DEBUG io.github.longfish801 - line call
10:32:50.158 [main] DEBUG io.github.longfish801 - text call: 	return "Hello, ${yourName}!";
10:32:50.207 [main] DEBUG io.github.longfish801 - para call
10:32:50.256 [main] DEBUG io.github.longfish801 - line call
10:32:50.310 [main] DEBUG io.github.longfish801 - text call: # closure key1
10:32:50.359 [main] DEBUG io.github.longfish801 - line call
10:32:50.413 [main] DEBUG io.github.longfish801 - text call: 	return clmap.cl('map1').call(yourName.toLowerCase());
10:32:50.462 [main] DEBUG io.github.longfish801 - para call
10:32:50.512 [main] DEBUG io.github.longfish801 - line call
10:32:50.570 [main] DEBUG io.github.longfish801 - text call: # closure key2
10:32:50.618 [main] DEBUG io.github.longfish801 - line call
10:32:50.673 [main] DEBUG io.github.longfish801 - text call: 	config.msg = 'HELLO, WORLD!';
10:32:50.722 [main] DEBUG io.github.longfish801 - line call
10:32:50.776 [main] DEBUG io.github.longfish801 - text call: 	return clmap.cl('map1#nosuchKey').call(yourName.toUpperCase());
10:32:50.828 [main] DEBUG io.github.longfish801 - para call
10:32:50.881 [main] DEBUG io.github.longfish801 - line call
10:32:50.935 [main] DEBUG io.github.longfish801 - text call: # closure key3
10:32:50.983 [main] DEBUG io.github.longfish801 - line call
10:32:51.038 [main] DEBUG io.github.longfish801 - text call: 	return config.msg;
10:32:51.090 [main] DEBUG io.github.longfish801 - para call
10:32:51.139 [main] DEBUG io.github.longfish801 - line call
10:32:51.191 [main] DEBUG io.github.longfish801 - text call: 　クロージャの実行には
10:32:51.241 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:32:51.295 [main] DEBUG io.github.longfish801 - text call: Clmap
10:32:51.346 [main] DEBUG io.github.longfish801 - text call: クラスを利用します。
10:32:51.394 [main] DEBUG io.github.longfish801 - line call
10:32:51.446 [main] DEBUG io.github.longfish801 - text call: 　map, closureそれぞれの名称を半角シャープ(#)でつないだコンビキーでクロージャを呼びます。
10:32:51.494 [main] DEBUG io.github.longfish801 - line call
10:32:51.546 [main] DEBUG io.github.longfish801 - text call: 　map名のみ、あるいは closureの名前が存在しない場合は、名前を省略した closureを呼びます。
10:32:51.593 [main] DEBUG io.github.longfish801 - para call
10:32:51.646 [main] DEBUG io.github.longfish801 - line call
10:32:51.699 [main] DEBUG io.github.longfish801 - text call: 　以下をファイル 
10:32:51.747 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:32:51.801 [main] DEBUG io.github.longfish801 - text call: clmapSample/sample.groovy
10:32:51.852 [main] DEBUG io.github.longfish801 - text call: として保存したとします。
10:32:51.900 [main] DEBUG io.github.longfish801 - line call
10:32:51.952 [main] DEBUG io.github.longfish801 - text call: 　groovyコマンドで実行すると assertに成功します。
10:32:51.999 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:32:52.050 [main] DEBUG io.github.longfish801 - para call
10:32:52.099 [main] DEBUG io.github.longfish801 - line call
10:32:52.154 [main] DEBUG io.github.longfish801 - text call: @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/')
10:32:52.208 [main] DEBUG io.github.longfish801 - line call
10:32:52.262 [main] DEBUG io.github.longfish801 - text call: @Grab('io.github.longfish801:yakumo:0.1.00')
10:32:52.311 [main] DEBUG io.github.longfish801 - line call
10:32:52.365 [main] DEBUG io.github.longfish801 - text call: @GrabExclude('org.codehaus.groovy:groovy-all')
10:32:52.416 [main] DEBUG io.github.longfish801 - para call
10:32:52.466 [main] DEBUG io.github.longfish801 - line call
10:32:52.520 [main] DEBUG io.github.longfish801 - text call: import io.github.longfish801.yakumo.clmap.Clmap;
10:32:52.570 [main] DEBUG io.github.longfish801 - para call
10:32:52.620 [main] DEBUG io.github.longfish801 - line call
10:32:52.674 [main] DEBUG io.github.longfish801 - text call: Clmap clmap = new Clmap(new File('sample.tpac'));
10:32:52.730 [main] DEBUG io.github.longfish801 - para call
10:32:52.778 [main] DEBUG io.github.longfish801 - line call
10:32:52.832 [main] DEBUG io.github.longfish801 - text call: assert 'Hello, World!' == clmap.cl('map1').call('World');
10:32:52.880 [main] DEBUG io.github.longfish801 - line call
10:32:52.934 [main] DEBUG io.github.longfish801 - text call: assert 'Hello, world!' == clmap.cl('map1#key1').call('World');
10:32:52.982 [main] DEBUG io.github.longfish801 - line call
10:32:53.036 [main] DEBUG io.github.longfish801 - text call: assert 'Hello, WORLD!' == clmap.cl('map1#key2').call('World');
10:32:53.085 [main] DEBUG io.github.longfish801 - line call
10:32:53.140 [main] DEBUG io.github.longfish801 - text call: assert 'HELLO, WORLD!' == clmap.cl('map1#key3').call('DUMMY');
10:32:53.194 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:32:53.245 [main] DEBUG io.github.longfish801 - para call
10:32:53.302 [main] DEBUG io.github.longfish801 - line call
10:32:53.357 [main] DEBUG io.github.longfish801 - text call: 宣言
10:32:53.406 [main] DEBUG io.github.longfish801 - para call
10:32:53.455 [main] DEBUG io.github.longfish801 - line call
10:32:53.508 [main] DEBUG io.github.longfish801 - text call: 　先頭に宣言をひとつ持ちます。
10:32:53.557 [main] DEBUG io.github.longfish801 - line call
10:32:53.611 [main] DEBUG io.github.longfish801 - text call: 　タグ名は「clmap」です。
10:32:53.659 [main] DEBUG io.github.longfish801 - line call
10:32:53.712 [main] DEBUG io.github.longfish801 - text call: 　スペース区切りで任意の名前を付与してください。名前は省略可です。
10:32:53.761 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:32:53.812 [main] DEBUG io.github.longfish801 - para call
10:32:53.869 [main] DEBUG io.github.longfish801 - line call
10:32:53.924 [main] DEBUG io.github.longfish801 - text call: #! clmap テスト
10:32:53.979 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:32:54.030 [main] DEBUG io.github.longfish801 - para call
10:32:54.079 [main] DEBUG io.github.longfish801 - line call
10:32:54.132 [main] DEBUG io.github.longfish801 - text call: mapとclosure
10:32:54.179 [main] DEBUG io.github.longfish801 - para call
10:32:54.229 [main] DEBUG io.github.longfish801 - line call
10:32:54.286 [main] DEBUG io.github.longfish801 - text call: 　親要素として mapを複数指定できます。
10:32:54.336 [main] DEBUG io.github.longfish801 - line call
10:32:54.397 [main] DEBUG io.github.longfish801 - text call: 　mapには名前を付与してください。ひとつだけ省略可です。
10:32:54.445 [main] DEBUG io.github.longfish801 - para call
10:32:54.493 [main] DEBUG io.github.longfish801 - line call
10:32:54.547 [main] DEBUG io.github.longfish801 - text call: 　mapにはひとつだけ子要素 argsを指定します。
10:32:54.596 [main] DEBUG io.github.longfish801 - line call
10:32:54.649 [main] DEBUG io.github.longfish801 - text call: 　argsにはクロージャの引数を指定します。引数が無い場合は省略できます。
10:32:54.697 [main] DEBUG io.github.longfish801 - line call
10:32:54.750 [main] DEBUG io.github.longfish801 - text call: 　引数には暗黙で最後に Clmap clmap, ConfigObject configを付与します。
10:32:54.799 [main] DEBUG io.github.longfish801 - line call
10:32:54.853 [main] DEBUG io.github.longfish801 - text call: 　変数clmapで、同じクロージャマップに定義された他のクロージャを呼ぶことができます。
10:32:54.902 [main] DEBUG io.github.longfish801 - line call
10:32:54.964 [main] DEBUG io.github.longfish801 - text call: 　変数configで、クロージャ間の値の受け渡しができます。
10:32:55.012 [main] DEBUG io.github.longfish801 - para call
10:32:55.063 [main] DEBUG io.github.longfish801 - line call
10:32:55.115 [main] DEBUG io.github.longfish801 - text call: 　mapには複数の closureを定義できます。
10:32:55.163 [main] DEBUG io.github.longfish801 - line call
10:32:55.214 [main] DEBUG io.github.longfish801 - text call: 　ここにクロージャの処理を記述します。
10:32:55.263 [main] DEBUG io.github.longfish801 - line call
10:32:55.315 [main] DEBUG io.github.longfish801 - text call: 　closureには名前を指定します。ひとつだけ省略可です。
10:32:55.363 [main] DEBUG io.github.longfish801 - para call
10:32:55.412 [main] DEBUG io.github.longfish801 - line call
10:32:55.465 [main] DEBUG io.github.longfish801 - text call: 　同じ mapに属するクロージャは引数の型をすべて同じにする必要があることに注意してください。
10:32:55.526 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:32:55.576 [main] DEBUG io.github.longfish801 - para call
10:32:55.626 [main] DEBUG io.github.longfish801 - line call
10:32:55.680 [main] DEBUG io.github.longfish801 - text call: dec, prefix, suffix
10:32:55.728 [main] DEBUG io.github.longfish801 - para call
10:32:55.777 [main] DEBUG io.github.longfish801 - line call
10:32:55.830 [main] DEBUG io.github.longfish801 - text call: 　親要素、子要素それぞれに dec, prefix, suffixを指定できます。
10:32:55.878 [main] DEBUG io.github.longfish801 - para call
10:32:55.928 [main] DEBUG io.github.longfish801 - line call
10:32:55.982 [main] DEBUG io.github.longfish801 - text call: 　decに記述したテキストは、クロージャが開始する前の箇所に使用します。
10:32:56.031 [main] DEBUG io.github.longfish801 - line call
10:32:56.094 [main] DEBUG io.github.longfish801 - text call: 　たとえば import文の記述に利用してください。
10:32:56.143 [main] DEBUG io.github.longfish801 - line call
10:32:56.197 [main] DEBUG io.github.longfish801 - text call: 　親要素に指定した dec、子要素に指定した decの順番となります。
10:32:56.245 [main] DEBUG io.github.longfish801 - para call
10:32:56.293 [main] DEBUG io.github.longfish801 - line call
10:32:56.344 [main] DEBUG io.github.longfish801 - text call: 　prefixに記述したテキストは、closureに記述した処理よりも前に付与されます。
10:32:56.392 [main] DEBUG io.github.longfish801 - line call
10:32:56.444 [main] DEBUG io.github.longfish801 - text call: 　子要素に指定した prefix、親要素に指定した prefixの順番となります。
10:32:56.492 [main] DEBUG io.github.longfish801 - para call
10:32:56.540 [main] DEBUG io.github.longfish801 - line call
10:32:56.592 [main] DEBUG io.github.longfish801 - text call: 　suffixに記述したテキストは、closureに記述した処理よりも後に付与されます。
10:32:56.651 [main] DEBUG io.github.longfish801 - line call
10:32:56.703 [main] DEBUG io.github.longfish801 - text call: 　親要素に指定した suffix、子要素に指定した suffixの順番となります。
10:32:56.750 [main] DEBUG io.github.longfish801 - para call
10:32:56.799 [main] DEBUG io.github.longfish801 - line call
10:32:56.851 [main] DEBUG io.github.longfish801 - text call: 　クロージャマップのサンプルを以下に示します。
10:32:56.899 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:32:56.949 [main] DEBUG io.github.longfish801 - para call
10:32:56.998 [main] DEBUG io.github.longfish801 - line call
10:32:57.052 [main] DEBUG io.github.longfish801 - text call: #! clmap テスト
10:32:57.100 [main] DEBUG io.github.longfish801 - line call
10:32:57.155 [main] DEBUG io.github.longfish801 - text call: ## dec
10:32:57.221 [main] DEBUG io.github.longfish801 - line call
10:32:57.277 [main] DEBUG io.github.longfish801 - text call: 	import org.apache.commons.lang3.StringUtils;
10:32:57.334 [main] DEBUG io.github.longfish801 - line call
10:32:57.423 [main] DEBUG io.github.longfish801 - text call: ## prefix
10:32:57.496 [main] DEBUG io.github.longfish801 - line call
10:32:57.584 [main] DEBUG io.github.longfish801 - text call: 	println 'BGN HERE';
10:32:57.700 [main] DEBUG io.github.longfish801 - line call
10:32:57.780 [main] DEBUG io.github.longfish801 - text call: ## suffix
10:32:57.858 [main] DEBUG io.github.longfish801 - line call
10:32:57.924 [main] DEBUG io.github.longfish801 - text call: 	println 'END HERE';
10:32:57.986 [main] DEBUG io.github.longfish801 - para call
10:32:58.057 [main] DEBUG io.github.longfish801 - line call
10:32:58.134 [main] DEBUG io.github.longfish801 - text call: ## map map1
10:32:58.222 [main] DEBUG io.github.longfish801 - line call
10:32:58.291 [main] DEBUG io.github.longfish801 - text call: # args
10:32:58.356 [main] DEBUG io.github.longfish801 - line call
10:32:58.420 [main] DEBUG io.github.longfish801 - text call: 	String yourName
10:32:58.477 [main] DEBUG io.github.longfish801 - line call
10:32:58.539 [main] DEBUG io.github.longfish801 - text call: # dec
10:32:58.589 [main] DEBUG io.github.longfish801 - line call
10:32:58.649 [main] DEBUG io.github.longfish801 - text call: 	String cmnString = 'This is';
10:32:58.715 [main] DEBUG io.github.longfish801 - line call
10:32:58.770 [main] DEBUG io.github.longfish801 - text call: # prefix
10:32:58.821 [main] DEBUG io.github.longfish801 - line call
10:32:58.877 [main] DEBUG io.github.longfish801 - text call: 	String result = '';
10:32:58.925 [main] DEBUG io.github.longfish801 - line call
10:32:58.981 [main] DEBUG io.github.longfish801 - text call: # suffix
10:32:59.030 [main] DEBUG io.github.longfish801 - line call
10:32:59.085 [main] DEBUG io.github.longfish801 - text call: 	return result;
10:32:59.134 [main] DEBUG io.github.longfish801 - para call
10:32:59.182 [main] DEBUG io.github.longfish801 - line call
10:32:59.248 [main] DEBUG io.github.longfish801 - text call: # closure key1
10:32:59.296 [main] DEBUG io.github.longfish801 - line call
10:32:59.351 [main] DEBUG io.github.longfish801 - text call: 	result = StringUtils.trim("   ${cmnString} ${yourName}.   ");
10:32:59.398 [main] DEBUG io.github.longfish801 - para call
10:32:59.448 [main] DEBUG io.github.longfish801 - line call
10:32:59.500 [main] DEBUG io.github.longfish801 - text call: 　上記のクロージャマップからコンビキー「map1#key1」で参照されるクロージャのコードは以下のとおりです。
10:32:59.547 [main] DEBUG io.github.longfish801 - line call
10:32:59.598 [main] DEBUG io.github.longfish801 - text call: 　読みやすいよう整形しています。
10:32:59.646 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:32:59.695 [main] DEBUG io.github.longfish801 - para call
10:32:59.744 [main] DEBUG io.github.longfish801 - line call
10:32:59.810 [main] DEBUG io.github.longfish801 - text call: import io.github.longfish801.yakumo.clmap.Clmap;
10:32:59.857 [main] DEBUG io.github.longfish801 - line call
10:32:59.911 [main] DEBUG io.github.longfish801 - text call: import org.apache.commons.lang3.StringUtils;
10:32:59.960 [main] DEBUG io.github.longfish801 - para call
10:33:00.009 [main] DEBUG io.github.longfish801 - line call
10:33:00.064 [main] DEBUG io.github.longfish801 - text call: String cmnString = 'This is';
10:33:00.114 [main] DEBUG io.github.longfish801 - para call
10:33:00.162 [main] DEBUG io.github.longfish801 - line call
10:33:00.215 [main] DEBUG io.github.longfish801 - text call: { String yourName, Clmap clmap ->
10:33:00.263 [main] DEBUG io.github.longfish801 - line call
10:33:00.317 [main] DEBUG io.github.longfish801 - text call: 	println 'BGN HERE';
10:33:00.376 [main] DEBUG io.github.longfish801 - line call
10:33:00.431 [main] DEBUG io.github.longfish801 - text call: 	String result = '';
10:33:00.478 [main] DEBUG io.github.longfish801 - line call
10:33:00.539 [main] DEBUG io.github.longfish801 - text call: 	result = StringUtils.trim("   ${cmnString} ${yourName}.   ");
10:33:00.587 [main] DEBUG io.github.longfish801 - line call
10:33:00.640 [main] DEBUG io.github.longfish801 - text call: 	println 'END HERE';
10:33:00.688 [main] DEBUG io.github.longfish801 - line call
10:33:00.741 [main] DEBUG io.github.longfish801 - text call: 	return result;
10:33:00.789 [main] DEBUG io.github.longfish801 - line call
10:33:00.842 [main] DEBUG io.github.longfish801 - text call: }
10:33:00.901 [main] DEBUG io.github.longfish801 - para call
10:33:00.949 [main] DEBUG io.github.longfish801 - line call
10:33:01.001 [main] DEBUG io.github.longfish801 - text call: 以上
10:33:01.095 [main] DEBUG io.github.longfish801 - para call
10:33:01.145 [main] DEBUG io.github.longfish801 - line call
10:33:01.196 [main] DEBUG io.github.longfish801 - text call: Clmap記法
10:33:01.295 [main] DEBUG io.github.longfish801 - para call
10:33:01.345 [main] DEBUG io.github.longfish801 - line call
10:33:01.397 [main] DEBUG io.github.longfish801 - text call: 概要
10:33:01.456 [main] DEBUG io.github.longfish801 - para call
10:33:01.524 [main] DEBUG io.github.longfish801 - line call
10:33:01.577 [main] DEBUG io.github.longfish801 - text call: サンプル
10:33:01.624 [main] DEBUG io.github.longfish801 - para call
10:33:01.675 [main] DEBUG io.github.longfish801 - line call
10:33:01.727 [main] DEBUG io.github.longfish801 - text call: 宣言
10:33:01.776 [main] DEBUG io.github.longfish801 - para call
10:33:01.825 [main] DEBUG io.github.longfish801 - line call
10:33:01.877 [main] DEBUG io.github.longfish801 - text call: mapとclosure
10:33:01.925 [main] DEBUG io.github.longfish801 - para call
10:33:01.975 [main] DEBUG io.github.longfish801 - line call
10:33:02.040 [main] DEBUG io.github.longfish801 - text call: dec, prefix, suffix
10:33:02.094 [Thread-29] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行開始 key=washscr#BLtxt文書へ整形
10:33:02.170 [ForkJoinPool-13-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#箇条書き
10:33:02.170 [ForkJoinPool-13-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY reprex#各種置換
10:33:02.211 [ForkJoinPool-14-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY replace#エスケープ
10:33:02.241 [ForkJoinPool-15-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#表
10:33:02.263 [ForkJoinPool-16-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#コラムを整形
10:33:02.284 [ForkJoinPool-17-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#タグ付きコラムを整形
10:33:02.284 [ForkJoinPool-18-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY slice#空白行区切り
10:33:02.284 [ForkJoinPool-18-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#BLエスケープ
10:33:02.284 [ForkJoinPool-18-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#表
10:33:02.285 [ForkJoinPool-18-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#タグ付きコラム
10:33:02.285 [ForkJoinPool-18-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#コラム
10:33:02.285 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【＃タイトル】BLtxt変換]
10:33:02.304 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■概要]
10:33:02.351 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＃タイトル】BLtxt変換]
10:33:02.355 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　yakumoは変換名「_bltxt」（BLtxt変換）を用意しています。, 　Washスクリプトでテキストを BLtxt記法に変換します。, 　Washスクリプトによる処理内容について、以下に説明します。]
10:33:02.390 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】概要]
10:33:02.394 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■行タグ／行範囲タグへ整形, □見出し]
10:33:02.430 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　yakumoは変換名「_bltxt」（BLtxt変換）を用意しています。, 　Washスクリプトでテキストを BLtxt記法に変換します。, 　Washスクリプトによる処理内容について、以下に説明します。]
10:33:02.434 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　行頭に全角の四角（■、□）があれば、見出しとみなします。]
10:33:02.470 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】行タグ／行範囲タグへ整形, 【＝見出し：3】見出し]
10:33:02.474 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, ■カレーの作り方, □材料の準備, ＃----- コラム：テキスト -----]
10:33:02.510 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　行頭に全角の四角（■、□）があれば、見出しとみなします。]
10:33:02.514 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【＝見出し：2】カレーの作り方, 【＝見出し：3】材料の準備, ＃----- コラム：BLtxt文書 -----]
10:33:02.533 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□小見出し]
10:33:02.534 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, ■カレーの作り方, □材料の準備, ＃----- コラム：テキスト -----]
10:33:02.566 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　行頭に下向き三角（▼）があれば、小見出しとみなします。]
10:33:02.603 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, ▼巨大数の歴史, ＃----- コラム：テキスト -----]
10:33:02.621 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】小見出し]
10:33:02.645 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【＝小見出し】巨大数の歴史, ＃----- コラム：BLtxt文書 -----]
10:33:02.674 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, ■カレーの作り方, □材料の準備, ----- コラム：テキスト -----]
10:33:02.695 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□箇条書き]
10:33:02.714 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　行頭に下向き三角（▼）があれば、小見出しとみなします。]
10:33:02.714 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【＝見出し：2】カレーの作り方, 【＝見出し：3】材料の準備, ＃----- コラム：BLtxt文書 -----]
10:33:02.715 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, ▼巨大数の歴史, ＃----- コラム：テキスト -----]
10:33:02.732 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　箇条書きには順序あり、順序なし、項目説明の三種類があります。, 　箇条書きの前後には空行を入れてください。, 　順序あり、順序なし、項目説明は混在させることができます。, 　ただし、インデントが同じ高さで混在させることはできません。]
10:33:02.768 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】箇条書き]
10:33:02.786 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【＝見出し￥：2￥】カレーの作り方, ￥【＝見出し￥：3￥】材料の準備, ----- コラム：BLtxt文書 -----]
10:33:02.803 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　一文字目に中黒（・）があれば、順序なしの箇条書きとみなします。, 　一文字目に波線（～）があれば、順序ありの箇条書きとみなします。, 　インデントされた行で、先頭一文字目が矢印（→）ならば項目への備考とみなします。, 　タブ、半角／全角スペースでインデントすることで、入れ子にできます。, 　インデントを下げるときは、それより前に記述した項目とインデントの大きさを合わせてください。, 　タグ付け時に、先頭のインデントを削除します。]
10:33:02.838 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, ・じゃがいも, ・ニンジン, ・玉ねぎ, 　　→刻むときは注意。, 　　　涙がでます。, ・カレー粉, 　　～ジャワカレー, 　　～バーモンドカレー, ＃----- コラム：テキスト -----]
10:33:02.872 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　箇条書きには順序あり、順序なし、項目説明の三種類があります。, 　箇条書きの前後には空行を入れてください。, 　順序あり、順序なし、項目説明は混在させることができます。, 　ただし、インデントが同じ高さで混在させることはできません。]
10:33:02.905 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－箇条書き：順序なし】, 【－項目】, じゃがいも, 【項目－】, 【－項目】, ニンジン, 【項目－】, 【－項目】, 玉ねぎ, 【－箇条書き：説明】, 【－説明】, 刻むときは注意。, 涙がでます。, 【説明－】, 【箇条書き－】, 【項目－】, 【－項目】, カレー粉, 【－箇条書き：順序あり】, 【－項目】, ジャワカレー, 【項目－】, 【－項目】, バーモンドカレー, 【項目－】, 【箇条書き－】, 【項目－】, 【箇条書き－】, ＃----- コラム：BLtxt文書 -----]
10:33:02.922 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, ▼巨大数の歴史, ----- コラム：テキスト -----]
10:33:02.939 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　一行目の一文字目に波線（～）があれば、項目説明の箇条書きとみなします。, 　説明は行頭に矢印（→）を記述します。必ずインデントを入れてください。]
10:33:02.958 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　一文字目に中黒（・）があれば、順序なしの箇条書きとみなします。, 　一文字目に波線（～）があれば、順序ありの箇条書きとみなします。, 　インデントされた行で、先頭一文字目が矢印（→）ならば項目への備考とみなします。, 　タブ、半角／全角スペースでインデントすることで、入れ子にできます。, 　インデントを下げるときは、それより前に記述した項目とインデントの大きさを合わせてください。, 　タグ付け時に、先頭のインデントを削除します。]
10:33:02.959 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【＝小見出し】巨大数の歴史, ＃----- コラム：BLtxt文書 -----]
10:33:02.959 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, ・じゃがいも, ・ニンジン, ・玉ねぎ, 　　→刻むときは注意。, 　　　涙がでます。, ・カレー粉, 　　～ジャワカレー, 　　～バーモンドカレー, ＃----- コラム：テキスト -----]
10:33:02.972 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, －ターメリック, 　→香辛料の一種です。, ＃----- コラム：テキスト -----]
10:33:03.013 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－箇条書き：対象】, 【－対象】, ターメリック, 【対象－】, 【－箇条書き：説明】, 【－説明】, 香辛料の一種です。, 【説明－】, 【箇条書き－】, 【箇条書き－】, ＃----- コラム：BLtxt文書 -----]
10:33:03.032 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　一行目の一文字目に波線（～）があれば、項目説明の箇条書きとみなします。, 　説明は行頭に矢印（→）を記述します。必ずインデントを入れてください。]
10:33:03.032 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－箇条書き：順序なし】, 【－項目】, じゃがいも, 【項目－】, 【－項目】, ニンジン, 【項目－】, 【－項目】, 玉ねぎ, 【－箇条書き：説明】, 【－説明】, 刻むときは注意。, 涙がでます。, 【説明－】, 【箇条書き－】, 【項目－】, 【－項目】, カレー粉, 【－箇条書き：順序あり】, 【－項目】, ジャワカレー, 【項目－】, 【－項目】, バーモンドカレー, 【項目－】, 【箇条書き－】, 【項目－】, 【箇条書き－】, ＃----- コラム：BLtxt文書 -----]
10:33:03.049 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□表]
10:33:03.049 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, －ターメリック, 　→香辛料の一種です。, ＃----- コラム：テキスト -----]
10:33:03.067 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【＝小見出し￥】巨大数の歴史, ----- コラム：BLtxt文書 -----]
10:33:03.084 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　五つ以上連続するハイフン(-)で文字列「表」を挟んだ区切り行で囲まれた範囲を、表とみなします。]
10:33:03.121 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　セル区切りに半角スペースやタブを使います。, 　半角スペースやタブの連続はすべて取り除きます。, 　見出しには先頭に半角アスタリスク(*)を付与してください。, 　セルの内容を空文字にしたり、改行を含む文字列にすることはできません。, 　セルの結合や分割には対応していません。]
10:33:03.140 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】表]
10:33:03.157 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, ----- 表 -----, *No.	*産物	*産地, 1		みかん	愛媛, 2		茶		静岡, ----- 表 -----, ＃----- コラム：テキスト -----]
10:33:03.175 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, ・じゃがいも, ・ニンジン, ・玉ねぎ, 　　→刻むときは注意。, 　　　涙がでます。, ・カレー粉, 　　～ジャワカレー, 　　～バーモンドカレー, ----- コラム：テキスト -----]
10:33:03.193 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－表】, 【－行】, 【＝見出しセル】No., 【＝見出しセル】産物, 【＝見出しセル】産地, 【行－】, 【－行】, 【＝セル】1, 【＝セル】みかん, 【＝セル】愛媛, 【行－】, 【－行】, 【＝セル】2, 【＝セル】茶, 【＝セル】静岡, 【行－】, 【表－】, ＃----- コラム：BLtxt文書 -----]
10:33:03.212 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　五つ以上連続するハイフン(-)で文字列「表」を挟んだ区切り行で囲まれた範囲を、表とみなします。]
10:33:03.227 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　セル区切りに半角パイプ（|）を使うこともできます。, 　必ず行頭、行末に半角パイプを記述してください。, 　こちらはセルの内容を空文字にすることができます。, 　セルの結合や分割には対応していません。, 　値の前後に半角スペースやタブの連続があれば取り除きます。]
10:33:03.266 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, ----- 表 -----, |*名前		|ミケ	|ボギー		|, |*種類		|三毛猫	|コーギー	|, |*首輪の色	|		|赤			|, ----- 表 -----, ＃----- コラム：テキスト -----]
10:33:03.286 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　セル区切りに半角スペースやタブを使います。, 　半角スペースやタブの連続はすべて取り除きます。, 　見出しには先頭に半角アスタリスク(*)を付与してください。, 　セルの内容を空文字にしたり、改行を含む文字列にすることはできません。, 　セルの結合や分割には対応していません。]
10:33:03.286 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－箇条書き：対象】, 【－対象】, ターメリック, 【対象－】, 【－箇条書き：説明】, 【－説明】, 香辛料の一種です。, 【説明－】, 【箇条書き－】, 【箇条書き－】, ＃----- コラム：BLtxt文書 -----]
10:33:03.286 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, ----- 表 -----, *No.	*産物	*産地, 1		みかん	愛媛, 2		茶		静岡, ----- 表 -----, ＃----- コラム：テキスト -----]
10:33:03.303 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－表】, 【－行】, 【＝見出しセル】名前, 【＝セル】ミケ, 【＝セル】ボギー, 【行－】, 【－行】, 【＝見出しセル】種類, 【＝セル】三毛猫, 【＝セル】コーギー, 【行－】, 【－行】, 【＝見出しセル】首輪の色, 【＝セル】, 【＝セル】赤, 【行－】, 【表－】, ＃----- コラム：BLtxt文書 -----]
10:33:03.321 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－箇条書き￥：順序なし￥】, ￥【－項目￥】, じゃがいも, ￥【項目－￥】, ￥【－項目￥】, ニンジン, ￥【項目－￥】, ￥【－項目￥】, 玉ねぎ, ￥【－箇条書き￥：説明￥】, ￥【－説明￥】, 刻むときは注意。, 涙がでます。, ￥【説明－￥】, ￥【箇条書き－￥】, ￥【項目－￥】, ￥【－項目￥】, カレー粉, ￥【－箇条書き￥：順序あり￥】, ￥【－項目￥】, ジャワカレー, ￥【項目－￥】, ￥【－項目￥】, バーモンドカレー, ￥【項目－￥】, ￥【箇条書き－￥】, ￥【項目－￥】, ￥【箇条書き－￥】, ----- コラム：BLtxt文書 -----]
10:33:03.339 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□コラム]
10:33:03.359 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　セル区切りに半角パイプ（|）を使うこともできます。, 　必ず行頭、行末に半角パイプを記述してください。, 　こちらはセルの内容を空文字にすることができます。, 　セルの結合や分割には対応していません。, 　値の前後に半角スペースやタブの連続があれば取り除きます。]
10:33:03.360 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－表】, 【－行】, 【＝見出しセル】No., 【＝見出しセル】産物, 【＝見出しセル】産地, 【行－】, 【－行】, 【＝セル】1, 【＝セル】みかん, 【＝セル】愛媛, 【行－】, 【－行】, 【＝セル】2, 【＝セル】茶, 【＝セル】静岡, 【行－】, 【表－】, ＃----- コラム：BLtxt文書 -----]
10:33:03.360 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, ----- 表 -----, |*名前		|ミケ	|ボギー		|, |*種類		|三毛猫	|コーギー	|, |*首輪の色	|		|赤			|, ----- 表 -----, ＃----- コラム：テキスト -----]
10:33:03.376 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　五つ以上連続するハイフン(-)による区切り行で囲まれた範囲を、コラムとみなします。]
10:33:03.427 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, -----, 　日本人の四割は血液型がＯ型です。, -----, ＃----- コラム：テキスト -----]
10:33:03.444 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】コラム]
10:33:03.461 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－コラム】, 　日本人の四割は血液型がＯ型です。, 【コラム－】, ＃----- コラム：BLtxt文書 -----]
10:33:03.479 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, －ターメリック, 　→香辛料の一種です。, ----- コラム：テキスト -----]
10:33:03.498 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　五つ以上連続するハイフン(-)で任意の文字列を囲むと、行範囲タグのタグ名にすることができます。]
10:33:03.517 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　五つ以上連続するハイフン(-)による区切り行で囲まれた範囲を、コラムとみなします。]
10:33:03.517 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－表】, 【－行】, 【＝見出しセル】名前, 【＝セル】ミケ, 【＝セル】ボギー, 【行－】, 【－行】, 【＝見出しセル】種類, 【＝セル】三毛猫, 【＝セル】コーギー, 【行－】, 【－行】, 【＝見出しセル】首輪の色, 【＝セル】, 【＝セル】赤, 【行－】, 【表－】, ＃----- コラム：BLtxt文書 -----]
10:33:03.518 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, -----, 　日本人の四割は血液型がＯ型です。, -----, ＃----- コラム：テキスト -----]
10:33:03.524 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, ----- 引用 -----, 　吾輩は猫である。, 【＝引用元】夏目漱石『吾輩は猫である』, ----- 引用 -----, ＃----- コラム：テキスト -----]
10:33:03.559 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－引用】, 　吾輩は猫である。, 【＝引用元】夏目漱石『吾輩は猫である』, 【引用－】, ＃----- コラム：BLtxt文書 -----]
10:33:03.589 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　五つ以上連続するハイフン(-)で任意の文字列を囲むと、行範囲タグのタグ名にすることができます。]
10:33:03.590 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－コラム】, 　日本人の四割は血液型がＯ型です。, 【コラム－】, ＃----- コラム：BLtxt文書 -----]
10:33:03.598 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　小見出しを行範囲開始タグの第一属性に記述することができます。, 　五つ以上連続するハイフン(-)で囲む文字列に全角コロン（：）を含めてください。, 　全角コロンの前に行範囲タグ名を、全角コロンの後に小見出し名をつけます。, 　文字列「コラム：」の前と、小見出し名の後に半角スペースをひとつ入れてください。]
10:33:03.598 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, ----- 引用 -----, 　吾輩は猫である。, 【＝引用元】夏目漱石『吾輩は猫である』, ----- 引用 -----, ＃----- コラム：テキスト -----]
10:33:03.627 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－箇条書き￥：対象￥】, ￥【－対象￥】, ターメリック, ￥【対象－￥】, ￥【－箇条書き￥：説明￥】, ￥【－説明￥】, 香辛料の一種です。, ￥【説明－￥】, ￥【箇条書き－￥】, ￥【箇条書き－￥】, ----- コラム：BLtxt文書 -----]
10:33:03.645 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, ----- 注意：中火とは -----, 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。, ----- 注意：中火とは -----, ＃----- コラム：テキスト -----]
10:33:03.682 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－注意：中火とは】, 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。, 【注意－】, ＃----- コラム：BLtxt文書 -----]
10:33:03.701 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　小見出しを行範囲開始タグの第一属性に記述することができます。, 　五つ以上連続するハイフン(-)で囲む文字列に全角コロン（：）を含めてください。, 　全角コロンの前に行範囲タグ名を、全角コロンの後に小見出し名をつけます。, 　文字列「コラム：」の前と、小見出し名の後に半角スペースをひとつ入れてください。]
10:33:03.701 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－引用】, 　吾輩は猫である。, 【＝引用元】夏目漱石『吾輩は猫である』, 【引用－】, ＃----- コラム：BLtxt文書 -----]
10:33:03.720 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　なお、これらコラムを入れ子にすることはできません。, 　入れ子を実現したい場合は行範囲タグを直接記述してください。]
10:33:03.720 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, ----- 注意：中火とは -----, 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。, ----- 注意：中火とは -----, ＃----- コラム：テキスト -----]
10:33:03.738 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, ----- 表 -----, *No.	*産物	*産地, 1		みかん	愛媛, 2		茶		静岡, ----- 表 -----, ----- コラム：テキスト -----]
10:33:03.756 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□BLエスケープ]
10:33:03.792 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　BLtxt記法上の特殊文字をエスケープします。, 　先頭が全角シャープ（＃）で始まる文字列で、エスケープ対象を囲みます。, 　前後に空行を設けてください。, 　変換後に全角シャープは削除しますが、その後にある文字列は残します。, 　全角シャープの直後に改行がある場合は、行自体を削除します。]
10:33:03.811 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　なお、これらコラムを入れ子にすることはできません。, 　入れ子を実現したい場合は行範囲タグを直接記述してください。]
10:33:03.829 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, ＃, 墨付きカッコが【強調：そのまま】表示されます。, ＃, ＃----- コラム：テキスト -----]
10:33:03.847 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－表￥】, ￥【－行￥】, ￥【＝見出しセル￥】No., ￥【＝見出しセル￥】産物, ￥【＝見出しセル￥】産地, ￥【行－￥】, ￥【－行￥】, ￥【＝セル￥】1, ￥【＝セル￥】みかん, ￥【＝セル￥】愛媛, ￥【行－￥】, ￥【－行￥】, ￥【＝セル￥】2, ￥【＝セル￥】茶, ￥【＝セル￥】静岡, ￥【行－￥】, ￥【表－￥】, ----- コラム：BLtxt文書 -----]
10:33:03.854 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 墨付きカッコが￥【強調￥：そのまま￥】表示されます。, ＃----- コラム：BLtxt文書 -----]
10:33:03.885 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】BLエスケープ]
10:33:03.892 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■文中タグ／文範囲タグへ整形, □リンク]
10:33:03.957 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　一番目の属性にリンクとして表示する文字列を、二番目の属性にリンク先アドレスを指定してください。, 　一番目の属性のみ指定した場合は、表示する文字列とリンク先アドレスを同じ値とみなします。]
10:33:03.987 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　BLtxt記法上の特殊文字をエスケープします。, 　先頭が全角シャープ（＃）で始まる文字列で、エスケープ対象を囲みます。, 　前後に空行を設けてください。, 　変換後に全角シャープは削除しますが、その後にある文字列は残します。, 　全角シャープの直後に改行がある場合は、行自体を削除します。]
10:33:03.988 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－注意：中火とは】, 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。, 【注意－】, ＃----- コラム：BLtxt文書 -----]
10:33:03.988 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, ＃]
10:33:03.988 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃, ＃----- コラム：テキスト -----]
10:33:03.997 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, 　詳しくは【リンク：ネット検索：https://www.google.co.jp/】してください。, 　【リンク：https://www.google.co.jp/】でネット検索できます。, ＃----- コラム：テキスト -----]
10:33:04.023 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, ----- 表 -----, |*名前		|ミケ	|ボギー		|, |*種類		|三毛猫	|コーギー	|, |*首輪の色	|		|赤			|, ----- 表 -----, ----- コラム：テキスト -----]
10:33:04.023 [ForkJoinPool-18-worker-2] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#表: [*No.	*産物	*産地, 1		みかん	愛媛, 2		茶		静岡]
10:33:04.030 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　詳しくは【｜リンク：https://www.google.co.jp/】ネット検索【リンク｜】してください。, 　【｜リンク：https://www.google.co.jp/】https://www.google.co.jp/【リンク｜】でネット検索できます。, ＃----- コラム：BLtxt文書 -----]
10:33:04.060 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】文中タグ／文範囲タグへ整形, 【＝見出し：3】リンク]
10:33:04.067 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　URLのみを記述した行は、そのリンク先アドレスに対してタグ付けします。]
10:33:04.107 [ForkJoinPool-15-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#表 :[【－表】, 【－行】, 【＝見出しセル】No., 【＝見出しセル】産物, 【＝見出しセル】産地, 【行－】, 【－行】, 【＝セル】1, 【＝セル】みかん, 【＝セル】愛媛, 【行－】, 【－行】, 【＝セル】2, 【＝セル】茶, 【＝セル】静岡, 【行－】, 【表－】]
10:33:04.158 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, https://www.google.co.jp/, ＃----- コラム：テキスト -----]
10:33:04.177 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　一番目の属性にリンクとして表示する文字列を、二番目の属性にリンク先アドレスを指定してください。, 　一番目の属性のみ指定した場合は、表示する文字列とリンク先アドレスを同じ値とみなします。]
10:33:04.177 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 墨付きカッコが￥【強調￥：そのまま￥】表示されます。, ＃----- コラム：BLtxt文書 -----]
10:33:04.178 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, 　詳しくは【リンク：ネット検索：https://www.google.co.jp/】してください。, 　【リンク：https://www.google.co.jp/】でネット検索できます。, ＃----- コラム：テキスト -----]
10:33:04.186 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【｜リンク：https://www.google.co.jp/】https://www.google.co.jp/【リンク｜】, ＃----- コラム：BLtxt文書 -----]
10:33:04.212 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－表￥】, ￥【－行￥】, ￥【＝見出しセル￥】名前, ￥【＝セル￥】ミケ, ￥【＝セル￥】ボギー, ￥【行－￥】, ￥【－行￥】, ￥【＝見出しセル￥】種類, ￥【＝セル￥】三毛猫, ￥【＝セル￥】コーギー, ￥【行－￥】, ￥【－行￥】, ￥【＝見出しセル￥】首輪の色, ￥【＝セル￥】, ￥【＝セル￥】赤, ￥【行－￥】, ￥【表－￥】, ----- コラム：BLtxt文書 -----]
10:33:04.218 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　全角括弧でリンク先アドレスを挟んだ箇所は、そのリンク先アドレスに対してタグ付けします。]
10:33:04.249 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　URLのみを記述した行は、そのリンク先アドレスに対してタグ付けします。]
10:33:04.249 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　詳しくは【｜リンク：https://www.google.co.jp/】ネット検索【リンク｜】してください。, 　【｜リンク：https://www.google.co.jp/】https://www.google.co.jp/【リンク｜】でネット検索できます。, ＃----- コラム：BLtxt文書 -----]
10:33:04.250 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, https://www.google.co.jp/, ＃----- コラム：テキスト -----]
10:33:04.256 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, 　Google（https://www.google.co.jp/）で検索しました。, ＃----- コラム：テキスト -----]
10:33:04.319 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　Google（【｜リンク：https://www.google.co.jp/】https://www.google.co.jp/【リンク｜】）で検索しました。, ＃----- コラム：BLtxt文書 -----]
10:33:04.339 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　全角括弧でリンク先アドレスを挟んだ箇所は、そのリンク先アドレスに対してタグ付けします。]
10:33:04.339 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【｜リンク：https://www.google.co.jp/】https://www.google.co.jp/【リンク｜】, ＃----- コラム：BLtxt文書 -----]
10:33:04.356 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□強調]
10:33:04.356 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, 　Google（https://www.google.co.jp/）で検索しました。, ＃----- コラム：テキスト -----]
10:33:04.374 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, -----, 　日本人の四割は血液型がＯ型です。, -----, ----- コラム：テキスト -----]
10:33:04.391 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, 　必ず最後に【強調：確認ボタン】をクリックしてください。, ＃----- コラム：テキスト -----]
10:33:04.427 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　必ず最後に【｜強調】確認ボタン【強調｜】をクリックしてください。, ＃----- コラム：BLtxt文書 -----]
10:33:04.447 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】強調]
10:33:04.447 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　Google（【｜リンク：https://www.google.co.jp/】https://www.google.co.jp/【リンク｜】）で検索しました。, ＃----- コラム：BLtxt文書 -----]
10:33:04.454 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□最強調]
10:33:04.454 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, 　必ず最後に【強調：確認ボタン】をクリックしてください。, ＃----- コラム：テキスト -----]
10:33:04.496 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－コラム￥】, 　日本人の四割は血液型がＯ型です。, ￥【コラム－￥】, ----- コラム：BLtxt文書 -----]
10:33:04.520 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, 　間違えて【最強調：自爆スイッチ】を押さないでください。, ＃----- コラム：テキスト -----]
10:33:04.563 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　間違えて【｜最強調】自爆スイッチ【最強調｜】を押さないでください。, ＃----- コラム：BLtxt文書 -----]
10:33:04.591 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】最強調]
10:33:04.591 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　必ず最後に【｜強調】確認ボタン【強調｜】をクリックしてください。, ＃----- コラム：BLtxt文書 -----]
10:33:04.601 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□ぼかし]
10:33:04.601 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, 　間違えて【最強調：自爆スイッチ】を押さないでください。, ＃----- コラム：テキスト -----]
10:33:04.629 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, ----- 引用 -----, 　吾輩は猫である。, ￥【＝引用元￥】夏目漱石『吾輩は猫である』, ----- 引用 -----, ----- コラム：テキスト -----]
10:33:04.636 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, 　もちろん本当【ぼかし：かもしれない】ですよ。, ＃----- コラム：テキスト -----]
10:33:04.669 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　もちろん本当【｜ぼかし】かもしれない【ぼかし｜】ですよ。, ＃----- コラム：BLtxt文書 -----]
10:33:04.700 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】ぼかし]
10:33:04.700 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　間違えて【｜最強調】自爆スイッチ【最強調｜】を押さないでください。, ＃----- コラム：BLtxt文書 -----]
10:33:04.707 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□訂正]
10:33:04.707 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, 　もちろん本当【ぼかし：かもしれない】ですよ。, ＃----- コラム：テキスト -----]
10:33:04.734 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－引用￥】, 　吾輩は猫である。, ￥【＝引用元￥】夏目漱石『吾輩は猫である』, ￥【引用－￥】, ----- コラム：BLtxt文書 -----]
10:33:04.742 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, 　富士山の標高は【訂正：３７７７メートル】３７７６メートルです。, ＃----- コラム：テキスト -----]
10:33:04.775 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　富士山の標高は【｜訂正】３７７７メートル【訂正｜】３７７６メートルです。, ＃----- コラム：BLtxt文書 -----]
10:33:04.806 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】訂正]
10:33:04.806 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　もちろん本当【｜ぼかし】かもしれない【ぼかし｜】ですよ。, ＃----- コラム：BLtxt文書 -----]
10:33:04.813 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□傍点]
10:33:04.813 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, 　富士山の標高は【訂正：３７７７メートル】３７７６メートルです。, ＃----- コラム：テキスト -----]
10:33:04.842 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, ----- 注意￥：中火とは -----, 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。, ----- 注意￥：中火とは -----, ----- コラム：テキスト -----]
10:33:04.849 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, 　まだ【傍点：午前三時】じゃないか。, ＃----- コラム：テキスト -----]
10:33:04.882 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　まだ【｜傍点】午前三時【傍点｜】じゃないか。, ＃----- コラム：BLtxt文書 -----]
10:33:04.913 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】傍点]
10:33:04.913 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　富士山の標高は【｜訂正】３７７７メートル【訂正｜】３７７６メートルです。, ＃----- コラム：BLtxt文書 -----]
10:33:04.920 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□縦中横]
10:33:04.921 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, 　まだ【傍点：午前三時】じゃないか。, ＃----- コラム：テキスト -----]
10:33:04.948 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－注意￥：中火とは￥】, 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。, ￥【注意－￥】, ----- コラム：BLtxt文書 -----]
10:33:04.955 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, 　シェイクスピア全集の第【縦中横：10】巻に記述されています。, ＃----- コラム：テキスト -----]
10:33:04.990 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　シェイクスピア全集の第【｜縦中横】10【縦中横｜】巻に記述されています。, ＃----- コラム：BLtxt文書 -----]
10:33:05.020 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】縦中横]
10:33:05.020 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　まだ【｜傍点】午前三時【傍点｜】じゃないか。, ＃----- コラム：BLtxt文書 -----]
10:33:05.054 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□備考]
10:33:05.054 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, 　シェイクスピア全集の第【縦中横：10】巻に記述されています。, ＃----- コラム：テキスト -----]
10:33:05.068 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----]
10:33:05.092 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, 　『乱れからくり』の作者は【備考：泡坂妻夫：泡は特殊文字】です。, ＃----- コラム：テキスト -----]
10:33:05.130 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　『乱れからくり』の作者は【｜備考：泡は特殊文字】泡坂妻夫【備考｜】です。, ＃----- コラム：BLtxt文書 -----]
10:33:05.150 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】備考]
10:33:05.151 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　シェイクスピア全集の第【｜縦中横】10【縦中横｜】巻に記述されています。, ＃----- コラム：BLtxt文書 -----]
10:33:05.167 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□ルビ]
10:33:05.167 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, 　『乱れからくり』の作者は【備考：泡坂妻夫：泡は特殊文字】です。, ＃----- コラム：テキスト -----]
10:33:05.184 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----]
10:33:05.202 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, 　【ルビ：出納：すいとう】係は言った。, ＃----- コラム：テキスト -----]
10:33:05.240 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】ルビ]
10:33:05.257 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　【｜ルビ：すいとう】出納【ルビ｜】係は言った。, ＃----- コラム：BLtxt文書 -----]
10:33:05.257 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　『乱れからくり』の作者は【｜備考：泡は特殊文字】泡坂妻夫【備考｜】です。, ＃----- コラム：BLtxt文書 -----]
10:33:05.274 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 墨付きカッコが￥￥￥【強調￥￥￥：そのまま￥￥￥】表示されます。, ----- コラム：BLtxt文書 -----]
10:33:05.291 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [以上]
10:33:05.292 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, 　【ルビ：出納：すいとう】係は言った。, ＃----- コラム：テキスト -----]
10:33:05.326 [ForkJoinPool-18-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 slice#空白行区切り
10:33:05.345 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, 　詳しくは￥【リンク￥：ネット検索￥：https://www.google.co.jp/￥】してください。, 　￥【リンク￥：https://www.google.co.jp/￥】でネット検索できます。, ----- コラム：テキスト -----]
10:33:05.368 [ForkJoinPool-13-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#箇条書き
10:33:05.368 [ForkJoinPool-13-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#箇条書き
10:33:05.368 [ForkJoinPool-13-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#箇条書き
10:33:05.368 [ForkJoinPool-13-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[以上]
10:33:05.368 [ForkJoinPool-13-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast reprex#各種置換
10:33:05.368 [ForkJoinPool-13-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate reprex#各種置換
10:33:05.369 [ForkJoinPool-13-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY reprex#各種置換
10:33:05.370 [ForkJoinPool-18-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY slice#空白行区切り
10:33:05.370 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　【｜ルビ：すいとう】出納【ルビ｜】係は言った。, ＃----- コラム：BLtxt文書 -----]
10:33:05.371 [ForkJoinPool-18-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#BLエスケープ
10:33:05.398 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　詳しくは￥【｜リンク￥：https://www.google.co.jp/￥】ネット検索￥【リンク｜￥】してください。, 　￥【｜リンク￥：https://www.google.co.jp/￥】https://www.google.co.jp/￥【リンク｜￥】でネット検索できます。, ----- コラム：BLtxt文書 -----]
10:33:05.440 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, https://www.google.co.jp/, ----- コラム：テキスト -----]
10:33:05.481 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【｜リンク￥：https://www.google.co.jp/￥】https://www.google.co.jp/￥【リンク｜￥】, ----- コラム：BLtxt文書 -----]
10:33:05.521 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, 　Google（https://www.google.co.jp/）で検索しました。, ----- コラム：テキスト -----]
10:33:05.561 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　Google（￥【｜リンク￥：https://www.google.co.jp/￥】https://www.google.co.jp/￥【リンク｜￥】）で検索しました。, ----- コラム：BLtxt文書 -----]
10:33:05.618 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, 　必ず最後に￥【強調￥：確認ボタン￥】をクリックしてください。, ----- コラム：テキスト -----]
10:33:05.665 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　必ず最後に￥【｜強調￥】確認ボタン￥【強調｜￥】をクリックしてください。, ----- コラム：BLtxt文書 -----]
10:33:05.708 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, 　間違えて￥【最強調￥：自爆スイッチ￥】を押さないでください。, ----- コラム：テキスト -----]
10:33:05.751 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　間違えて￥【｜最強調￥】自爆スイッチ￥【最強調｜￥】を押さないでください。, ----- コラム：BLtxt文書 -----]
10:33:05.793 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, 　もちろん本当￥【ぼかし￥：かもしれない￥】ですよ。, ----- コラム：テキスト -----]
10:33:05.833 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　もちろん本当￥【｜ぼかし￥】かもしれない￥【ぼかし｜￥】ですよ。, ----- コラム：BLtxt文書 -----]
10:33:05.875 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, 　富士山の標高は￥【訂正￥：３７７７メートル￥】３７７６メートルです。, ----- コラム：テキスト -----]
10:33:05.914 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　富士山の標高は￥【｜訂正￥】３７７７メートル￥【訂正｜￥】３７７６メートルです。, ----- コラム：BLtxt文書 -----]
10:33:05.954 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, 　まだ￥【傍点￥：午前三時￥】じゃないか。, ----- コラム：テキスト -----]
10:33:05.993 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　まだ￥【｜傍点￥】午前三時￥【傍点｜￥】じゃないか。, ----- コラム：BLtxt文書 -----]
10:33:06.044 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, 　シェイクスピア全集の第￥【縦中横￥：10￥】巻に記述されています。, ----- コラム：テキスト -----]
10:33:06.082 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　シェイクスピア全集の第￥【｜縦中横￥】10￥【縦中横｜￥】巻に記述されています。, ----- コラム：BLtxt文書 -----]
10:33:06.121 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, 　『乱れからくり』の作者は￥【備考￥：泡坂妻夫￥：泡は特殊文字￥】です。, ----- コラム：テキスト -----]
10:33:06.160 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　『乱れからくり』の作者は￥【｜備考￥：泡は特殊文字￥】泡坂妻夫￥【備考｜￥】です。, ----- コラム：BLtxt文書 -----]
10:33:06.198 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, 　￥【ルビ￥：出納￥：すいとう￥】係は言った。, ----- コラム：テキスト -----]
10:33:06.254 [ForkJoinPool-14-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　￥【｜ルビ￥：すいとう￥】出納￥【ルビ｜￥】係は言った。, ----- コラム：BLtxt文書 -----]
10:33:06.254 [ForkJoinPool-14-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast replace#エスケープ
10:33:06.254 [ForkJoinPool-14-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate replace#エスケープ
10:33:06.254 [ForkJoinPool-14-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY replace#エスケープ
10:33:06.255 [ForkJoinPool-18-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#BLエスケープ
10:33:06.255 [ForkJoinPool-18-worker-2] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#表: [|*名前		|ミケ	|ボギー		|, |*種類		|三毛猫	|コーギー	|, |*首輪の色	|		|赤			|]
10:33:06.255 [ForkJoinPool-18-worker-2] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#表
10:33:06.305 [ForkJoinPool-15-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#表 :[【－表】, 【－行】, 【＝見出しセル】名前, 【＝セル】ミケ, 【＝セル】ボギー, 【行－】, 【－行】, 【＝見出しセル】種類, 【＝セル】三毛猫, 【＝セル】コーギー, 【行－】, 【－行】, 【＝見出しセル】首輪の色, 【＝セル】, 【＝セル】赤, 【行－】, 【表－】]
10:33:06.306 [ForkJoinPool-15-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#表
10:33:06.306 [ForkJoinPool-15-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#表
10:33:06.306 [ForkJoinPool-15-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#表
10:33:06.308 [ForkJoinPool-18-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#表
10:33:06.309 [ForkJoinPool-18-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [　日本人の四割は血液型がＯ型です。]
10:33:06.309 [ForkJoinPool-18-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#コラム
10:33:06.309 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, ■カレーの作り方, □材料の準備, ----- コラム：テキスト -----]
10:33:06.310 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【＝見出し￥：2￥】カレーの作り方, ￥【＝見出し￥：3￥】材料の準備, ----- コラム：BLtxt文書 -----]
10:33:06.310 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, ▼巨大数の歴史, ----- コラム：テキスト -----]
10:33:06.311 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【＝小見出し￥】巨大数の歴史, ----- コラム：BLtxt文書 -----]
10:33:06.311 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, ・じゃがいも, ・ニンジン, ・玉ねぎ, 　　→刻むときは注意。, 　　　涙がでます。, ・カレー粉, 　　～ジャワカレー, 　　～バーモンドカレー, ----- コラム：テキスト -----]
10:33:06.312 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－箇条書き￥：順序なし￥】, ￥【－項目￥】, じゃがいも, ￥【項目－￥】, ￥【－項目￥】, ニンジン, ￥【項目－￥】, ￥【－項目￥】, 玉ねぎ, ￥【－箇条書き￥：説明￥】, ￥【－説明￥】, 刻むときは注意。, 涙がでます。, ￥【説明－￥】, ￥【箇条書き－￥】, ￥【項目－￥】, ￥【－項目￥】, カレー粉, ￥【－箇条書き￥：順序あり￥】, ￥【－項目￥】, ジャワカレー, ￥【項目－￥】, ￥【－項目￥】, バーモンドカレー, ￥【項目－￥】, ￥【箇条書き－￥】, ￥【項目－￥】, ￥【箇条書き－￥】, ----- コラム：BLtxt文書 -----]
10:33:06.312 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, －ターメリック, 　→香辛料の一種です。, ----- コラム：テキスト -----]
10:33:06.312 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－箇条書き￥：対象￥】, ￥【－対象￥】, ターメリック, ￥【対象－￥】, ￥【－箇条書き￥：説明￥】, ￥【－説明￥】, 香辛料の一種です。, ￥【説明－￥】, ￥【箇条書き－￥】, ￥【箇条書き－￥】, ----- コラム：BLtxt文書 -----]
10:33:06.313 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, 【－表】, 【－行】, 【＝見出しセル】No., 【＝見出しセル】産物, 【＝見出しセル】産地, 【行－】, 【－行】, 【＝セル】1, 【＝セル】みかん, 【＝セル】愛媛, 【行－】, 【－行】, 【＝セル】2, 【＝セル】茶, 【＝セル】静岡, 【行－】, 【表－】, ----- コラム：テキスト -----]
10:33:06.313 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－表￥】, ￥【－行￥】, ￥【＝見出しセル￥】No., ￥【＝見出しセル￥】産物, ￥【＝見出しセル￥】産地, ￥【行－￥】, ￥【－行￥】, ￥【＝セル￥】1, ￥【＝セル￥】みかん, ￥【＝セル￥】愛媛, ￥【行－￥】, ￥【－行￥】, ￥【＝セル￥】2, ￥【＝セル￥】茶, ￥【＝セル￥】静岡, ￥【行－￥】, ￥【表－￥】, ----- コラム：BLtxt文書 -----]
10:33:06.313 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, 【－表】, 【－行】, 【＝見出しセル】名前, 【＝セル】ミケ, 【＝セル】ボギー, 【行－】, 【－行】, 【＝見出しセル】種類, 【＝セル】三毛猫, 【＝セル】コーギー, 【行－】, 【－行】, 【＝見出しセル】首輪の色, 【＝セル】, 【＝セル】赤, 【行－】, 【表－】, ----- コラム：テキスト -----]
10:33:06.342 [ForkJoinPool-16-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, 　日本人の四割は血液型がＯ型です。, 【コラム－】]
10:33:06.343 [ForkJoinPool-16-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#コラムを整形
10:33:06.343 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－表￥】, ￥【－行￥】, ￥【＝見出しセル￥】名前, ￥【＝セル￥】ミケ, ￥【＝セル￥】ボギー, ￥【行－￥】, ￥【－行￥】, ￥【＝見出しセル￥】種類, ￥【＝セル￥】三毛猫, ￥【＝セル￥】コーギー, ￥【行－￥】, ￥【－行￥】, ￥【＝見出しセル￥】首輪の色, ￥【＝セル￥】, ￥【＝セル￥】赤, ￥【行－￥】, ￥【表－￥】, ----- コラム：BLtxt文書 -----]
10:33:06.343 [ForkJoinPool-16-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#コラムを整形
10:33:06.343 [ForkJoinPool-16-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#コラムを整形
10:33:06.343 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, 【－コラム】, 　日本人の四割は血液型がＯ型です。, 【コラム－】, ----- コラム：テキスト -----]
10:33:06.343 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－コラム￥】, 　日本人の四割は血液型がＯ型です。, ￥【コラム－￥】, ----- コラム：BLtxt文書 -----]
10:33:06.343 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, ----- 引用 -----, 　吾輩は猫である。, ￥【＝引用元￥】夏目漱石『吾輩は猫である』, ----- 引用 -----, ----- コラム：テキスト -----]
10:33:06.344 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－引用￥】, 　吾輩は猫である。, ￥【＝引用元￥】夏目漱石『吾輩は猫である』, ￥【引用－￥】, ----- コラム：BLtxt文書 -----]
10:33:06.344 [ForkJoinPool-18-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#コラム
10:33:06.344 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, ----- 注意￥：中火とは -----, 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。, ----- 注意￥：中火とは -----, ----- コラム：テキスト -----]
10:33:06.345 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－注意￥：中火とは￥】, 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。, ￥【注意－￥】, ----- コラム：BLtxt文書 -----]
10:33:06.345 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, 墨付きカッコが【強調：そのまま】表示されます。, ----- コラム：テキスト -----]
10:33:06.345 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 墨付きカッコが￥￥￥【強調￥￥￥：そのまま￥￥￥】表示されます。, ----- コラム：BLtxt文書 -----]
10:33:06.346 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, 　詳しくは￥【リンク￥：ネット検索￥：https://www.google.co.jp/￥】してください。, 　￥【リンク￥：https://www.google.co.jp/￥】でネット検索できます。, ----- コラム：テキスト -----]
10:33:06.346 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　詳しくは￥【｜リンク￥：https://www.google.co.jp/￥】ネット検索￥【リンク｜￥】してください。, 　￥【｜リンク￥：https://www.google.co.jp/￥】https://www.google.co.jp/￥【リンク｜￥】でネット検索できます。, ----- コラム：BLtxt文書 -----]
10:33:06.346 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, https://www.google.co.jp/, ----- コラム：テキスト -----]
10:33:06.347 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【｜リンク￥：https://www.google.co.jp/￥】https://www.google.co.jp/￥【リンク｜￥】, ----- コラム：BLtxt文書 -----]
10:33:06.347 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, 　Google（https://www.google.co.jp/）で検索しました。, ----- コラム：テキスト -----]
10:33:06.347 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　Google（￥【｜リンク￥：https://www.google.co.jp/￥】https://www.google.co.jp/￥【リンク｜￥】）で検索しました。, ----- コラム：BLtxt文書 -----]
10:33:06.347 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, 　必ず最後に￥【強調￥：確認ボタン￥】をクリックしてください。, ----- コラム：テキスト -----]
10:33:06.347 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　必ず最後に￥【｜強調￥】確認ボタン￥【強調｜￥】をクリックしてください。, ----- コラム：BLtxt文書 -----]
10:33:06.347 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, 　間違えて￥【最強調￥：自爆スイッチ￥】を押さないでください。, ----- コラム：テキスト -----]
10:33:06.348 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　間違えて￥【｜最強調￥】自爆スイッチ￥【最強調｜￥】を押さないでください。, ----- コラム：BLtxt文書 -----]
10:33:06.348 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, 　もちろん本当￥【ぼかし￥：かもしれない￥】ですよ。, ----- コラム：テキスト -----]
10:33:06.348 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　もちろん本当￥【｜ぼかし￥】かもしれない￥【ぼかし｜￥】ですよ。, ----- コラム：BLtxt文書 -----]
10:33:06.348 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, 　富士山の標高は￥【訂正￥：３７７７メートル￥】３７７６メートルです。, ----- コラム：テキスト -----]
10:33:06.348 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　富士山の標高は￥【｜訂正￥】３７７７メートル￥【訂正｜￥】３７７６メートルです。, ----- コラム：BLtxt文書 -----]
10:33:06.348 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, 　まだ￥【傍点￥：午前三時￥】じゃないか。, ----- コラム：テキスト -----]
10:33:06.349 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　まだ￥【｜傍点￥】午前三時￥【傍点｜￥】じゃないか。, ----- コラム：BLtxt文書 -----]
10:33:06.349 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, 　シェイクスピア全集の第￥【縦中横￥：10￥】巻に記述されています。, ----- コラム：テキスト -----]
10:33:06.349 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　シェイクスピア全集の第￥【｜縦中横￥】10￥【縦中横｜￥】巻に記述されています。, ----- コラム：BLtxt文書 -----]
10:33:06.349 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, 　『乱れからくり』の作者は￥【備考￥：泡坂妻夫￥：泡は特殊文字￥】です。, ----- コラム：テキスト -----]
10:33:06.349 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　『乱れからくり』の作者は￥【｜備考￥：泡は特殊文字￥】泡坂妻夫￥【備考｜￥】です。, ----- コラム：BLtxt文書 -----]
10:33:06.349 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, 　￥【ルビ￥：出納￥：すいとう￥】係は言った。, ----- コラム：テキスト -----]
10:33:06.350 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　￥【｜ルビ￥：すいとう￥】出納￥【ルビ｜￥】係は言った。, ----- コラム：BLtxt文書 -----]
10:33:06.350 [ForkJoinPool-18-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#タグ付きコラム
10:33:06.356 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, ■カレーの作り方, □材料の準備, 【コラム－】]
10:33:06.379 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【＝見出し￥：2￥】カレーの作り方, ￥【＝見出し￥：3￥】材料の準備, 【コラム－】]
10:33:06.403 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, ▼巨大数の歴史, 【コラム－】]
10:33:06.425 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【＝小見出し￥】巨大数の歴史, 【コラム－】]
10:33:06.448 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, ・じゃがいも, ・ニンジン, ・玉ねぎ, 　　→刻むときは注意。, 　　　涙がでます。, ・カレー粉, 　　～ジャワカレー, 　　～バーモンドカレー, 【コラム－】]
10:33:06.471 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－箇条書き￥：順序なし￥】, ￥【－項目￥】, じゃがいも, ￥【項目－￥】, ￥【－項目￥】, ニンジン, ￥【項目－￥】, ￥【－項目￥】, 玉ねぎ, ￥【－箇条書き￥：説明￥】, ￥【－説明￥】, 刻むときは注意。, 涙がでます。, ￥【説明－￥】, ￥【箇条書き－￥】, ￥【項目－￥】, ￥【－項目￥】, カレー粉, ￥【－箇条書き￥：順序あり￥】, ￥【－項目￥】, ジャワカレー, ￥【項目－￥】, ￥【－項目￥】, バーモンドカレー, ￥【項目－￥】, ￥【箇条書き－￥】, ￥【項目－￥】, ￥【箇条書き－￥】, 【コラム－】]
10:33:06.495 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, －ターメリック, 　→香辛料の一種です。, 【コラム－】]
10:33:06.517 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－箇条書き￥：対象￥】, ￥【－対象￥】, ターメリック, ￥【対象－￥】, ￥【－箇条書き￥：説明￥】, ￥【－説明￥】, 香辛料の一種です。, ￥【説明－￥】, ￥【箇条書き－￥】, ￥【箇条書き－￥】, 【コラム－】]
10:33:06.539 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, 【－表】, 【－行】, 【＝見出しセル】No., 【＝見出しセル】産物, 【＝見出しセル】産地, 【行－】, 【－行】, 【＝セル】1, 【＝セル】みかん, 【＝セル】愛媛, 【行－】, 【－行】, 【＝セル】2, 【＝セル】茶, 【＝セル】静岡, 【行－】, 【表－】, 【コラム－】]
10:33:06.561 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－表￥】, ￥【－行￥】, ￥【＝見出しセル￥】No., ￥【＝見出しセル￥】産物, ￥【＝見出しセル￥】産地, ￥【行－￥】, ￥【－行￥】, ￥【＝セル￥】1, ￥【＝セル￥】みかん, ￥【＝セル￥】愛媛, ￥【行－￥】, ￥【－行￥】, ￥【＝セル￥】2, ￥【＝セル￥】茶, ￥【＝セル￥】静岡, ￥【行－￥】, ￥【表－￥】, 【コラム－】]
10:33:06.582 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, 【－表】, 【－行】, 【＝見出しセル】名前, 【＝セル】ミケ, 【＝セル】ボギー, 【行－】, 【－行】, 【＝見出しセル】種類, 【＝セル】三毛猫, 【＝セル】コーギー, 【行－】, 【－行】, 【＝見出しセル】首輪の色, 【＝セル】, 【＝セル】赤, 【行－】, 【表－】, 【コラム－】]
10:33:06.604 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－表￥】, ￥【－行￥】, ￥【＝見出しセル￥】名前, ￥【＝セル￥】ミケ, ￥【＝セル￥】ボギー, ￥【行－￥】, ￥【－行￥】, ￥【＝見出しセル￥】種類, ￥【＝セル￥】三毛猫, ￥【＝セル￥】コーギー, ￥【行－￥】, ￥【－行￥】, ￥【＝見出しセル￥】首輪の色, ￥【＝セル￥】, ￥【＝セル￥】赤, ￥【行－￥】, ￥【表－￥】, 【コラム－】]
10:33:06.636 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, 【－コラム】, 　日本人の四割は血液型がＯ型です。, 【コラム－】, 【コラム－】]
10:33:06.658 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－コラム￥】, 　日本人の四割は血液型がＯ型です。, ￥【コラム－￥】, 【コラム－】]
10:33:06.679 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, ----- 引用 -----, 　吾輩は猫である。, ￥【＝引用元￥】夏目漱石『吾輩は猫である』, ----- 引用 -----, 【コラム－】]
10:33:06.700 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－引用￥】, 　吾輩は猫である。, ￥【＝引用元￥】夏目漱石『吾輩は猫である』, ￥【引用－￥】, 【コラム－】]
10:33:06.721 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, ----- 注意￥：中火とは -----, 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。, ----- 注意￥：中火とは -----, 【コラム－】]
10:33:06.742 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－注意￥：中火とは￥】, 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。, ￥【注意－￥】, 【コラム－】]
10:33:06.763 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, 墨付きカッコが【強調：そのまま】表示されます。, 【コラム－】]
10:33:06.785 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 墨付きカッコが￥￥￥【強調￥￥￥：そのまま￥￥￥】表示されます。, 【コラム－】]
10:33:06.806 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, 　詳しくは￥【リンク￥：ネット検索￥：https://www.google.co.jp/￥】してください。, 　￥【リンク￥：https://www.google.co.jp/￥】でネット検索できます。, 【コラム－】]
10:33:06.827 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　詳しくは￥【｜リンク￥：https://www.google.co.jp/￥】ネット検索￥【リンク｜￥】してください。, 　￥【｜リンク￥：https://www.google.co.jp/￥】https://www.google.co.jp/￥【リンク｜￥】でネット検索できます。, 【コラム－】]
10:33:06.847 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, https://www.google.co.jp/, 【コラム－】]
10:33:06.886 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【｜リンク￥：https://www.google.co.jp/￥】https://www.google.co.jp/￥【リンク｜￥】, 【コラム－】]
10:33:06.908 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, 　Google（https://www.google.co.jp/）で検索しました。, 【コラム－】]
10:33:06.929 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　Google（￥【｜リンク￥：https://www.google.co.jp/￥】https://www.google.co.jp/￥【リンク｜￥】）で検索しました。, 【コラム－】]
10:33:06.950 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, 　必ず最後に￥【強調￥：確認ボタン￥】をクリックしてください。, 【コラム－】]
10:33:06.971 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　必ず最後に￥【｜強調￥】確認ボタン￥【強調｜￥】をクリックしてください。, 【コラム－】]
10:33:06.991 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, 　間違えて￥【最強調￥：自爆スイッチ￥】を押さないでください。, 【コラム－】]
10:33:07.012 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　間違えて￥【｜最強調￥】自爆スイッチ￥【最強調｜￥】を押さないでください。, 【コラム－】]
10:33:07.032 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, 　もちろん本当￥【ぼかし￥：かもしれない￥】ですよ。, 【コラム－】]
10:33:07.053 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　もちろん本当￥【｜ぼかし￥】かもしれない￥【ぼかし｜￥】ですよ。, 【コラム－】]
10:33:07.073 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, 　富士山の標高は￥【訂正￥：３７７７メートル￥】３７７６メートルです。, 【コラム－】]
10:33:07.093 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　富士山の標高は￥【｜訂正￥】３７７７メートル￥【訂正｜￥】３７７６メートルです。, 【コラム－】]
10:33:07.114 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, 　まだ￥【傍点￥：午前三時￥】じゃないか。, 【コラム－】]
10:33:07.134 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　まだ￥【｜傍点￥】午前三時￥【傍点｜￥】じゃないか。, 【コラム－】]
10:33:07.155 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, 　シェイクスピア全集の第￥【縦中横￥：10￥】巻に記述されています。, 【コラム－】]
10:33:07.176 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　シェイクスピア全集の第￥【｜縦中横￥】10￥【縦中横｜￥】巻に記述されています。, 【コラム－】]
10:33:07.197 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, 　『乱れからくり』の作者は￥【備考￥：泡坂妻夫￥：泡は特殊文字￥】です。, 【コラム－】]
10:33:07.219 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　『乱れからくり』の作者は￥【｜備考￥：泡は特殊文字￥】泡坂妻夫￥【備考｜￥】です。, 【コラム－】]
10:33:07.242 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, 　￥【ルビ￥：出納￥：すいとう￥】係は言った。, 【コラム－】]
10:33:07.264 [ForkJoinPool-17-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　￥【｜ルビ￥：すいとう￥】出納￥【ルビ｜￥】係は言った。, 【コラム－】]
10:33:07.264 [ForkJoinPool-17-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#タグ付きコラムを整形
10:33:07.264 [ForkJoinPool-17-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#タグ付きコラムを整形
10:33:07.264 [ForkJoinPool-17-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#タグ付きコラムを整形
10:33:07.265 [ForkJoinPool-18-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#タグ付きコラム
10:33:07.318 [Thread-29] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行終了 key=washscr#BLtxt文書へ整形
10:33:07.318 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：meta タイトル
10:33:07.319 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.319 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.319 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.319 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.320 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.320 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.320 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.320 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.320 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.321 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.321 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.321 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.321 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.321 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.321 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.322 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.322 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.322 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.322 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.322 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.322 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.322 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.322 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.323 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.324 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.324 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.325 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.325 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.327 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.328 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.328 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.328 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.328 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.329 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.329 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.329 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.330 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.330 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.330 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 表
10:33:07.330 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 行
10:33:07.330 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出しセル
10:33:07.330 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.330 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出しセル
10:33:07.330 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.331 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出しセル
10:33:07.331 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.331 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 行
10:33:07.331 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block セル
10:33:07.331 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.331 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block セル
10:33:07.331 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.331 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block セル
10:33:07.332 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.332 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 行
10:33:07.332 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block セル
10:33:07.332 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.332 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block セル
10:33:07.332 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.332 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block セル
10:33:07.332 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.332 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.333 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.335 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.336 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.336 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 表
10:33:07.336 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 行
10:33:07.336 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出しセル
10:33:07.336 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.336 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block セル
10:33:07.336 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.336 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block セル
10:33:07.337 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.337 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 行
10:33:07.337 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出しセル
10:33:07.337 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.337 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block セル
10:33:07.337 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.337 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block セル
10:33:07.337 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.338 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 行
10:33:07.338 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出しセル
10:33:07.338 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.338 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block セル
10:33:07.338 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block セル
10:33:07.338 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.338 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.338 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.340 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.340 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.340 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.340 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.340 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.340 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.341 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.341 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.341 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.341 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.341 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.342 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.342 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.342 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.343 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.343 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.343 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.343 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.343 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.344 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.344 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.344 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.344 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.344 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.345 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline 強調
10:33:07.345 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.345 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.345 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.345 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.345 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.346 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.346 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.346 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.346 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.347 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.347 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.347 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.347 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.347 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.347 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.348 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.348 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.348 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.348 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.348 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.348 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.348 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.349 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.349 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.349 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.349 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.349 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.349 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.349 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.350 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.350 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.350 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.350 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.350 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.350 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.351 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.351 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.351 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.351 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.351 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.351 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.352 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.352 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.352 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.352 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.353 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.353 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.353 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.353 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.353 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.353 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.354 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.354 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.354 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.354 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.354 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.354 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.354 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.354 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.355 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.355 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.355 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.355 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.355 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:07.355 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.355 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.355 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.356 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:07.356 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.356 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:07.512 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:07.583 [main] DEBUG io.github.longfish801 - para call
10:33:07.633 [main] DEBUG io.github.longfish801 - line call
10:33:07.687 [main] DEBUG io.github.longfish801 - text call: 概要
10:33:07.737 [main] DEBUG io.github.longfish801 - para call
10:33:07.786 [main] DEBUG io.github.longfish801 - line call
10:33:07.838 [main] DEBUG io.github.longfish801 - text call: 　yakumoは変換名「_bltxt」（BLtxt変換）を用意しています。
10:33:07.887 [main] DEBUG io.github.longfish801 - line call
10:33:07.939 [main] DEBUG io.github.longfish801 - text call: 　Washスクリプトでテキストを BLtxt記法に変換します。
10:33:07.988 [main] DEBUG io.github.longfish801 - line call
10:33:08.041 [main] DEBUG io.github.longfish801 - text call: 　Washスクリプトによる処理内容について、以下に説明します。
10:33:08.097 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:08.168 [main] DEBUG io.github.longfish801 - para call
10:33:08.221 [main] DEBUG io.github.longfish801 - line call
10:33:08.277 [main] DEBUG io.github.longfish801 - text call: 行タグ／行範囲タグへ整形
10:33:08.335 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:08.389 [main] DEBUG io.github.longfish801 - para call
10:33:08.443 [main] DEBUG io.github.longfish801 - line call
10:33:08.500 [main] DEBUG io.github.longfish801 - text call: 見出し
10:33:08.550 [main] DEBUG io.github.longfish801 - para call
10:33:08.601 [main] DEBUG io.github.longfish801 - line call
10:33:08.655 [main] DEBUG io.github.longfish801 - text call: 　行頭に全角の四角（■、□）があれば、見出しとみなします。
10:33:08.705 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:08.775 [main] DEBUG io.github.longfish801 - para call
10:33:08.825 [main] DEBUG io.github.longfish801 - line call
10:33:08.883 [main] DEBUG io.github.longfish801 - text call: ■カレーの作り方
10:33:08.935 [main] DEBUG io.github.longfish801 - line call
10:33:08.991 [main] DEBUG io.github.longfish801 - text call: □材料の準備
10:33:09.042 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:09.095 [main] DEBUG io.github.longfish801 - para call
10:33:09.146 [main] DEBUG io.github.longfish801 - line call
10:33:09.201 [main] DEBUG io.github.longfish801 - text call: 【＝見出し：2】カレーの作り方
10:33:09.251 [main] DEBUG io.github.longfish801 - line call
10:33:09.322 [main] DEBUG io.github.longfish801 - text call: 【＝見出し：3】材料の準備
10:33:09.383 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:09.435 [main] DEBUG io.github.longfish801 - para call
10:33:09.485 [main] DEBUG io.github.longfish801 - line call
10:33:09.540 [main] DEBUG io.github.longfish801 - text call: 小見出し
10:33:09.589 [main] DEBUG io.github.longfish801 - para call
10:33:09.638 [main] DEBUG io.github.longfish801 - line call
10:33:09.691 [main] DEBUG io.github.longfish801 - text call: 　行頭に下向き三角（▼）があれば、小見出しとみなします。
10:33:09.739 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:09.791 [main] DEBUG io.github.longfish801 - para call
10:33:09.840 [main] DEBUG io.github.longfish801 - line call
10:33:09.911 [main] DEBUG io.github.longfish801 - text call: ▼巨大数の歴史
10:33:09.959 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:10.011 [main] DEBUG io.github.longfish801 - para call
10:33:10.062 [main] DEBUG io.github.longfish801 - line call
10:33:10.118 [main] DEBUG io.github.longfish801 - text call: 【＝小見出し】巨大数の歴史
10:33:10.174 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:10.227 [main] DEBUG io.github.longfish801 - para call
10:33:10.278 [main] DEBUG io.github.longfish801 - line call
10:33:10.334 [main] DEBUG io.github.longfish801 - text call: 箇条書き
10:33:10.384 [main] DEBUG io.github.longfish801 - para call
10:33:10.435 [main] DEBUG io.github.longfish801 - line call
10:33:10.504 [main] DEBUG io.github.longfish801 - text call: 　箇条書きには順序あり、順序なし、項目説明の三種類があります。
10:33:10.554 [main] DEBUG io.github.longfish801 - line call
10:33:10.608 [main] DEBUG io.github.longfish801 - text call: 　箇条書きの前後には空行を入れてください。
10:33:10.657 [main] DEBUG io.github.longfish801 - line call
10:33:10.709 [main] DEBUG io.github.longfish801 - text call: 　順序あり、順序なし、項目説明は混在させることができます。
10:33:10.757 [main] DEBUG io.github.longfish801 - line call
10:33:10.810 [main] DEBUG io.github.longfish801 - text call: 　ただし、インデントが同じ高さで混在させることはできません。
10:33:10.864 [main] DEBUG io.github.longfish801 - para call
10:33:10.916 [main] DEBUG io.github.longfish801 - line call
10:33:10.972 [main] DEBUG io.github.longfish801 - text call: 　一文字目に中黒（・）があれば、順序なしの箇条書きとみなします。
10:33:11.022 [main] DEBUG io.github.longfish801 - line call
10:33:11.090 [main] DEBUG io.github.longfish801 - text call: 　一文字目に波線（～）があれば、順序ありの箇条書きとみなします。
10:33:11.137 [main] DEBUG io.github.longfish801 - line call
10:33:11.191 [main] DEBUG io.github.longfish801 - text call: 　インデントされた行で、先頭一文字目が矢印（→）ならば項目への備考とみなします。
10:33:11.240 [main] DEBUG io.github.longfish801 - line call
10:33:11.293 [main] DEBUG io.github.longfish801 - text call: 　タブ、半角／全角スペースでインデントすることで、入れ子にできます。
10:33:11.341 [main] DEBUG io.github.longfish801 - line call
10:33:11.394 [main] DEBUG io.github.longfish801 - text call: 　インデントを下げるときは、それより前に記述した項目とインデントの大きさを合わせてください。
10:33:11.443 [main] DEBUG io.github.longfish801 - line call
10:33:11.497 [main] DEBUG io.github.longfish801 - text call: 　タグ付け時に、先頭のインデントを削除します。
10:33:11.546 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:11.599 [main] DEBUG io.github.longfish801 - para call
10:33:11.664 [main] DEBUG io.github.longfish801 - line call
10:33:11.719 [main] DEBUG io.github.longfish801 - text call: ・じゃがいも
10:33:11.767 [main] DEBUG io.github.longfish801 - line call
10:33:11.823 [main] DEBUG io.github.longfish801 - text call: ・ニンジン
10:33:11.873 [main] DEBUG io.github.longfish801 - line call
10:33:11.928 [main] DEBUG io.github.longfish801 - text call: ・玉ねぎ
10:33:11.976 [main] DEBUG io.github.longfish801 - line call
10:33:12.032 [main] DEBUG io.github.longfish801 - text call: 　　→刻むときは注意。
10:33:12.081 [main] DEBUG io.github.longfish801 - line call
10:33:12.134 [main] DEBUG io.github.longfish801 - text call: 　　　涙がでます。
10:33:12.198 [main] DEBUG io.github.longfish801 - line call
10:33:12.252 [main] DEBUG io.github.longfish801 - text call: ・カレー粉
10:33:12.301 [main] DEBUG io.github.longfish801 - line call
10:33:12.355 [main] DEBUG io.github.longfish801 - text call: 　　～ジャワカレー
10:33:12.404 [main] DEBUG io.github.longfish801 - line call
10:33:12.458 [main] DEBUG io.github.longfish801 - text call: 　　～バーモンドカレー
10:33:12.507 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:12.558 [main] DEBUG io.github.longfish801 - para call
10:33:12.607 [main] DEBUG io.github.longfish801 - line call
10:33:12.661 [main] DEBUG io.github.longfish801 - text call: 【－箇条書き：順序なし】
10:33:12.711 [main] DEBUG io.github.longfish801 - line call
10:33:12.781 [main] DEBUG io.github.longfish801 - text call: 【－項目】
10:33:12.831 [main] DEBUG io.github.longfish801 - line call
10:33:12.885 [main] DEBUG io.github.longfish801 - text call: じゃがいも
10:33:12.934 [main] DEBUG io.github.longfish801 - line call
10:33:12.987 [main] DEBUG io.github.longfish801 - text call: 【項目－】
10:33:13.037 [main] DEBUG io.github.longfish801 - line call
10:33:13.092 [main] DEBUG io.github.longfish801 - text call: 【－項目】
10:33:13.141 [main] DEBUG io.github.longfish801 - line call
10:33:13.196 [main] DEBUG io.github.longfish801 - text call: ニンジン
10:33:13.248 [main] DEBUG io.github.longfish801 - line call
10:33:13.318 [main] DEBUG io.github.longfish801 - text call: 【項目－】
10:33:13.368 [main] DEBUG io.github.longfish801 - line call
10:33:13.430 [main] DEBUG io.github.longfish801 - text call: 【－項目】
10:33:13.480 [main] DEBUG io.github.longfish801 - line call
10:33:13.534 [main] DEBUG io.github.longfish801 - text call: 玉ねぎ
10:33:13.583 [main] DEBUG io.github.longfish801 - line call
10:33:13.637 [main] DEBUG io.github.longfish801 - text call: 【－箇条書き：説明】
10:33:13.686 [main] DEBUG io.github.longfish801 - line call
10:33:13.740 [main] DEBUG io.github.longfish801 - text call: 【－説明】
10:33:13.789 [main] DEBUG io.github.longfish801 - line call
10:33:13.845 [main] DEBUG io.github.longfish801 - text call: 刻むときは注意。
10:33:13.926 [main] DEBUG io.github.longfish801 - line call
10:33:13.982 [main] DEBUG io.github.longfish801 - text call: 涙がでます。
10:33:14.037 [main] DEBUG io.github.longfish801 - line call
10:33:14.096 [main] DEBUG io.github.longfish801 - text call: 【説明－】
10:33:14.146 [main] DEBUG io.github.longfish801 - line call
10:33:14.200 [main] DEBUG io.github.longfish801 - text call: 【箇条書き－】
10:33:14.249 [main] DEBUG io.github.longfish801 - line call
10:33:14.304 [main] DEBUG io.github.longfish801 - text call: 【項目－】
10:33:14.353 [main] DEBUG io.github.longfish801 - line call
10:33:14.408 [main] DEBUG io.github.longfish801 - text call: 【－項目】
10:33:14.473 [main] DEBUG io.github.longfish801 - line call
10:33:14.527 [main] DEBUG io.github.longfish801 - text call: カレー粉
10:33:14.576 [main] DEBUG io.github.longfish801 - line call
10:33:14.631 [main] DEBUG io.github.longfish801 - text call: 【－箇条書き：順序あり】
10:33:14.681 [main] DEBUG io.github.longfish801 - line call
10:33:14.737 [main] DEBUG io.github.longfish801 - text call: 【－項目】
10:33:14.788 [main] DEBUG io.github.longfish801 - line call
10:33:14.844 [main] DEBUG io.github.longfish801 - text call: ジャワカレー
10:33:14.895 [main] DEBUG io.github.longfish801 - line call
10:33:14.951 [main] DEBUG io.github.longfish801 - text call: 【項目－】
10:33:15.002 [main] DEBUG io.github.longfish801 - line call
10:33:15.079 [main] DEBUG io.github.longfish801 - text call: 【－項目】
10:33:15.133 [main] DEBUG io.github.longfish801 - line call
10:33:15.190 [main] DEBUG io.github.longfish801 - text call: バーモンドカレー
10:33:15.239 [main] DEBUG io.github.longfish801 - line call
10:33:15.294 [main] DEBUG io.github.longfish801 - text call: 【項目－】
10:33:15.343 [main] DEBUG io.github.longfish801 - line call
10:33:15.398 [main] DEBUG io.github.longfish801 - text call: 【箇条書き－】
10:33:15.447 [main] DEBUG io.github.longfish801 - line call
10:33:15.502 [main] DEBUG io.github.longfish801 - text call: 【項目－】
10:33:15.551 [main] DEBUG io.github.longfish801 - line call
10:33:15.621 [main] DEBUG io.github.longfish801 - text call: 【箇条書き－】
10:33:15.672 [main] DEBUG io.github.longfish801 - para call
10:33:15.722 [main] DEBUG io.github.longfish801 - line call
10:33:15.776 [main] DEBUG io.github.longfish801 - text call: 　一行目の一文字目に波線（～）があれば、項目説明の箇条書きとみなします。
10:33:15.826 [main] DEBUG io.github.longfish801 - line call
10:33:15.879 [main] DEBUG io.github.longfish801 - text call: 　説明は行頭に矢印（→）を記述します。必ずインデントを入れてください。
10:33:15.927 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:15.980 [main] DEBUG io.github.longfish801 - para call
10:33:16.031 [main] DEBUG io.github.longfish801 - line call
10:33:16.087 [main] DEBUG io.github.longfish801 - text call: －ターメリック
10:33:16.136 [main] DEBUG io.github.longfish801 - line call
10:33:16.205 [main] DEBUG io.github.longfish801 - text call: 　→香辛料の一種です。
10:33:16.254 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:16.305 [main] DEBUG io.github.longfish801 - para call
10:33:16.355 [main] DEBUG io.github.longfish801 - line call
10:33:16.409 [main] DEBUG io.github.longfish801 - text call: 【－箇条書き：対象】
10:33:16.458 [main] DEBUG io.github.longfish801 - line call
10:33:16.514 [main] DEBUG io.github.longfish801 - text call: 【－対象】
10:33:16.564 [main] DEBUG io.github.longfish801 - line call
10:33:16.621 [main] DEBUG io.github.longfish801 - text call: ターメリック
10:33:16.671 [main] DEBUG io.github.longfish801 - line call
10:33:16.728 [main] DEBUG io.github.longfish801 - text call: 【対象－】
10:33:16.792 [main] DEBUG io.github.longfish801 - line call
10:33:16.849 [main] DEBUG io.github.longfish801 - text call: 【－箇条書き：説明】
10:33:16.901 [main] DEBUG io.github.longfish801 - line call
10:33:16.960 [main] DEBUG io.github.longfish801 - text call: 【－説明】
10:33:17.011 [main] DEBUG io.github.longfish801 - line call
10:33:17.068 [main] DEBUG io.github.longfish801 - text call: 香辛料の一種です。
10:33:17.121 [main] DEBUG io.github.longfish801 - line call
10:33:17.176 [main] DEBUG io.github.longfish801 - text call: 【説明－】
10:33:17.228 [main] DEBUG io.github.longfish801 - line call
10:33:17.286 [main] DEBUG io.github.longfish801 - text call: 【箇条書き－】
10:33:17.350 [main] DEBUG io.github.longfish801 - line call
10:33:17.410 [main] DEBUG io.github.longfish801 - text call: 【箇条書き－】
10:33:17.466 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:17.520 [main] DEBUG io.github.longfish801 - para call
10:33:17.571 [main] DEBUG io.github.longfish801 - line call
10:33:17.630 [main] DEBUG io.github.longfish801 - text call: 表
10:33:17.681 [main] DEBUG io.github.longfish801 - para call
10:33:17.734 [main] DEBUG io.github.longfish801 - line call
10:33:17.789 [main] DEBUG io.github.longfish801 - text call: 　五つ以上連続するハイフン(-)で文字列「表」を挟んだ区切り行で囲まれた範囲を、表とみなします。
10:33:17.838 [main] DEBUG io.github.longfish801 - para call
10:33:17.888 [main] DEBUG io.github.longfish801 - line call
10:33:17.955 [main] DEBUG io.github.longfish801 - text call: 　セル区切りに半角スペースやタブを使います。
10:33:18.005 [main] DEBUG io.github.longfish801 - line call
10:33:18.060 [main] DEBUG io.github.longfish801 - text call: 　半角スペースやタブの連続はすべて取り除きます。
10:33:18.109 [main] DEBUG io.github.longfish801 - line call
10:33:18.162 [main] DEBUG io.github.longfish801 - text call: 　見出しには先頭に半角アスタリスク(*)を付与してください。
10:33:18.211 [main] DEBUG io.github.longfish801 - line call
10:33:18.264 [main] DEBUG io.github.longfish801 - text call: 　セルの内容を空文字にしたり、改行を含む文字列にすることはできません。
10:33:18.312 [main] DEBUG io.github.longfish801 - line call
10:33:18.401 [main] DEBUG io.github.longfish801 - text call: 　セルの結合や分割には対応していません。
10:33:18.458 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:18.518 [main] DEBUG io.github.longfish801 - block call: block#表
10:33:18.584 [main] DEBUG io.github.longfish801 - block call: block#行
10:33:18.638 [main] DEBUG io.github.longfish801 - block call: block#見出しセル
10:33:18.694 [main] DEBUG io.github.longfish801 - para call
10:33:18.752 [main] DEBUG io.github.longfish801 - line call
10:33:18.815 [main] DEBUG io.github.longfish801 - text call: No.
10:33:18.871 [main] DEBUG io.github.longfish801 - block call: block#見出しセル
10:33:18.934 [main] DEBUG io.github.longfish801 - para call
10:33:18.993 [main] DEBUG io.github.longfish801 - line call
10:33:19.064 [main] DEBUG io.github.longfish801 - text call: 産物
10:33:19.120 [main] DEBUG io.github.longfish801 - block call: block#見出しセル
10:33:19.191 [main] DEBUG io.github.longfish801 - para call
10:33:19.266 [main] DEBUG io.github.longfish801 - line call
10:33:19.326 [main] DEBUG io.github.longfish801 - text call: 産地
10:33:19.383 [main] DEBUG io.github.longfish801 - block call: block#行
10:33:19.460 [main] DEBUG io.github.longfish801 - block call: block#セル
10:33:19.516 [main] DEBUG io.github.longfish801 - para call
10:33:19.572 [main] DEBUG io.github.longfish801 - line call
10:33:19.650 [main] DEBUG io.github.longfish801 - text call: 1
10:33:19.703 [main] DEBUG io.github.longfish801 - block call: block#セル
10:33:19.759 [main] DEBUG io.github.longfish801 - para call
10:33:19.827 [main] DEBUG io.github.longfish801 - line call
10:33:19.889 [main] DEBUG io.github.longfish801 - text call: みかん
10:33:19.942 [main] DEBUG io.github.longfish801 - block call: block#セル
10:33:19.998 [main] DEBUG io.github.longfish801 - para call
10:33:20.053 [main] DEBUG io.github.longfish801 - line call
10:33:20.115 [main] DEBUG io.github.longfish801 - text call: 愛媛
10:33:20.164 [main] DEBUG io.github.longfish801 - block call: block#行
10:33:20.217 [main] DEBUG io.github.longfish801 - block call: block#セル
10:33:20.274 [main] DEBUG io.github.longfish801 - para call
10:33:20.331 [main] DEBUG io.github.longfish801 - line call
10:33:20.409 [main] DEBUG io.github.longfish801 - text call: 2
10:33:20.461 [main] DEBUG io.github.longfish801 - block call: block#セル
10:33:20.517 [main] DEBUG io.github.longfish801 - para call
10:33:20.572 [main] DEBUG io.github.longfish801 - line call
10:33:20.632 [main] DEBUG io.github.longfish801 - text call: 茶
10:33:20.685 [main] DEBUG io.github.longfish801 - block call: block#セル
10:33:20.741 [main] DEBUG io.github.longfish801 - para call
10:33:20.797 [main] DEBUG io.github.longfish801 - line call
10:33:20.865 [main] DEBUG io.github.longfish801 - text call: 静岡
10:33:20.916 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:20.985 [main] DEBUG io.github.longfish801 - para call
10:33:21.039 [main] DEBUG io.github.longfish801 - line call
10:33:21.094 [main] DEBUG io.github.longfish801 - text call: 【－表】
10:33:21.144 [main] DEBUG io.github.longfish801 - line call
10:33:21.198 [main] DEBUG io.github.longfish801 - text call: 【－行】
10:33:21.248 [main] DEBUG io.github.longfish801 - line call
10:33:21.303 [main] DEBUG io.github.longfish801 - text call: 【＝見出しセル】No.
10:33:21.353 [main] DEBUG io.github.longfish801 - line call
10:33:21.408 [main] DEBUG io.github.longfish801 - text call: 【＝見出しセル】産物
10:33:21.457 [main] DEBUG io.github.longfish801 - line call
10:33:21.529 [main] DEBUG io.github.longfish801 - text call: 【＝見出しセル】産地
10:33:21.583 [main] DEBUG io.github.longfish801 - line call
10:33:21.642 [main] DEBUG io.github.longfish801 - text call: 【行－】
10:33:21.694 [main] DEBUG io.github.longfish801 - line call
10:33:21.753 [main] DEBUG io.github.longfish801 - text call: 【－行】
10:33:21.803 [main] DEBUG io.github.longfish801 - line call
10:33:21.858 [main] DEBUG io.github.longfish801 - text call: 【＝セル】1
10:33:21.907 [main] DEBUG io.github.longfish801 - line call
10:33:21.962 [main] DEBUG io.github.longfish801 - text call: 【＝セル】みかん
10:33:22.011 [main] DEBUG io.github.longfish801 - line call
10:33:22.066 [main] DEBUG io.github.longfish801 - text call: 【＝セル】愛媛
10:33:22.128 [main] DEBUG io.github.longfish801 - line call
10:33:22.183 [main] DEBUG io.github.longfish801 - text call: 【行－】
10:33:22.234 [main] DEBUG io.github.longfish801 - line call
10:33:22.288 [main] DEBUG io.github.longfish801 - text call: 【－行】
10:33:22.338 [main] DEBUG io.github.longfish801 - line call
10:33:22.391 [main] DEBUG io.github.longfish801 - text call: 【＝セル】2
10:33:22.440 [main] DEBUG io.github.longfish801 - line call
10:33:22.494 [main] DEBUG io.github.longfish801 - text call: 【＝セル】茶
10:33:22.544 [main] DEBUG io.github.longfish801 - line call
10:33:22.598 [main] DEBUG io.github.longfish801 - text call: 【＝セル】静岡
10:33:22.660 [main] DEBUG io.github.longfish801 - line call
10:33:22.714 [main] DEBUG io.github.longfish801 - text call: 【行－】
10:33:22.765 [main] DEBUG io.github.longfish801 - line call
10:33:22.821 [main] DEBUG io.github.longfish801 - text call: 【表－】
10:33:22.871 [main] DEBUG io.github.longfish801 - para call
10:33:22.920 [main] DEBUG io.github.longfish801 - line call
10:33:22.973 [main] DEBUG io.github.longfish801 - text call: 　セル区切りに半角パイプ（|）を使うこともできます。
10:33:23.021 [main] DEBUG io.github.longfish801 - line call
10:33:23.074 [main] DEBUG io.github.longfish801 - text call: 　必ず行頭、行末に半角パイプを記述してください。
10:33:23.123 [main] DEBUG io.github.longfish801 - line call
10:33:23.178 [main] DEBUG io.github.longfish801 - text call: 　こちらはセルの内容を空文字にすることができます。
10:33:23.239 [main] DEBUG io.github.longfish801 - line call
10:33:23.293 [main] DEBUG io.github.longfish801 - text call: 　セルの結合や分割には対応していません。
10:33:23.342 [main] DEBUG io.github.longfish801 - line call
10:33:23.395 [main] DEBUG io.github.longfish801 - text call: 　値の前後に半角スペースやタブの連続があれば取り除きます。
10:33:23.444 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:23.495 [main] DEBUG io.github.longfish801 - block call: block#表
10:33:23.547 [main] DEBUG io.github.longfish801 - block call: block#行
10:33:23.600 [main] DEBUG io.github.longfish801 - block call: block#見出しセル
10:33:23.657 [main] DEBUG io.github.longfish801 - para call
10:33:23.712 [main] DEBUG io.github.longfish801 - line call
10:33:23.773 [main] DEBUG io.github.longfish801 - text call: 名前
10:33:23.856 [main] DEBUG io.github.longfish801 - block call: block#セル
10:33:23.913 [main] DEBUG io.github.longfish801 - para call
10:33:23.969 [main] DEBUG io.github.longfish801 - line call
10:33:24.030 [main] DEBUG io.github.longfish801 - text call: ミケ
10:33:24.082 [main] DEBUG io.github.longfish801 - block call: block#セル
10:33:24.157 [main] DEBUG io.github.longfish801 - para call
10:33:24.212 [main] DEBUG io.github.longfish801 - line call
10:33:24.273 [main] DEBUG io.github.longfish801 - text call: ボギー
10:33:24.323 [main] DEBUG io.github.longfish801 - block call: block#行
10:33:24.377 [main] DEBUG io.github.longfish801 - block call: block#見出しセル
10:33:24.445 [main] DEBUG io.github.longfish801 - para call
10:33:24.501 [main] DEBUG io.github.longfish801 - line call
10:33:24.562 [main] DEBUG io.github.longfish801 - text call: 種類
10:33:24.614 [main] DEBUG io.github.longfish801 - block call: block#セル
10:33:24.670 [main] DEBUG io.github.longfish801 - para call
10:33:24.725 [main] DEBUG io.github.longfish801 - line call
10:33:24.785 [main] DEBUG io.github.longfish801 - text call: 三毛猫
10:33:24.839 [main] DEBUG io.github.longfish801 - block call: block#セル
10:33:24.896 [main] DEBUG io.github.longfish801 - para call
10:33:24.952 [main] DEBUG io.github.longfish801 - line call
10:33:25.025 [main] DEBUG io.github.longfish801 - text call: コーギー
10:33:25.076 [main] DEBUG io.github.longfish801 - block call: block#行
10:33:25.129 [main] DEBUG io.github.longfish801 - block call: block#見出しセル
10:33:25.186 [main] DEBUG io.github.longfish801 - para call
10:33:25.241 [main] DEBUG io.github.longfish801 - line call
10:33:25.302 [main] DEBUG io.github.longfish801 - text call: 首輪の色
10:33:25.354 [main] DEBUG io.github.longfish801 - block call: block#セル
10:33:25.407 [main] DEBUG io.github.longfish801 - block call: block#セル
10:33:25.462 [main] DEBUG io.github.longfish801 - para call
10:33:25.520 [main] DEBUG io.github.longfish801 - line call
10:33:25.593 [main] DEBUG io.github.longfish801 - text call: 赤
10:33:25.642 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:25.693 [main] DEBUG io.github.longfish801 - para call
10:33:25.742 [main] DEBUG io.github.longfish801 - line call
10:33:25.796 [main] DEBUG io.github.longfish801 - text call: 【－表】
10:33:25.845 [main] DEBUG io.github.longfish801 - line call
10:33:25.899 [main] DEBUG io.github.longfish801 - text call: 【－行】
10:33:25.948 [main] DEBUG io.github.longfish801 - line call
10:33:26.003 [main] DEBUG io.github.longfish801 - text call: 【＝見出しセル】名前
10:33:26.053 [main] DEBUG io.github.longfish801 - line call
10:33:26.121 [main] DEBUG io.github.longfish801 - text call: 【＝セル】ミケ
10:33:26.170 [main] DEBUG io.github.longfish801 - line call
10:33:26.226 [main] DEBUG io.github.longfish801 - text call: 【＝セル】ボギー
10:33:26.276 [main] DEBUG io.github.longfish801 - line call
10:33:26.332 [main] DEBUG io.github.longfish801 - text call: 【行－】
10:33:26.380 [main] DEBUG io.github.longfish801 - line call
10:33:26.435 [main] DEBUG io.github.longfish801 - text call: 【－行】
10:33:26.484 [main] DEBUG io.github.longfish801 - line call
10:33:26.541 [main] DEBUG io.github.longfish801 - text call: 【＝見出しセル】種類
10:33:26.598 [main] DEBUG io.github.longfish801 - line call
10:33:26.657 [main] DEBUG io.github.longfish801 - text call: 【＝セル】三毛猫
10:33:26.724 [main] DEBUG io.github.longfish801 - line call
10:33:26.784 [main] DEBUG io.github.longfish801 - text call: 【＝セル】コーギー
10:33:26.834 [main] DEBUG io.github.longfish801 - line call
10:33:26.888 [main] DEBUG io.github.longfish801 - text call: 【行－】
10:33:26.937 [main] DEBUG io.github.longfish801 - line call
10:33:26.992 [main] DEBUG io.github.longfish801 - text call: 【－行】
10:33:27.041 [main] DEBUG io.github.longfish801 - line call
10:33:27.117 [main] DEBUG io.github.longfish801 - text call: 【＝見出しセル】首輪の色
10:33:27.167 [main] DEBUG io.github.longfish801 - line call
10:33:27.223 [main] DEBUG io.github.longfish801 - text call: 【＝セル】
10:33:27.285 [main] DEBUG io.github.longfish801 - line call
10:33:27.357 [main] DEBUG io.github.longfish801 - text call: 【＝セル】赤
10:33:27.408 [main] DEBUG io.github.longfish801 - line call
10:33:27.462 [main] DEBUG io.github.longfish801 - text call: 【行－】
10:33:27.513 [main] DEBUG io.github.longfish801 - line call
10:33:27.567 [main] DEBUG io.github.longfish801 - text call: 【表－】
10:33:27.621 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:27.672 [main] DEBUG io.github.longfish801 - para call
10:33:27.722 [main] DEBUG io.github.longfish801 - line call
10:33:27.776 [main] DEBUG io.github.longfish801 - text call: コラム
10:33:27.825 [main] DEBUG io.github.longfish801 - para call
10:33:27.887 [main] DEBUG io.github.longfish801 - line call
10:33:27.939 [main] DEBUG io.github.longfish801 - text call: 　五つ以上連続するハイフン(-)による区切り行で囲まれた範囲を、コラムとみなします。
10:33:27.987 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:28.039 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:28.092 [main] DEBUG io.github.longfish801 - para call
10:33:28.144 [main] DEBUG io.github.longfish801 - line call
10:33:28.201 [main] DEBUG io.github.longfish801 - text call: 　日本人の四割は血液型がＯ型です。
10:33:28.250 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:28.302 [main] DEBUG io.github.longfish801 - para call
10:33:28.352 [main] DEBUG io.github.longfish801 - line call
10:33:28.407 [main] DEBUG io.github.longfish801 - text call: 【－コラム】
10:33:28.469 [main] DEBUG io.github.longfish801 - line call
10:33:28.526 [main] DEBUG io.github.longfish801 - text call: 　日本人の四割は血液型がＯ型です。
10:33:28.577 [main] DEBUG io.github.longfish801 - line call
10:33:28.633 [main] DEBUG io.github.longfish801 - text call: 【コラム－】
10:33:28.681 [main] DEBUG io.github.longfish801 - para call
10:33:28.731 [main] DEBUG io.github.longfish801 - line call
10:33:28.784 [main] DEBUG io.github.longfish801 - text call: 　五つ以上連続するハイフン(-)で任意の文字列を囲むと、行範囲タグのタグ名にすることができます。
10:33:28.833 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:28.885 [main] DEBUG io.github.longfish801 - para call
10:33:28.935 [main] DEBUG io.github.longfish801 - line call
10:33:29.002 [main] DEBUG io.github.longfish801 - text call: ----- 引用 -----
10:33:29.052 [main] DEBUG io.github.longfish801 - line call
10:33:29.108 [main] DEBUG io.github.longfish801 - text call: 　吾輩は猫である。
10:33:29.158 [main] DEBUG io.github.longfish801 - line call
10:33:29.213 [main] DEBUG io.github.longfish801 - text call: 【＝引用元】夏目漱石『吾輩は猫である』
10:33:29.262 [main] DEBUG io.github.longfish801 - line call
10:33:29.317 [main] DEBUG io.github.longfish801 - text call: ----- 引用 -----
10:33:29.366 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:29.417 [main] DEBUG io.github.longfish801 - para call
10:33:29.468 [main] DEBUG io.github.longfish801 - line call
10:33:29.523 [main] DEBUG io.github.longfish801 - text call: 【－引用】
10:33:29.586 [main] DEBUG io.github.longfish801 - line call
10:33:29.641 [main] DEBUG io.github.longfish801 - text call: 　吾輩は猫である。
10:33:29.690 [main] DEBUG io.github.longfish801 - line call
10:33:29.745 [main] DEBUG io.github.longfish801 - text call: 【＝引用元】夏目漱石『吾輩は猫である』
10:33:29.794 [main] DEBUG io.github.longfish801 - line call
10:33:29.849 [main] DEBUG io.github.longfish801 - text call: 【引用－】
10:33:29.898 [main] DEBUG io.github.longfish801 - para call
10:33:29.948 [main] DEBUG io.github.longfish801 - line call
10:33:30.001 [main] DEBUG io.github.longfish801 - text call: 　小見出しを行範囲開始タグの第一属性に記述することができます。
10:33:30.050 [main] DEBUG io.github.longfish801 - line call
10:33:30.103 [main] DEBUG io.github.longfish801 - text call: 　五つ以上連続するハイフン(-)で囲む文字列に全角コロン（：）を含めてください。
10:33:30.182 [main] DEBUG io.github.longfish801 - line call
10:33:30.236 [main] DEBUG io.github.longfish801 - text call: 　全角コロンの前に行範囲タグ名を、全角コロンの後に小見出し名をつけます。
10:33:30.286 [main] DEBUG io.github.longfish801 - line call
10:33:30.338 [main] DEBUG io.github.longfish801 - text call: 　文字列「コラム：」の前と、小見出し名の後に半角スペースをひとつ入れてください。
10:33:30.388 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:30.438 [main] DEBUG io.github.longfish801 - para call
10:33:30.488 [main] DEBUG io.github.longfish801 - line call
10:33:30.543 [main] DEBUG io.github.longfish801 - text call: ----- 注意：中火とは -----
10:33:30.592 [main] DEBUG io.github.longfish801 - line call
10:33:30.647 [main] DEBUG io.github.longfish801 - text call: 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。
10:33:30.696 [main] DEBUG io.github.longfish801 - line call
10:33:30.764 [main] DEBUG io.github.longfish801 - text call: ----- 注意：中火とは -----
10:33:30.813 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:30.866 [main] DEBUG io.github.longfish801 - para call
10:33:30.915 [main] DEBUG io.github.longfish801 - line call
10:33:30.971 [main] DEBUG io.github.longfish801 - text call: 【－注意：中火とは】
10:33:31.019 [main] DEBUG io.github.longfish801 - line call
10:33:31.075 [main] DEBUG io.github.longfish801 - text call: 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。
10:33:31.124 [main] DEBUG io.github.longfish801 - line call
10:33:31.179 [main] DEBUG io.github.longfish801 - text call: 【注意－】
10:33:31.227 [main] DEBUG io.github.longfish801 - para call
10:33:31.289 [main] DEBUG io.github.longfish801 - line call
10:33:31.359 [main] DEBUG io.github.longfish801 - text call: 　なお、これらコラムを入れ子にすることはできません。
10:33:31.408 [main] DEBUG io.github.longfish801 - line call
10:33:31.460 [main] DEBUG io.github.longfish801 - text call: 　入れ子を実現したい場合は行範囲タグを直接記述してください。
10:33:31.532 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:31.583 [main] DEBUG io.github.longfish801 - para call
10:33:31.632 [main] DEBUG io.github.longfish801 - line call
10:33:31.687 [main] DEBUG io.github.longfish801 - text call: BLエスケープ
10:33:31.736 [main] DEBUG io.github.longfish801 - para call
10:33:31.817 [main] DEBUG io.github.longfish801 - line call
10:33:31.879 [main] DEBUG io.github.longfish801 - text call: 　BLtxt記法上の特殊文字をエスケープします。
10:33:31.941 [main] DEBUG io.github.longfish801 - line call
10:33:31.993 [main] DEBUG io.github.longfish801 - text call: 　先頭が全角シャープ（＃）で始まる文字列で、エスケープ対象を囲みます。
10:33:32.042 [main] DEBUG io.github.longfish801 - line call
10:33:32.095 [main] DEBUG io.github.longfish801 - text call: 　前後に空行を設けてください。
10:33:32.144 [main] DEBUG io.github.longfish801 - line call
10:33:32.197 [main] DEBUG io.github.longfish801 - text call: 　変換後に全角シャープは削除しますが、その後にある文字列は残します。
10:33:32.245 [main] DEBUG io.github.longfish801 - line call
10:33:32.298 [main] DEBUG io.github.longfish801 - text call: 　全角シャープの直後に改行がある場合は、行自体を削除します。
10:33:32.346 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:32.398 [main] DEBUG io.github.longfish801 - para call
10:33:32.448 [main] DEBUG io.github.longfish801 - line call
10:33:32.516 [main] DEBUG io.github.longfish801 - text call: 墨付きカッコが
10:33:32.567 [main] DEBUG io.github.longfish801 - inline call: inline#強調
10:33:32.622 [main] DEBUG io.github.longfish801 - text call: 表示されます。
10:33:32.671 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:32.722 [main] DEBUG io.github.longfish801 - para call
10:33:32.772 [main] DEBUG io.github.longfish801 - line call
10:33:32.827 [main] DEBUG io.github.longfish801 - text call: 墨付きカッコが￥【強調￥：そのまま￥】表示されます。
10:33:32.882 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:32.940 [main] DEBUG io.github.longfish801 - para call
10:33:32.989 [main] DEBUG io.github.longfish801 - line call
10:33:33.045 [main] DEBUG io.github.longfish801 - text call: 文中タグ／文範囲タグへ整形
10:33:33.112 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:33.164 [main] DEBUG io.github.longfish801 - para call
10:33:33.214 [main] DEBUG io.github.longfish801 - line call
10:33:33.268 [main] DEBUG io.github.longfish801 - text call: リンク
10:33:33.319 [main] DEBUG io.github.longfish801 - para call
10:33:33.370 [main] DEBUG io.github.longfish801 - line call
10:33:33.441 [main] DEBUG io.github.longfish801 - text call: 　一番目の属性にリンクとして表示する文字列を、二番目の属性にリンク先アドレスを指定してください。
10:33:33.515 [main] DEBUG io.github.longfish801 - line call
10:33:33.571 [main] DEBUG io.github.longfish801 - text call: 　一番目の属性のみ指定した場合は、表示する文字列とリンク先アドレスを同じ値とみなします。
10:33:33.627 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:33.709 [main] DEBUG io.github.longfish801 - para call
10:33:33.761 [main] DEBUG io.github.longfish801 - line call
10:33:33.817 [main] DEBUG io.github.longfish801 - text call: 　詳しくは【リンク：ネット検索：https://www.google.co.jp/】してください。
10:33:33.868 [main] DEBUG io.github.longfish801 - line call
10:33:33.943 [main] DEBUG io.github.longfish801 - text call: 　【リンク：https://www.google.co.jp/】でネット検索できます。
10:33:33.994 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:34.052 [main] DEBUG io.github.longfish801 - para call
10:33:34.108 [main] DEBUG io.github.longfish801 - line call
10:33:34.171 [main] DEBUG io.github.longfish801 - text call: 　詳しくは【｜リンク：https://www.google.co.jp/】ネット検索【リンク｜】してください。
10:33:34.228 [main] DEBUG io.github.longfish801 - line call
10:33:34.287 [main] DEBUG io.github.longfish801 - text call: 　【｜リンク：https://www.google.co.jp/】https://www.google.co.jp/【リンク｜】でネット検索できます。
10:33:34.352 [main] DEBUG io.github.longfish801 - para call
10:33:34.403 [main] DEBUG io.github.longfish801 - line call
10:33:34.457 [main] DEBUG io.github.longfish801 - text call: 　URLのみを記述した行は、そのリンク先アドレスに対してタグ付けします。
10:33:34.508 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:34.566 [main] DEBUG io.github.longfish801 - para call
10:33:34.663 [main] DEBUG io.github.longfish801 - line call
10:33:34.755 [main] DEBUG io.github.longfish801 - text call: https://www.google.co.jp/
10:33:34.814 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:34.877 [main] DEBUG io.github.longfish801 - para call
10:33:34.941 [main] DEBUG io.github.longfish801 - line call
10:33:35.006 [main] DEBUG io.github.longfish801 - text call: 【｜リンク：https://www.google.co.jp/】https://www.google.co.jp/【リンク｜】
10:33:35.073 [main] DEBUG io.github.longfish801 - para call
10:33:35.133 [main] DEBUG io.github.longfish801 - line call
10:33:35.237 [main] DEBUG io.github.longfish801 - text call: 　全角括弧でリンク先アドレスを挟んだ箇所は、そのリンク先アドレスに対してタグ付けします。
10:33:35.359 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:35.470 [main] DEBUG io.github.longfish801 - para call
10:33:35.572 [main] DEBUG io.github.longfish801 - line call
10:33:35.654 [main] DEBUG io.github.longfish801 - text call: 　Google（https://www.google.co.jp/）で検索しました。
10:33:35.723 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:35.797 [main] DEBUG io.github.longfish801 - para call
10:33:35.883 [main] DEBUG io.github.longfish801 - line call
10:33:35.992 [main] DEBUG io.github.longfish801 - text call: 　Google（【｜リンク：https://www.google.co.jp/】https://www.google.co.jp/【リンク｜】）で検索しました。
10:33:36.115 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:36.183 [main] DEBUG io.github.longfish801 - para call
10:33:36.237 [main] DEBUG io.github.longfish801 - line call
10:33:36.300 [main] DEBUG io.github.longfish801 - text call: 強調
10:33:36.351 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:36.404 [main] DEBUG io.github.longfish801 - para call
10:33:36.455 [main] DEBUG io.github.longfish801 - line call
10:33:36.514 [main] DEBUG io.github.longfish801 - text call: 　必ず最後に【強調：確認ボタン】をクリックしてください。
10:33:36.565 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:36.619 [main] DEBUG io.github.longfish801 - para call
10:33:36.673 [main] DEBUG io.github.longfish801 - line call
10:33:36.749 [main] DEBUG io.github.longfish801 - text call: 　必ず最後に【｜強調】確認ボタン【強調｜】をクリックしてください。
10:33:36.820 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:36.893 [main] DEBUG io.github.longfish801 - para call
10:33:36.958 [main] DEBUG io.github.longfish801 - line call
10:33:37.019 [main] DEBUG io.github.longfish801 - text call: 最強調
10:33:37.071 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:37.125 [main] DEBUG io.github.longfish801 - para call
10:33:37.177 [main] DEBUG io.github.longfish801 - line call
10:33:37.234 [main] DEBUG io.github.longfish801 - text call: 　間違えて【最強調：自爆スイッチ】を押さないでください。
10:33:37.285 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:37.340 [main] DEBUG io.github.longfish801 - para call
10:33:37.405 [main] DEBUG io.github.longfish801 - line call
10:33:37.462 [main] DEBUG io.github.longfish801 - text call: 　間違えて【｜最強調】自爆スイッチ【最強調｜】を押さないでください。
10:33:37.519 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:37.576 [main] DEBUG io.github.longfish801 - para call
10:33:37.637 [main] DEBUG io.github.longfish801 - line call
10:33:37.700 [main] DEBUG io.github.longfish801 - text call: ぼかし
10:33:37.756 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:37.817 [main] DEBUG io.github.longfish801 - para call
10:33:37.870 [main] DEBUG io.github.longfish801 - line call
10:33:37.929 [main] DEBUG io.github.longfish801 - text call: 　もちろん本当【ぼかし：かもしれない】ですよ。
10:33:37.994 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:38.050 [main] DEBUG io.github.longfish801 - para call
10:33:38.103 [main] DEBUG io.github.longfish801 - line call
10:33:38.161 [main] DEBUG io.github.longfish801 - text call: 　もちろん本当【｜ぼかし】かもしれない【ぼかし｜】ですよ。
10:33:38.218 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:38.273 [main] DEBUG io.github.longfish801 - para call
10:33:38.331 [main] DEBUG io.github.longfish801 - line call
10:33:38.396 [main] DEBUG io.github.longfish801 - text call: 訂正
10:33:38.455 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:38.514 [main] DEBUG io.github.longfish801 - para call
10:33:38.569 [main] DEBUG io.github.longfish801 - line call
10:33:38.641 [main] DEBUG io.github.longfish801 - text call: 　富士山の標高は【訂正：３７７７メートル】３７７６メートルです。
10:33:38.696 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:38.754 [main] DEBUG io.github.longfish801 - para call
10:33:38.810 [main] DEBUG io.github.longfish801 - line call
10:33:38.867 [main] DEBUG io.github.longfish801 - text call: 　富士山の標高は【｜訂正】３７７７メートル【訂正｜】３７７６メートルです。
10:33:38.924 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:38.978 [main] DEBUG io.github.longfish801 - para call
10:33:39.032 [main] DEBUG io.github.longfish801 - line call
10:33:39.092 [main] DEBUG io.github.longfish801 - text call: 傍点
10:33:39.142 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:39.196 [main] DEBUG io.github.longfish801 - para call
10:33:39.261 [main] DEBUG io.github.longfish801 - line call
10:33:39.319 [main] DEBUG io.github.longfish801 - text call: 　まだ【傍点：午前三時】じゃないか。
10:33:39.370 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:39.426 [main] DEBUG io.github.longfish801 - para call
10:33:39.482 [main] DEBUG io.github.longfish801 - line call
10:33:39.544 [main] DEBUG io.github.longfish801 - text call: 　まだ【｜傍点】午前三時【傍点｜】じゃないか。
10:33:39.605 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:39.661 [main] DEBUG io.github.longfish801 - para call
10:33:39.713 [main] DEBUG io.github.longfish801 - line call
10:33:39.769 [main] DEBUG io.github.longfish801 - text call: 縦中横
10:33:39.821 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:39.888 [main] DEBUG io.github.longfish801 - para call
10:33:39.939 [main] DEBUG io.github.longfish801 - line call
10:33:39.994 [main] DEBUG io.github.longfish801 - text call: 　シェイクスピア全集の第【縦中横：10】巻に記述されています。
10:33:40.044 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:40.097 [main] DEBUG io.github.longfish801 - para call
10:33:40.147 [main] DEBUG io.github.longfish801 - line call
10:33:40.202 [main] DEBUG io.github.longfish801 - text call: 　シェイクスピア全集の第【｜縦中横】10【縦中横｜】巻に記述されています。
10:33:40.258 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:40.311 [main] DEBUG io.github.longfish801 - para call
10:33:40.363 [main] DEBUG io.github.longfish801 - line call
10:33:40.433 [main] DEBUG io.github.longfish801 - text call: 備考
10:33:40.485 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:40.537 [main] DEBUG io.github.longfish801 - para call
10:33:40.590 [main] DEBUG io.github.longfish801 - line call
10:33:40.645 [main] DEBUG io.github.longfish801 - text call: 　『乱れからくり』の作者は【備考：泡坂妻夫：泡は特殊文字】です。
10:33:40.695 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:40.748 [main] DEBUG io.github.longfish801 - para call
10:33:40.799 [main] DEBUG io.github.longfish801 - line call
10:33:40.856 [main] DEBUG io.github.longfish801 - text call: 　『乱れからくり』の作者は【｜備考：泡は特殊文字】泡坂妻夫【備考｜】です。
10:33:40.912 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:40.964 [main] DEBUG io.github.longfish801 - para call
10:33:41.029 [main] DEBUG io.github.longfish801 - line call
10:33:41.084 [main] DEBUG io.github.longfish801 - text call: ルビ
10:33:41.134 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:41.187 [main] DEBUG io.github.longfish801 - para call
10:33:41.238 [main] DEBUG io.github.longfish801 - line call
10:33:41.296 [main] DEBUG io.github.longfish801 - text call: 　【ルビ：出納：すいとう】係は言った。
10:33:41.355 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:41.415 [main] DEBUG io.github.longfish801 - para call
10:33:41.475 [main] DEBUG io.github.longfish801 - line call
10:33:41.535 [main] DEBUG io.github.longfish801 - text call: 　【｜ルビ：すいとう】出納【ルビ｜】係は言った。
10:33:41.585 [main] DEBUG io.github.longfish801 - para call
10:33:41.649 [main] DEBUG io.github.longfish801 - line call
10:33:41.703 [main] DEBUG io.github.longfish801 - text call: 以上
10:33:41.805 [main] DEBUG io.github.longfish801 - para call
10:33:41.859 [main] DEBUG io.github.longfish801 - line call
10:33:41.917 [main] DEBUG io.github.longfish801 - text call: BLtxt変換
10:33:42.021 [main] DEBUG io.github.longfish801 - para call
10:33:42.075 [main] DEBUG io.github.longfish801 - line call
10:33:42.134 [main] DEBUG io.github.longfish801 - text call: 概要
10:33:42.185 [main] DEBUG io.github.longfish801 - para call
10:33:42.252 [main] DEBUG io.github.longfish801 - line call
10:33:42.307 [main] DEBUG io.github.longfish801 - text call: 行タグ／行範囲タグへ整形
10:33:42.361 [main] DEBUG io.github.longfish801 - para call
10:33:42.421 [main] DEBUG io.github.longfish801 - line call
10:33:42.488 [main] DEBUG io.github.longfish801 - text call: 見出し
10:33:42.545 [main] DEBUG io.github.longfish801 - para call
10:33:42.603 [main] DEBUG io.github.longfish801 - line call
10:33:42.659 [main] DEBUG io.github.longfish801 - text call: 小見出し
10:33:42.711 [main] DEBUG io.github.longfish801 - para call
10:33:42.764 [main] DEBUG io.github.longfish801 - line call
10:33:42.820 [main] DEBUG io.github.longfish801 - text call: 箇条書き
10:33:42.885 [main] DEBUG io.github.longfish801 - para call
10:33:42.940 [main] DEBUG io.github.longfish801 - line call
10:33:43.003 [main] DEBUG io.github.longfish801 - text call: 表
10:33:43.059 [main] DEBUG io.github.longfish801 - para call
10:33:43.117 [main] DEBUG io.github.longfish801 - line call
10:33:43.178 [main] DEBUG io.github.longfish801 - text call: コラム
10:33:43.232 [main] DEBUG io.github.longfish801 - para call
10:33:43.286 [main] DEBUG io.github.longfish801 - line call
10:33:43.341 [main] DEBUG io.github.longfish801 - text call: BLエスケープ
10:33:43.392 [main] DEBUG io.github.longfish801 - para call
10:33:43.446 [main] DEBUG io.github.longfish801 - line call
10:33:43.514 [main] DEBUG io.github.longfish801 - text call: 文中タグ／文範囲タグへ整形
10:33:43.565 [main] DEBUG io.github.longfish801 - para call
10:33:43.618 [main] DEBUG io.github.longfish801 - line call
10:33:43.673 [main] DEBUG io.github.longfish801 - text call: リンク
10:33:43.724 [main] DEBUG io.github.longfish801 - para call
10:33:43.776 [main] DEBUG io.github.longfish801 - line call
10:33:43.831 [main] DEBUG io.github.longfish801 - text call: 強調
10:33:43.882 [main] DEBUG io.github.longfish801 - para call
10:33:43.936 [main] DEBUG io.github.longfish801 - line call
10:33:43.991 [main] DEBUG io.github.longfish801 - text call: 最強調
10:33:44.042 [main] DEBUG io.github.longfish801 - para call
10:33:44.108 [main] DEBUG io.github.longfish801 - line call
10:33:44.164 [main] DEBUG io.github.longfish801 - text call: ぼかし
10:33:44.216 [main] DEBUG io.github.longfish801 - para call
10:33:44.269 [main] DEBUG io.github.longfish801 - line call
10:33:44.326 [main] DEBUG io.github.longfish801 - text call: 訂正
10:33:44.376 [main] DEBUG io.github.longfish801 - para call
10:33:44.430 [main] DEBUG io.github.longfish801 - line call
10:33:44.486 [main] DEBUG io.github.longfish801 - text call: 傍点
10:33:44.537 [main] DEBUG io.github.longfish801 - para call
10:33:44.590 [main] DEBUG io.github.longfish801 - line call
10:33:44.645 [main] DEBUG io.github.longfish801 - text call: 縦中横
10:33:44.711 [main] DEBUG io.github.longfish801 - para call
10:33:44.763 [main] DEBUG io.github.longfish801 - line call
10:33:44.819 [main] DEBUG io.github.longfish801 - text call: 備考
10:33:44.870 [main] DEBUG io.github.longfish801 - para call
10:33:44.921 [main] DEBUG io.github.longfish801 - line call
10:33:44.976 [main] DEBUG io.github.longfish801 - text call: ルビ
10:33:45.034 [Thread-43] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行開始 key=washscr#BLtxt文書へ整形
10:33:45.119 [ForkJoinPool-19-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#箇条書き
10:33:45.119 [ForkJoinPool-19-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY reprex#各種置換
10:33:45.162 [ForkJoinPool-20-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY replace#エスケープ
10:33:45.205 [ForkJoinPool-21-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#表
10:33:45.226 [ForkJoinPool-22-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#コラムを整形
10:33:45.249 [ForkJoinPool-23-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#タグ付きコラムを整形
10:33:45.249 [ForkJoinPool-24-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY slice#空白行区切り
10:33:45.250 [ForkJoinPool-24-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#BLエスケープ
10:33:45.250 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【＃タイトル】HTML変換]
10:33:45.250 [ForkJoinPool-24-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#表
10:33:45.250 [ForkJoinPool-24-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#タグ付きコラム
10:33:45.250 [ForkJoinPool-24-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#コラム
10:33:45.271 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■概要]
10:33:45.299 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＃タイトル】HTML変換]
10:33:45.315 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　yakumoは変換名「_html」（HTML変換）をあらかじめ用意しています。, 　HTML変換は、テキストを HTML5形式へ変換するための設定です。, 　変換に利用しているクロージャマップの処理内容について、以下に説明します。]
10:33:45.354 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】概要]
10:33:45.359 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■ブロック要素, □改行と段落]
10:33:45.398 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　yakumoは変換名「_html」（HTML変換）をあらかじめ用意しています。, 　HTML変換は、テキストを HTML5形式へ変換するための設定です。, 　変換に利用しているクロージャマップの処理内容について、以下に説明します。]
10:33:45.402 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　改行は brタグを挿入します。, 　段落は pタグで囲みます。, 　なお、空行が二行以上あっても、変換結果には反映されません。, 　HTML文法上の特殊文字があるときはエスケープします。]
10:33:45.440 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】ブロック要素, 【＝見出し：3】改行と段落]
10:33:45.447 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　おいしいカレーを作るには"隠し味"が大切です。, 　隠し味にもいろいろなものがあります。]
10:33:45.489 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　改行は brタグを挿入します。, 　段落は pタグで囲みます。, 　なお、空行が二行以上あっても、変換結果には反映されません。, 　HTML文法上の特殊文字があるときはエスケープします。]
10:33:45.493 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　一般家庭で良く使われる<隠し味>を試してみましょう。, ＃----- コラム：BLtxt文書 -----]
10:33:45.516 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, <p>　おいしいカレーを作るには&quot;隠し味&quot;が大切です。<br/>, 　隠し味にもいろいろなものがあります。</p>]
10:33:45.538 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [<p>　一般家庭で良く使われる&lt;隠し味&gt;を試してみましょう。</p>, ----- コラム：HTML -----]
10:33:45.578 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, <p>　おいしいカレーを作るには&quot;隠し味&quot;が大切です。<br/>, 　隠し味にもいろいろなものがあります。</p>]
10:33:45.583 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　以下の行タグ、行範囲タグ内では、brタグのみ挿入します。]
10:33:45.622 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[<p>　一般家庭で良く使われる&lt;隠し味&gt;を試してみましょう。</p>, ----- コラム：HTML -----]
10:33:45.627 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [・見出し、小見出し, ・挿入図, ・箇条書き：項目、対象、説明, ・表：見出しセル、セル, ・引用元]
10:33:45.668 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　以下の行タグ、行範囲タグ内では、brタグのみ挿入します。]
10:33:45.672 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　以下の行範囲タグ内では brタグ、pタグを付与しません。]
10:33:45.726 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [・生データ, ・整形済, ・コード]
10:33:45.790 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□タイトル、サブタイトル、著者名]
10:33:45.808 [ForkJoinPool-19-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：順序なし】, 【－項目】, 見出し、小見出し, 【項目－】, 【－項目】, 挿入図, 【項目－】, 【－項目】, 箇条書き：項目、対象、説明, 【項目－】, 【－項目】, 表：見出しセル、セル, 【項目－】, 【－項目】, 引用元, 【項目－】, 【箇条書き－】]
10:33:45.809 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：順序なし】, 【－項目】, 見出し、小見出し, 【項目－】, 【－項目】, 挿入図, 【項目－】, 【－項目】, 箇条書き：項目、対象、説明, 【項目－】, 【－項目】, 表：見出しセル、セル, 【項目－】, 【－項目】, 引用元, 【項目－】, 【箇条書き－】]
10:33:45.827 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　タイトル、サブタイトル、著者名は、含意タグで指定します。]
10:33:45.848 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　以下の行範囲タグ内では brタグ、pタグを付与しません。]
10:33:45.867 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：テキスト -----, 【＃タイトル】円周率について, 【＃サブタイトル】著名な語呂合わせ, 【＃著者名】山田太郎, ＃----- コラム：テキスト -----]
10:33:45.904 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　含意タグはマップ headに変換します。, 　テンプレートでは、タイトル、サブタイトル、著者名が記述されていれば出力します。]
10:33:45.944 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：テンプレート -----, <head>,  ... 中略 ..., <% if (head.containsKey('タイトル')){ %><title><%= head['タイトル'].replaceAll(/<.+?>/, '') %></title><% } %>, </head>,  ... 中略 ..., <header class="container">, <% if (head.containsKey('タイトル')){ %><h1><%= head['タイトル'] %><% if (head.containsKey('サブタイトル')){ %> <small><%= head['サブタイトル'] %></small><% } %></h1><% } %>, <% if (head.containsKey('著者名')){ %><div class="author"><%= head['著者名'] %></div><% } %>, ----- コラム：テンプレート -----]
10:33:45.957 [ForkJoinPool-19-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：順序なし】, 【－項目】, 生データ, 【項目－】, 【－項目】, 整形済, 【項目－】, 【－項目】, コード, 【項目－】, 【箇条書き－】]
10:33:45.958 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：順序なし】, 【－項目】, 生データ, 【項目－】, 【－項目】, 整形済, 【項目－】, 【－項目】, コード, 【項目－】, 【箇条書き－】]
10:33:45.981 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□見出しと目次]
10:33:46.002 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】タイトル、サブタイトル、著者名]
10:33:46.021 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　hタグを生成します。一番目の属性値が見出しのレベルとなります。, 　目次からページ内リンクで移動できるよう、aタグを挿入します。, 　name属性には、BLtxt文書を XML化したときの snum属性を利用します。]
10:33:46.037 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　タイトル、サブタイトル、著者名は、含意タグで指定します。]
10:33:46.038 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　おいしいカレーを作るには"隠し味"が大切です。, 　隠し味にもいろいろなものがあります。, , , 　一般家庭で良く使われる<隠し味>を試してみましょう。, ＃----- コラム：BLtxt文書 -----]
10:33:46.061 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【＝見出し：2】カレーの作り方, 【＝見出し：3】材料の準備, ＃----- コラム：BLtxt文書 -----]
10:33:46.101 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　含意タグはマップ headに変換します。, 　テンプレートでは、タイトル、サブタイトル、著者名が記述されていれば出力します。]
10:33:46.119 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　おいしいカレーを作るには"隠し味"が大切です。, 　隠し味にもいろいろなものがあります。, , , 　一般家庭で良く使われる<隠し味>を試してみましょう。, ----- コラム：BLtxt文書 -----]
10:33:46.146 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, <h2><a name="1">カレーの作り方</a></h2>, <h3><a name="2">材料の準備</a></h3>, ----- コラム：HTML -----]
10:33:46.176 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：テンプレート -----, <head>,  ... 中略 ..., <% if (head.containsKey('タイトル')){ %><title><%= head['タイトル'].replaceAll(/<.+?>/, '') %></title><% } %>, </head>,  ... 中略 ..., <header class="container">, <% if (head.containsKey('タイトル')){ %><h1><%= head['タイトル'] %><% if (head.containsKey('サブタイトル')){ %> <small><%= head['サブタイトル'] %></small><% } %></h1><% } %>, <% if (head.containsKey('著者名')){ %><div class="author"><%= head['著者名'] %></div><% } %>, ----- コラム：テンプレート -----]
10:33:46.195 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　見出しから目次を生成し、バインド変数のリスト indexに格納します。, 　リスト indexの要素はマップになっており、キー levelに見出しレベルを、キー hrefにリンク先アドレスを、キーtitleにリンク対象文字列を格納しています。, 　テンプレートでは以下のようにして出力しています。]
10:33:46.217 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】見出しと目次]
10:33:46.236 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：テンプレート -----, <% if (index.size() > 0){ %><nav class="list-group">, <% index.each { Map map -> %><a href="<%= map['href'] %>" class="list-group-item"><%= '　' * (map['level'] - 2) %><%= map['title'] %></a>, <% } %></nav><% } %>, </header>, ----- コラム：テンプレート -----]
10:33:46.257 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　hタグを生成します。一番目の属性値が見出しのレベルとなります。, 　目次からページ内リンクで移動できるよう、aタグを挿入します。, 　name属性には、BLtxt文書を XML化したときの snum属性を利用します。]
10:33:46.257 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：テキスト -----, 【＃タイトル】円周率について, 【＃サブタイトル】著名な語呂合わせ, 【＃著者名】山田太郎, ＃----- コラム：テキスト -----]
10:33:46.277 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□小見出し]
10:33:46.298 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, <h2><a name="1">カレーの作り方</a></h2>, <h3><a name="2">材料の準備</a></h3>, ----- コラム：HTML -----]
10:33:46.337 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　前のほうで記述された見出しよりも、ひとつ見出しレベルが大きい見出しを作成します。, 　見出しが記述されていない場合、見出しレベルは 2で作成します。, 　小見出しは目次に反映しません。]
10:33:46.374 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【＝見出し：3】材料の準備, 【＝小見出し】巨大数の歴史, ＃----- コラム：BLtxt文書 -----]
10:33:46.394 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　見出しから目次を生成し、バインド変数のリスト indexに格納します。, 　リスト indexの要素はマップになっており、キー levelに見出しレベルを、キー hrefにリンク先アドレスを、キーtitleにリンク対象文字列を格納しています。, 　テンプレートでは以下のようにして出力しています。]
10:33:46.412 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, <h3><a name="2">材料の準備</a></h3>, <h4>巨大数の歴史</h4>, ----- コラム：HTML -----]
10:33:46.430 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：テキスト -----, ￥【＃タイトル￥】円周率について, ￥【＃サブタイトル￥】著名な語呂合わせ, ￥【＃著者名￥】山田太郎, ----- コラム：テキスト -----]
10:33:46.451 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□挿入図]
10:33:46.472 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：テンプレート -----, <% if (index.size() > 0){ %><nav class="list-group">, <% index.each { Map map -> %><a href="<%= map['href'] %>" class="list-group-item"><%= '　' * (map['level'] - 2) %><%= map['title'] %></a>, <% } %></nav><% } %>, </header>, ----- コラム：テンプレート -----]
10:33:46.491 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　figureタグを生成します。, 　行タグの属性に画像の説明、画像ファイルへのパスを指定してください。]
10:33:46.512 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】小見出し]
10:33:46.530 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【＝挿入図：サンプル：img.png】, ＃----- コラム：BLtxt文書 -----]
10:33:46.554 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　前のほうで記述された見出しよりも、ひとつ見出しレベルが大きい見出しを作成します。, 　見出しが記述されていない場合、見出しレベルは 2で作成します。, 　小見出しは目次に反映しません。]
10:33:46.554 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【＝見出し：2】カレーの作り方, 【＝見出し：3】材料の準備, ＃----- コラム：BLtxt文書 -----]
10:33:46.569 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, <div class="img"><img src="img.png" alt="サンプル"></div>, ----- コラム：HTML -----]
10:33:46.605 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, <h3><a name="2">材料の準備</a></h3>, <h4>巨大数の歴史</h4>, ----- コラム：HTML -----]
10:33:46.634 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【＝見出し￥：2￥】カレーの作り方, ￥【＝見出し￥：3￥】材料の準備, ----- コラム：BLtxt文書 -----]
10:33:46.647 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　画像にキャプションを付与することもできます。figcaptionタグを生成します。]
10:33:46.676 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】挿入図]
10:33:46.704 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【＝挿入図：サンプル：img.png】これはイメージです。, ＃----- コラム：BLtxt文書 -----]
10:33:46.729 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　figureタグを生成します。, 　行タグの属性に画像の説明、画像ファイルへのパスを指定してください。]
10:33:46.729 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【＝見出し：3】材料の準備, 【＝小見出し】巨大数の歴史, ＃----- コラム：BLtxt文書 -----]
10:33:46.748 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, <figure><img src="img.png" alt="サンプル" class="img-responsive center-block"><figcaption>これはイメージです。</figcaption></figure>, ----- コラム：HTML -----]
10:33:46.797 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, <div class="img"><img src="img.png" alt="サンプル"></div>, ----- コラム：HTML -----]
10:33:46.825 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【＝見出し￥：3￥】材料の準備, ￥【＝小見出し￥】巨大数の歴史, ----- コラム：BLtxt文書 -----]
10:33:46.843 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□註、註記]
10:33:46.876 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　画像にキャプションを付与することもできます。figcaptionタグを生成します。]
10:33:46.877 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【＝挿入図：サンプル：img.png】, ＃----- コラム：BLtxt文書 -----]
10:33:46.889 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　註は文中タグで、注記は含意範囲タグで記述します。, 　一番目の属性に、紐付けのため共通する文字列を指定してください。]
10:33:46.955 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, <figure><img src="img.png" alt="サンプル" class="img-responsive center-block"><figcaption>これはイメージです。</figcaption></figure>, ----- コラム：HTML -----]
10:33:46.974 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【＝挿入図￥：サンプル￥：img.png￥】, ----- コラム：BLtxt文書 -----]
10:33:46.999 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　XML【註：XML】をHTML【註：HTML】に変換します。]
10:33:47.019 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】註、註記]
10:33:47.029 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【＊註記：XML】, 　eXtensible Markup Languageの略です。, 【註記＊】, 【＊註記：HTML】, 　Hyper Text Markup Languageの略です。, 【註記＊】, ＃----- コラム：BLtxt文書 -----]
10:33:47.062 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　註は文中タグで、注記は含意範囲タグで記述します。, 　一番目の属性に、紐付けのため共通する文字列を指定してください。]
10:33:47.066 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　HTML変換時に通番をふります。]
10:33:47.066 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【＝挿入図：サンプル：img.png】これはイメージです。, ＃----- コラム：BLtxt文書 -----]
10:33:47.102 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, <p>　XML<sup><a id="f1" href="#t1">*1</a></sup>をHTML<sup><a id="f2" href="#t2">*2</a></sup>に変換します。</p>]
10:33:47.140 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [<dl class="note">, <dt><a name="t1" href="#f1">[*1]</a></dt>, <dd>　eXtensible Markup Languageの略です。</dd>, <dt><a name="t2" href="#f2">[*2]</a></dt>, <dd>　Hyper Text Markup Languageの略です。</dd>, </dl>, ----- コラム：HTML -----]
10:33:47.160 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　HTML変換時に通番をふります。]
10:33:47.178 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　生成した註記は、バインド変数 noteに格納します。, 　テンプレートでは以下のとおり出力しています。]
10:33:47.196 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【＝挿入図￥：サンプル￥：img.png￥】これはイメージです。, ----- コラム：BLtxt文書 -----]
10:33:47.215 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：テンプレート -----, <% if (!note.empty){ %><aside>, <%= note %>, </aside><% } %>, ----- コラム：テンプレート -----]
10:33:47.227 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, <p>　XML<sup><a id="f1" href="#t1">*1</a></sup>をHTML<sup><a id="f2" href="#t2">*2</a></sup>に変換します。</p>]
10:33:47.256 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□箇条書き]
10:33:47.277 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[<dl class="note">, <dt><a name="t1" href="#f1">[*1]</a></dt>, <dd>　eXtensible Markup Languageの略です。</dd>, <dt><a name="t2" href="#f2">[*2]</a></dt>, <dd>　Hyper Text Markup Languageの略です。</dd>, </dl>, ----- コラム：HTML -----]
10:33:47.296 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　箇条書きには順序あり、順序なし、項目説明の三種類があります。, 　それぞれ ul, ol, dlタグを生成します。, 　順序あり、順序なしの項目は liタグを生成します。, 　項目説明の項目と説明は、それぞれ dt, ddタグを生成します。]
10:33:47.317 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　生成した註記は、バインド変数 noteに格納します。, 　テンプレートでは以下のとおり出力しています。]
10:33:47.323 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－箇条書き】, 【－項目】, じゃがいも, 【項目－】, 【－項目】, ニンジン, 【項目－】, 【－項目】, 玉ねぎ, 【－箇条書き】, 【－説明】, 刻むときは注意。, 涙がでます。, 【説明－】, 【箇条書き－】, 【項目－】, 【－項目】, カレー粉, 【－箇条書き：順序あり】, 【－項目】, ジャワカレー, 【項目－】, 【－項目】, バーモンドカレー, 【項目－】, 【箇条書き－】, 【項目－】, 【箇条書き－】, ＃----- コラム：BLtxt文書 -----]
10:33:47.344 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：テンプレート -----, <% if (!note.empty){ %><aside>, <%= note %>, </aside><% } %>, ----- コラム：テンプレート -----]
10:33:47.363 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, <ul>, <li>じゃがいも</li>, <li>ニンジン</li>, <li>玉ねぎ<br/>, <ul>, <li class="dd">→刻むときは注意。<br/>, 　涙がでます。</li>, </ul></li>, <li>カレー粉<br/>, <ol>, <li>ジャワカレー</li>, <li>バーモンドカレー</li>, </ol></li>, </ul>, ----- コラム：HTML -----]
10:33:47.383 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】箇条書き]
10:33:47.403 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　項目説明の箇条書きは以下となります。]
10:33:47.423 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　箇条書きには順序あり、順序なし、項目説明の三種類があります。, 　それぞれ ul, ol, dlタグを生成します。, 　順序あり、順序なしの項目は liタグを生成します。, 　項目説明の項目と説明は、それぞれ dt, ddタグを生成します。]
10:33:47.424 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　XML【註：XML】をHTML【註：HTML】に変換します。, , 【＊註記：XML】, 　eXtensible Markup Languageの略です。, 【註記＊】, 【＊註記：HTML】, 　Hyper Text Markup Languageの略です。, 【註記＊】, ＃----- コラム：BLtxt文書 -----]
10:33:47.453 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－箇条書き：項目説明】, 【－対象】, ターメリック, 【対象－】, 【－箇条書き】, 【－説明】, 香辛料の一種です。, 【説明－】, 【箇条書き－】, 【箇条書き－】, ＃----- コラム：BLtxt文書 -----]
10:33:47.483 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, <ul>, <li>じゃがいも</li>, <li>ニンジン</li>, <li>玉ねぎ<br/>, <ul>, <li class="dd">→刻むときは注意。<br/>, 　涙がでます。</li>, </ul></li>, <li>カレー粉<br/>, <ol>, <li>ジャワカレー</li>, <li>バーモンドカレー</li>, </ol></li>, </ul>, ----- コラム：HTML -----]
10:33:47.519 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　XML￥【註￥：XML￥】をHTML￥【註￥：HTML￥】に変換します。, , ￥【＊註記￥：XML￥】, 　eXtensible Markup Languageの略です。, ￥【註記＊￥】, ￥【＊註記￥：HTML￥】, 　Hyper Text Markup Languageの略です。, ￥【註記＊￥】, ----- コラム：BLtxt文書 -----]
10:33:47.542 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, <dl>, <dt>ターメリック</dt>, <dd>香辛料の一種です。</dd>, </dl>, ----- コラム：HTML -----]
10:33:47.562 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　項目説明の箇条書きは以下となります。]
10:33:47.562 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－箇条書き】, 【－項目】, じゃがいも, 【項目－】, 【－項目】, ニンジン, 【項目－】, 【－項目】, 玉ねぎ, 【－箇条書き】, 【－説明】, 刻むときは注意。, 涙がでます。, 【説明－】, 【箇条書き－】, 【項目－】, 【－項目】, カレー粉, 【－箇条書き：順序あり】, 【－項目】, ジャワカレー, 【項目－】, 【－項目】, バーモンドカレー, 【項目－】, 【箇条書き－】, 【項目－】, 【箇条書き－】, ＃----- コラム：BLtxt文書 -----]
10:33:47.592 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□表]
10:33:47.628 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　tableタグ（class属性値は"table"）を生成します。, 　第一属性に小見出しを指定することもできます。]
10:33:47.649 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, <dl>, <dt>ターメリック</dt>, <dd>香辛料の一種です。</dd>, </dl>, ----- コラム：HTML -----]
10:33:47.664 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－表：各県の名産】, 【－行】, 【＝見出しセル】No., 【＝見出しセル】産物, 【＝見出しセル】産地, 【行－】, 【－行】, 【＝セル】1, 【＝セル】みかん, 【＝セル】愛媛, 【行－】, 【－行】, 【＝セル】2, 【＝セル】茶, 【＝セル】静岡, 【行－】, 【表－】, ＃----- コラム：BLtxt文書 -----]
10:33:47.681 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－箇条書き￥】, ￥【－項目￥】, じゃがいも, ￥【項目－￥】, ￥【－項目￥】, ニンジン, ￥【項目－￥】, ￥【－項目￥】, 玉ねぎ, ￥【－箇条書き￥】, ￥【－説明￥】, 刻むときは注意。, 涙がでます。, ￥【説明－￥】, ￥【箇条書き－￥】, ￥【項目－￥】, ￥【－項目￥】, カレー粉, ￥【－箇条書き￥：順序あり￥】, ￥【－項目￥】, ジャワカレー, ￥【項目－￥】, ￥【－項目￥】, バーモンドカレー, ￥【項目－￥】, ￥【箇条書き－￥】, ￥【項目－￥】, ￥【箇条書き－￥】, ----- コラム：BLtxt文書 -----]
10:33:47.701 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, <aside class="panel panel-default">, <header class="panel-heading">各県の名産</header>, <table class="table">, <tr><th>No.</th><th>産物</th><th>産地</th></tr>, <tr><td>1</td><td>みかん</td><td>愛媛</td></tr>, <tr><td>2</td><td>茶</td><td>静岡</td></tr>, </table>, </aside>, ----- コラム：HTML -----]
10:33:47.724 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】表]
10:33:47.745 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□コラム]
10:33:47.767 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　tableタグ（class属性値は"table"）を生成します。, 　第一属性に小見出しを指定することもできます。]
10:33:47.768 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－箇条書き：項目説明】, 【－対象】, ターメリック, 【対象－】, 【－箇条書き】, 【－説明】, 香辛料の一種です。, 【説明－】, 【箇条書き－】, 【箇条書き－】, ＃----- コラム：BLtxt文書 -----]
10:33:47.787 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　asideタグ（class属性値は"column"）を生成します。]
10:33:47.841 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, <aside class="panel panel-default">, <header class="panel-heading">各県の名産</header>, <table class="table">, <tr><th>No.</th><th>産物</th><th>産地</th></tr>, <tr><td>1</td><td>みかん</td><td>愛媛</td></tr>, <tr><td>2</td><td>茶</td><td>静岡</td></tr>, </table>, </aside>, ----- コラム：HTML -----]
10:33:47.860 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－箇条書き￥：項目説明￥】, ￥【－対象￥】, ターメリック, ￥【対象－￥】, ￥【－箇条書き￥】, ￥【－説明￥】, 香辛料の一種です。, ￥【説明－￥】, ￥【箇条書き－￥】, ￥【箇条書き－￥】, ----- コラム：BLtxt文書 -----]
10:33:47.868 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－コラム】, 　日本人の四割は血液型がＯ型です。, 【コラム－】, ＃----- コラム：BLtxt文書 -----]
10:33:47.903 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】コラム]
10:33:47.910 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, <aside class="panel panel-primary">, <div class="panel-body">, <p>　日本人の四割は血液型がＯ型です。</p>, </div>, </aside>, ----- コラム：HTML -----]
10:33:47.946 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　asideタグ（class属性値は"column"）を生成します。]
10:33:47.946 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－表：各県の名産】, 【－行】, 【＝見出しセル】No., 【＝見出しセル】産物, 【＝見出しセル】産地, 【行－】, 【－行】, 【＝セル】1, 【＝セル】みかん, 【＝セル】愛媛, 【行－】, 【－行】, 【＝セル】2, 【＝セル】茶, 【＝セル】静岡, 【行－】, 【表－】, ＃----- コラム：BLtxt文書 -----]
10:33:47.966 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　第一属性に小見出しを指定することもできます。]
10:33:47.994 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－コラム：８月３１日は】, 　８月３１日は野菜の日です。, 　野菜を食べましょう。, 【コラム－】, ＃----- コラム：BLtxt文書 -----]
10:33:48.030 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, <aside class="panel panel-primary">, <div class="panel-body">, <p>　日本人の四割は血液型がＯ型です。</p>, </div>, </aside>, ----- コラム：HTML -----]
10:33:48.038 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, <aside class="panel panel-primary">, <header class="panel-heading">８月３１日は</header>, <div class="panel-body">, <p>　８月３１日は野菜の日です。<br/>, 　野菜を食べましょう。</p>, </div>, </aside>, ----- コラム：HTML -----]
10:33:48.068 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－表￥：各県の名産￥】, ￥【－行￥】, ￥【＝見出しセル￥】No., ￥【＝見出しセル￥】産物, ￥【＝見出しセル￥】産地, ￥【行－￥】, ￥【－行￥】, ￥【＝セル￥】1, ￥【＝セル￥】みかん, ￥【＝セル￥】愛媛, ￥【行－￥】, ￥【－行￥】, ￥【＝セル￥】2, ￥【＝セル￥】茶, ￥【＝セル￥】静岡, ￥【行－￥】, ￥【表－￥】, ----- コラム：BLtxt文書 -----]
10:33:48.077 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□注意]
10:33:48.130 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　第一属性に小見出しを指定することもできます。]
10:33:48.130 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－コラム】, 　日本人の四割は血液型がＯ型です。, 【コラム－】, ＃----- コラム：BLtxt文書 -----]
10:33:48.139 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　asideタグ（class属性値は"attention"）を生成します。, 　第一属性に小見出しを指定することもできます。]
10:33:48.190 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, <aside class="panel panel-primary">, <header class="panel-heading">８月３１日は</header>, <div class="panel-body">, <p>　８月３１日は野菜の日です。<br/>, 　野菜を食べましょう。</p>, </div>, </aside>, ----- コラム：HTML -----]
10:33:48.199 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－コラム￥】, 　日本人の四割は血液型がＯ型です。, ￥【コラム－￥】, ----- コラム：BLtxt文書 -----]
10:33:48.218 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－注意：中火とは】, 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。, 【注意－】, ＃----- コラム：BLtxt文書 -----]
10:33:48.246 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】注意]
10:33:48.265 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, <aside class="panel panel-warning">, <header class="panel-heading">中火とは</header>, <div class="panel-body">, <p>　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。</p>, </div>, </aside>, ----- コラム：HTML -----]
10:33:48.297 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　asideタグ（class属性値は"attention"）を生成します。, 　第一属性に小見出しを指定することもできます。]
10:33:48.298 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－コラム：８月３１日は】, 　８月３１日は野菜の日です。, 　野菜を食べましょう。, 【コラム－】, ＃----- コラム：BLtxt文書 -----]
10:33:48.306 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□引用、引用元]
10:33:48.346 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　blockquoteタグを生成します。, 　第一属性に小見出しを指定することもできます。, 　行タグで引用元を指定することもできます。]
10:33:48.379 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, <aside class="panel panel-warning">, <header class="panel-heading">中火とは</header>, <div class="panel-body">, <p>　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。</p>, </div>, </aside>, ----- コラム：HTML -----]
10:33:48.386 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－引用】, 　山路を登りながら、こう考えた。, 　智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。, 【＝引用元】夏目漱石『草枕』, 【引用－】, ＃----- コラム：BLtxt文書 -----]
10:33:48.415 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－コラム￥：８月３１日は￥】, 　８月３１日は野菜の日です。, 　野菜を食べましょう。, ￥【コラム－￥】, ----- コラム：BLtxt文書 -----]
10:33:48.421 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, <blockquote>, <p>　山路を登りながら、こう考えた。<br/>, 　智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。</p>, <footer>夏目漱石『草枕』</footer>, </blockquote>, ----- コラム：HTML -----]
10:33:48.450 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】引用、引用元]
10:33:48.464 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□コード]
10:33:48.498 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　blockquoteタグを生成します。, 　第一属性に小見出しを指定することもできます。, 　行タグで引用元を指定することもできます。]
10:33:48.498 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－注意：中火とは】, 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。, 【注意－】, ＃----- コラム：BLtxt文書 -----]
10:33:48.507 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　preタグ（class属性値は"code"）を生成します。, 　第一属性に小見出しを指定することもできます。]
10:33:48.560 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, <blockquote>, <p>　山路を登りながら、こう考えた。<br/>, 　智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。</p>, <footer>夏目漱石『草枕』</footer>, </blockquote>, ----- コラム：HTML -----]
10:33:48.581 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－注意￥：中火とは￥】, 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。, ￥【注意－￥】, ----- コラム：BLtxt文書 -----]
10:33:48.589 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－コード】, println "Hello, World!";, println "This is sample code of how to hello to all of the world, which is executed " + Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ");, 【コード－】, ＃----- コラム：BLtxt文書 -----]
10:33:48.625 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】コード]
10:33:48.633 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, <pre class="code">, println &quot;Hello, World!&quot;;, println &quot;This is sample code of how to hello to all of the world, which is executed &quot; + Date().format(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSZ&quot;);, </pre>, ----- コラム：HTML -----]
10:33:48.668 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　preタグ（class属性値は"code"）を生成します。, 　第一属性に小見出しを指定することもできます。]
10:33:48.668 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－引用】, 　山路を登りながら、こう考えた。, 　智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。, 【＝引用元】夏目漱石『草枕』, 【引用－】, ＃----- コラム：BLtxt文書 -----]
10:33:48.694 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□整形済]
10:33:48.731 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　preタグを生成します。, 　第一属性に小見出しを指定することもできます。]
10:33:48.758 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, <pre class="code">, println &quot;Hello, World!&quot;;, println &quot;This is sample code of how to hello to all of the world, which is executed &quot; + Date().format(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSZ&quot;);, </pre>, ----- コラム：HTML -----]
10:33:48.775 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－整形済】, ルートフォルダ, 　├ binフォルダ, 　│　└ 実行ファイル, 　└ confフォルダ, 【整形済－】, ＃----- コラム：BLtxt文書 -----]
10:33:48.799 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－引用￥】, 　山路を登りながら、こう考えた。, 　智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。, ￥【＝引用元￥】夏目漱石『草枕』, ￥【引用－￥】, ----- コラム：BLtxt文書 -----]
10:33:48.811 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, <pre>ルートフォルダ, 　├ binフォルダ, 　│　└ 実行ファイル, 　└ confフォルダ</pre>, ----- コラム：HTML -----]
10:33:48.845 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】整形済]
10:33:48.854 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□生データ]
10:33:48.884 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　preタグを生成します。, 　第一属性に小見出しを指定することもできます。]
10:33:48.884 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－コード】, println "Hello, World!";, println "This is sample code of how to hello to all of the world, which is executed " + Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ");, 【コード－】, ＃----- コラム：BLtxt文書 -----]
10:33:48.896 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　記述内容をそのまま変換結果に反映したいときに使用します。, 　BLtxt記法上の特殊文字はエスケープします。, 　HTMLタグのエスケープをしません。]
10:33:48.936 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, <pre>ルートフォルダ, 　├ binフォルダ, 　│　└ 実行ファイル, 　└ confフォルダ</pre>, ----- コラム：HTML -----]
10:33:48.962 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－コード￥】, println "Hello, World!";, println "This is sample code of how to hello to all of the world, which is executed " + Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ");, ￥【コード－￥】, ----- コラム：BLtxt文書 -----]
10:33:48.974 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 【－生データ】, 墨付きカッコが【強調：そのまま】表示されます。, <strong>HTMLタグのエスケープもしません。</strong>, 【生データ－】, ＃----- コラム：BLtxt文書 -----]
10:33:49.001 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】生データ]
10:33:49.018 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, 墨付きカッコが￥【重要：そのまま￥】表示されます。, &lt;strong&gt;HTMLタグのエスケープもしません。&lt;/strong&gt;, ----- コラム：HTML -----]
10:33:49.052 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　記述内容をそのまま変換結果に反映したいときに使用します。, 　BLtxt記法上の特殊文字はエスケープします。, 　HTMLタグのエスケープをしません。]
10:33:49.052 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－整形済】, ルートフォルダ, 　├ binフォルダ, 　│　└ 実行ファイル, 　└ confフォルダ, 【整形済－】, ＃----- コラム：BLtxt文書 -----]
10:33:49.060 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■インライン要素, □リンク]
10:33:49.098 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　aタグを生成します。]
10:33:49.131 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, 墨付きカッコが￥【重要：そのまま￥】表示されます。, &lt;strong&gt;HTMLタグのエスケープもしません。&lt;/strong&gt;, ----- コラム：HTML -----]
10:33:49.140 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　詳しくは【｜リンク：https://www.google.co.jp/】ネット検索【リンク｜】してください。, ＃----- コラム：BLtxt文書 -----]
10:33:49.170 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－整形済￥】, ルートフォルダ, 　├ binフォルダ, 　│　└ 実行ファイル, 　└ confフォルダ, ￥【整形済－￥】, ----- コラム：BLtxt文書 -----]
10:33:49.191 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, 　詳しくは<a href="https://www.google.co.jp/">ネット検索</a>してください。, ----- コラム：HTML -----]
10:33:49.201 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】インライン要素, 【＝見出し：3】リンク]
10:33:49.222 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□強調]
10:33:49.255 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　aタグを生成します。]
10:33:49.255 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 【－生データ】, 墨付きカッコが【強調：そのまま】表示されます。, <strong>HTMLタグのエスケープもしません。</strong>, 【生データ－】, ＃----- コラム：BLtxt文書 -----]
10:33:49.282 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　emタグを生成します。]
10:33:49.334 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, 　詳しくは<a href="https://www.google.co.jp/">ネット検索</a>してください。, ----- コラム：HTML -----]
10:33:49.349 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, ￥【－生データ￥】, 墨付きカッコが￥【強調￥：そのまま￥】表示されます。, <strong>HTMLタグのエスケープもしません。</strong>, ￥【生データ－￥】, ----- コラム：BLtxt文書 -----]
10:33:49.362 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　必ず最後に【｜強調】確認ボタン【強調｜】をクリックしてください。, ＃----- コラム：BLtxt文書 -----]
10:33:49.394 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】強調]
10:33:49.402 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, 　必ず最後に<em>確認ボタン</em>をクリックしてください。, ----- コラム：HTML -----]
10:33:49.435 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　emタグを生成します。]
10:33:49.435 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　詳しくは【｜リンク：https://www.google.co.jp/】ネット検索【リンク｜】してください。, ＃----- コラム：BLtxt文書 -----]
10:33:49.442 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□最強調]
10:33:49.479 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　strongタグを生成します。]
10:33:49.513 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, 　必ず最後に<em>確認ボタン</em>をクリックしてください。, ----- コラム：HTML -----]
10:33:49.522 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　間違えて【｜最強調】自爆スイッチ【最強調｜】を押さないでください。, ＃----- コラム：BLtxt文書 -----]
10:33:49.543 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　詳しくは￥【｜リンク￥：https://www.google.co.jp/￥】ネット検索￥【リンク｜￥】してください。, ----- コラム：BLtxt文書 -----]
10:33:49.566 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, 　間違えて<strong>自爆スイッチ</strong>を押さないでください。, ----- コラム：HTML -----]
10:33:49.600 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】最強調]
10:33:49.607 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□傍点]
10:33:49.639 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　strongタグを生成します。]
10:33:49.640 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　必ず最後に【｜強調】確認ボタン【強調｜】をクリックしてください。, ＃----- コラム：BLtxt文書 -----]
10:33:49.647 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　spanタグ（class属性値は"dot"）を生成します。]
10:33:49.698 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, 　間違えて<strong>自爆スイッチ</strong>を押さないでください。, ----- コラム：HTML -----]
10:33:49.716 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　必ず最後に￥【｜強調￥】確認ボタン￥【強調｜￥】をクリックしてください。, ----- コラム：BLtxt文書 -----]
10:33:49.724 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　ここが【｜傍点】重要【傍点｜】です。, ＃----- コラム：BLtxt文書 -----]
10:33:49.749 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】傍点]
10:33:49.764 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, 　ここが<span class="dot">重要</span>です。, ----- コラム：HTML -----]
10:33:49.794 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　spanタグ（class属性値は"dot"）を生成します。]
10:33:49.794 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　間違えて【｜最強調】自爆スイッチ【最強調｜】を押さないでください。, ＃----- コラム：BLtxt文書 -----]
10:33:49.818 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□ぼかし]
10:33:49.875 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　spanタグ（class属性値は"small"）を生成します。]
10:33:49.895 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, 　ここが<span class="dot">重要</span>です。, ----- コラム：HTML -----]
10:33:49.913 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　もちろん本当【｜ぼかし】かもしれない【ぼかし｜】ですよ。, ＃----- コラム：BLtxt文書 -----]
10:33:49.931 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　間違えて￥【｜最強調￥】自爆スイッチ￥【最強調｜￥】を押さないでください。, ----- コラム：BLtxt文書 -----]
10:33:49.951 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, 　もちろん本当<span class="small">かもしれない</span>ですよ。, ----- コラム：HTML -----]
10:33:49.971 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】ぼかし]
10:33:49.979 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□訂正]
10:33:50.011 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　spanタグ（class属性値は"small"）を生成します。]
10:33:50.012 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　ここが【｜傍点】重要【傍点｜】です。, ＃----- コラム：BLtxt文書 -----]
10:33:50.019 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　sタグを生成します。]
10:33:50.071 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, 　もちろん本当<span class="small">かもしれない</span>ですよ。, ----- コラム：HTML -----]
10:33:50.086 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　ここが￥【｜傍点￥】重要￥【傍点｜￥】です。, ----- コラム：BLtxt文書 -----]
10:33:50.097 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　富士山の標高は【｜訂正】３７７７メートル【訂正｜】３７７６メートルです。, ＃----- コラム：BLtxt文書 -----]
10:33:50.127 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】訂正]
10:33:50.139 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, 　富士山の標高は<s>３７７７メートル</s>３７７６メートルです。, ----- コラム：HTML -----]
10:33:50.169 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　sタグを生成します。]
10:33:50.169 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　もちろん本当【｜ぼかし】かもしれない【ぼかし｜】ですよ。, ＃----- コラム：BLtxt文書 -----]
10:33:50.181 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□縦中横]
10:33:50.234 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　縦中横には対応していないため、特に加工しません。]
10:33:50.255 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, 　富士山の標高は<s>３７７７メートル</s>３７７６メートルです。, ----- コラム：HTML -----]
10:33:50.263 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　シェイクスピア全集の第【｜縦中横】10【縦中横｜】巻に記述されています。, ＃----- コラム：BLtxt文書 -----]
10:33:50.292 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　もちろん本当￥【｜ぼかし￥】かもしれない￥【ぼかし｜￥】ですよ。, ----- コラム：BLtxt文書 -----]
10:33:50.299 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, 　シェイクスピア全集の第10巻に記述されています。, ----- コラム：HTML -----]
10:33:50.331 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】縦中横]
10:33:50.339 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□備考]
10:33:50.369 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　縦中横には対応していないため、特に加工しません。]
10:33:50.369 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　富士山の標高は【｜訂正】３７７７メートル【訂正｜】３７７６メートルです。, ＃----- コラム：BLtxt文書 -----]
10:33:50.379 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　spanタグ（class属性値は"note"）を生成します。]
10:33:50.437 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, 　シェイクスピア全集の第10巻に記述されています。, ----- コラム：HTML -----]
10:33:50.452 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　富士山の標高は￥【｜訂正￥】３７７７メートル￥【訂正｜￥】３７７６メートルです。, ----- コラム：BLtxt文書 -----]
10:33:50.483 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　『乱れからくり』の作者は【｜備考：泡は特殊文字】泡坂妻夫【備考｜】です。, ＃----- コラム：BLtxt文書 -----]
10:33:50.504 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】備考]
10:33:50.511 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, 　『乱れからくり』の作者は泡坂妻夫<span class="note">[※泡は特殊文字]</span>です。, ----- コラム：HTML -----]
10:33:50.542 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　spanタグ（class属性値は"note"）を生成します。]
10:33:50.542 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　シェイクスピア全集の第【｜縦中横】10【縦中横｜】巻に記述されています。, ＃----- コラム：BLtxt文書 -----]
10:33:50.555 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□ルビ]
10:33:50.605 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, 　『乱れからくり』の作者は泡坂妻夫<span class="note">[※泡は特殊文字]</span>です。, ----- コラム：HTML -----]
10:33:50.613 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　rubyタグを生成します。]
10:33:50.643 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　シェイクスピア全集の第￥【｜縦中横￥】10￥【縦中横｜￥】巻に記述されています。, ----- コラム：BLtxt文書 -----]
10:33:50.650 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [＃----- コラム：BLtxt文書 -----, 　【｜ルビ：すいとう】出納【ルビ｜】係は言った。, ＃----- コラム：BLtxt文書 -----]
10:33:50.684 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】ルビ]
10:33:50.691 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コラム：HTML -----, 　<ruby>出納<rp>［</rp><rt>すいとう</rt><rp>］</rp></ruby>係は言った。, ----- コラム：HTML -----]
10:33:50.725 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　rubyタグを生成します。]
10:33:50.725 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　『乱れからくり』の作者は【｜備考：泡は特殊文字】泡坂妻夫【備考｜】です。, ＃----- コラム：BLtxt文書 -----]
10:33:50.733 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [以上]
10:33:50.773 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コラム：HTML -----, 　<ruby>出納<rp>［</rp><rt>すいとう</rt><rp>］</rp></ruby>係は言った。, ----- コラム：HTML -----]
10:33:50.793 [ForkJoinPool-24-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 slice#空白行区切り
10:33:50.827 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　『乱れからくり』の作者は￥【｜備考￥：泡は特殊文字￥】泡坂妻夫￥【備考｜￥】です。, ----- コラム：BLtxt文書 -----]
10:33:50.834 [ForkJoinPool-19-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#箇条書き
10:33:50.834 [ForkJoinPool-19-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#箇条書き
10:33:50.834 [ForkJoinPool-19-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#箇条書き
10:33:50.834 [ForkJoinPool-19-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[以上]
10:33:50.834 [ForkJoinPool-19-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast reprex#各種置換
10:33:50.834 [ForkJoinPool-19-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate reprex#各種置換
10:33:50.834 [ForkJoinPool-19-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY reprex#各種置換
10:33:50.835 [ForkJoinPool-24-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY slice#空白行区切り
10:33:50.835 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#BLエスケープ: [＃----- コラム：BLtxt文書 -----, 　【｜ルビ：すいとう】出納【ルビ｜】係は言った。, ＃----- コラム：BLtxt文書 -----]
10:33:50.835 [ForkJoinPool-24-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#BLエスケープ
10:33:50.876 [ForkJoinPool-20-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 replace#エスケープ :[----- コラム：BLtxt文書 -----, 　￥【｜ルビ￥：すいとう￥】出納￥【ルビ｜￥】係は言った。, ----- コラム：BLtxt文書 -----]
10:33:50.876 [ForkJoinPool-20-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast replace#エスケープ
10:33:50.876 [ForkJoinPool-20-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate replace#エスケープ
10:33:50.876 [ForkJoinPool-20-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY replace#エスケープ
10:33:50.876 [ForkJoinPool-24-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#BLエスケープ
10:33:50.877 [ForkJoinPool-24-worker-2] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#表
10:33:50.877 [ForkJoinPool-21-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#表
10:33:50.877 [ForkJoinPool-21-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#表
10:33:50.877 [ForkJoinPool-21-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#表
10:33:50.880 [ForkJoinPool-24-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#表
10:33:50.880 [ForkJoinPool-24-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#コラム
10:33:50.880 [ForkJoinPool-22-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#コラムを整形
10:33:50.880 [ForkJoinPool-22-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#コラムを整形
10:33:50.880 [ForkJoinPool-22-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#コラムを整形
10:33:50.881 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　おいしいカレーを作るには"隠し味"が大切です。, 　隠し味にもいろいろなものがあります。, , , 　一般家庭で良く使われる<隠し味>を試してみましょう。, ----- コラム：BLtxt文書 -----]
10:33:50.881 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, <p>　おいしいカレーを作るには&quot;隠し味&quot;が大切です。<br/>, 　隠し味にもいろいろなものがあります。</p>, , <p>　一般家庭で良く使われる&lt;隠し味&gt;を試してみましょう。</p>, ----- コラム：HTML -----]
10:33:50.881 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テキスト -----, ￥【＃タイトル￥】円周率について, ￥【＃サブタイトル￥】著名な語呂合わせ, ￥【＃著者名￥】山田太郎, ----- コラム：テキスト -----]
10:33:50.882 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テンプレート -----, <head>,  ... 中略 ..., <% if (head.containsKey('タイトル')){ %><title><%= head['タイトル'].replaceAll(/<.+?>/, '') %></title><% } %>, </head>,  ... 中略 ..., <header class="container">, <% if (head.containsKey('タイトル')){ %><h1><%= head['タイトル'] %><% if (head.containsKey('サブタイトル')){ %> <small><%= head['サブタイトル'] %></small><% } %></h1><% } %>, <% if (head.containsKey('著者名')){ %><div class="author"><%= head['著者名'] %></div><% } %>, ----- コラム：テンプレート -----]
10:33:50.882 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【＝見出し￥：2￥】カレーの作り方, ￥【＝見出し￥：3￥】材料の準備, ----- コラム：BLtxt文書 -----]
10:33:50.882 [ForkJoinPool-24-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#コラム
10:33:50.882 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, <h2><a name="1">カレーの作り方</a></h2>, <h3><a name="2">材料の準備</a></h3>, ----- コラム：HTML -----]
10:33:50.882 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テンプレート -----, <% if (index.size() > 0){ %><nav class="list-group">, <% index.each { Map map -> %><a href="<%= map['href'] %>" class="list-group-item"><%= '　' * (map['level'] - 2) %><%= map['title'] %></a>, <% } %></nav><% } %>, </header>, ----- コラム：テンプレート -----]
10:33:50.883 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【＝見出し￥：3￥】材料の準備, ￥【＝小見出し￥】巨大数の歴史, ----- コラム：BLtxt文書 -----]
10:33:50.883 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, <h3><a name="2">材料の準備</a></h3>, <h4>巨大数の歴史</h4>, ----- コラム：HTML -----]
10:33:50.883 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【＝挿入図￥：サンプル￥：img.png￥】, ----- コラム：BLtxt文書 -----]
10:33:50.883 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, <div class="img"><img src="img.png" alt="サンプル"></div>, ----- コラム：HTML -----]
10:33:50.883 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【＝挿入図￥：サンプル￥：img.png￥】これはイメージです。, ----- コラム：BLtxt文書 -----]
10:33:50.884 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, <figure><img src="img.png" alt="サンプル" class="img-responsive center-block"><figcaption>これはイメージです。</figcaption></figure>, ----- コラム：HTML -----]
10:33:50.884 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　XML￥【註￥：XML￥】をHTML￥【註￥：HTML￥】に変換します。, , ￥【＊註記￥：XML￥】, 　eXtensible Markup Languageの略です。, ￥【註記＊￥】, ￥【＊註記￥：HTML￥】, 　Hyper Text Markup Languageの略です。, ￥【註記＊￥】, ----- コラム：BLtxt文書 -----]
10:33:50.884 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, <p>　XML<sup><a id="f1" href="#t1">*1</a></sup>をHTML<sup><a id="f2" href="#t2">*2</a></sup>に変換します。</p>, , <dl class="note">, <dt><a name="t1" href="#f1">[*1]</a></dt>, <dd>　eXtensible Markup Languageの略です。</dd>, <dt><a name="t2" href="#f2">[*2]</a></dt>, <dd>　Hyper Text Markup Languageの略です。</dd>, </dl>, ----- コラム：HTML -----]
10:33:50.884 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：テンプレート -----, <% if (!note.empty){ %><aside>, <%= note %>, </aside><% } %>, ----- コラム：テンプレート -----]
10:33:50.885 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－箇条書き￥】, ￥【－項目￥】, じゃがいも, ￥【項目－￥】, ￥【－項目￥】, ニンジン, ￥【項目－￥】, ￥【－項目￥】, 玉ねぎ, ￥【－箇条書き￥】, ￥【－説明￥】, 刻むときは注意。, 涙がでます。, ￥【説明－￥】, ￥【箇条書き－￥】, ￥【項目－￥】, ￥【－項目￥】, カレー粉, ￥【－箇条書き￥：順序あり￥】, ￥【－項目￥】, ジャワカレー, ￥【項目－￥】, ￥【－項目￥】, バーモンドカレー, ￥【項目－￥】, ￥【箇条書き－￥】, ￥【項目－￥】, ￥【箇条書き－￥】, ----- コラム：BLtxt文書 -----]
10:33:50.885 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, <ul>, <li>じゃがいも</li>, <li>ニンジン</li>, <li>玉ねぎ<br/>, <ul>, <li class="dd">→刻むときは注意。<br/>, 　涙がでます。</li>, </ul></li>, <li>カレー粉<br/>, <ol>, <li>ジャワカレー</li>, <li>バーモンドカレー</li>, </ol></li>, </ul>, ----- コラム：HTML -----]
10:33:50.885 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－箇条書き￥：項目説明￥】, ￥【－対象￥】, ターメリック, ￥【対象－￥】, ￥【－箇条書き￥】, ￥【－説明￥】, 香辛料の一種です。, ￥【説明－￥】, ￥【箇条書き－￥】, ￥【箇条書き－￥】, ----- コラム：BLtxt文書 -----]
10:33:50.885 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, <dl>, <dt>ターメリック</dt>, <dd>香辛料の一種です。</dd>, </dl>, ----- コラム：HTML -----]
10:33:50.886 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－表￥：各県の名産￥】, ￥【－行￥】, ￥【＝見出しセル￥】No., ￥【＝見出しセル￥】産物, ￥【＝見出しセル￥】産地, ￥【行－￥】, ￥【－行￥】, ￥【＝セル￥】1, ￥【＝セル￥】みかん, ￥【＝セル￥】愛媛, ￥【行－￥】, ￥【－行￥】, ￥【＝セル￥】2, ￥【＝セル￥】茶, ￥【＝セル￥】静岡, ￥【行－￥】, ￥【表－￥】, ----- コラム：BLtxt文書 -----]
10:33:50.886 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, <aside class="panel panel-default">, <header class="panel-heading">各県の名産</header>, <table class="table">, <tr><th>No.</th><th>産物</th><th>産地</th></tr>, <tr><td>1</td><td>みかん</td><td>愛媛</td></tr>, <tr><td>2</td><td>茶</td><td>静岡</td></tr>, </table>, </aside>, ----- コラム：HTML -----]
10:33:50.886 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－コラム￥】, 　日本人の四割は血液型がＯ型です。, ￥【コラム－￥】, ----- コラム：BLtxt文書 -----]
10:33:50.886 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, <aside class="panel panel-primary">, <div class="panel-body">, <p>　日本人の四割は血液型がＯ型です。</p>, </div>, </aside>, ----- コラム：HTML -----]
10:33:50.886 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－コラム￥：８月３１日は￥】, 　８月３１日は野菜の日です。, 　野菜を食べましょう。, ￥【コラム－￥】, ----- コラム：BLtxt文書 -----]
10:33:50.887 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, <aside class="panel panel-primary">, <header class="panel-heading">８月３１日は</header>, <div class="panel-body">, <p>　８月３１日は野菜の日です。<br/>, 　野菜を食べましょう。</p>, </div>, </aside>, ----- コラム：HTML -----]
10:33:50.887 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－注意￥：中火とは￥】, 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。, ￥【注意－￥】, ----- コラム：BLtxt文書 -----]
10:33:50.887 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, <aside class="panel panel-warning">, <header class="panel-heading">中火とは</header>, <div class="panel-body">, <p>　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。</p>, </div>, </aside>, ----- コラム：HTML -----]
10:33:50.887 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－引用￥】, 　山路を登りながら、こう考えた。, 　智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。, ￥【＝引用元￥】夏目漱石『草枕』, ￥【引用－￥】, ----- コラム：BLtxt文書 -----]
10:33:50.888 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, <blockquote>, <p>　山路を登りながら、こう考えた。<br/>, 　智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。</p>, <footer>夏目漱石『草枕』</footer>, </blockquote>, ----- コラム：HTML -----]
10:33:50.888 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－コード￥】, println "Hello, World!";, println "This is sample code of how to hello to all of the world, which is executed " + Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ");, ￥【コード－￥】, ----- コラム：BLtxt文書 -----]
10:33:50.888 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, <pre class="code">, println &quot;Hello, World!&quot;;, println &quot;This is sample code of how to hello to all of the world, which is executed &quot; + Date().format(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSZ&quot;);, </pre>, ----- コラム：HTML -----]
10:33:50.888 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－整形済￥】, ルートフォルダ, 　├ binフォルダ, 　│　└ 実行ファイル, 　└ confフォルダ, ￥【整形済－￥】, ----- コラム：BLtxt文書 -----]
10:33:50.889 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, <pre>ルートフォルダ, 　├ binフォルダ, 　│　└ 実行ファイル, 　└ confフォルダ</pre>, ----- コラム：HTML -----]
10:33:50.889 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, ￥【－生データ￥】, 墨付きカッコが￥【強調￥：そのまま￥】表示されます。, <strong>HTMLタグのエスケープもしません。</strong>, ￥【生データ－￥】, ----- コラム：BLtxt文書 -----]
10:33:50.889 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, 墨付きカッコが￥【重要：そのまま￥】表示されます。, &lt;strong&gt;HTMLタグのエスケープもしません。&lt;/strong&gt;, ----- コラム：HTML -----]
10:33:50.889 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　詳しくは￥【｜リンク￥：https://www.google.co.jp/￥】ネット検索￥【リンク｜￥】してください。, ----- コラム：BLtxt文書 -----]
10:33:50.889 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, 　詳しくは<a href="https://www.google.co.jp/">ネット検索</a>してください。, ----- コラム：HTML -----]
10:33:50.890 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　必ず最後に￥【｜強調￥】確認ボタン￥【強調｜￥】をクリックしてください。, ----- コラム：BLtxt文書 -----]
10:33:50.890 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, 　必ず最後に<em>確認ボタン</em>をクリックしてください。, ----- コラム：HTML -----]
10:33:50.890 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　間違えて￥【｜最強調￥】自爆スイッチ￥【最強調｜￥】を押さないでください。, ----- コラム：BLtxt文書 -----]
10:33:50.890 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, 　間違えて<strong>自爆スイッチ</strong>を押さないでください。, ----- コラム：HTML -----]
10:33:50.890 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　ここが￥【｜傍点￥】重要￥【傍点｜￥】です。, ----- コラム：BLtxt文書 -----]
10:33:50.890 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, 　ここが<span class="dot">重要</span>です。, ----- コラム：HTML -----]
10:33:50.891 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　もちろん本当￥【｜ぼかし￥】かもしれない￥【ぼかし｜￥】ですよ。, ----- コラム：BLtxt文書 -----]
10:33:50.891 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, 　もちろん本当<span class="small">かもしれない</span>ですよ。, ----- コラム：HTML -----]
10:33:50.891 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　富士山の標高は￥【｜訂正￥】３７７７メートル￥【訂正｜￥】３７７６メートルです。, ----- コラム：BLtxt文書 -----]
10:33:50.891 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, 　富士山の標高は<s>３７７７メートル</s>３７７６メートルです。, ----- コラム：HTML -----]
10:33:50.891 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　シェイクスピア全集の第￥【｜縦中横￥】10￥【縦中横｜￥】巻に記述されています。, ----- コラム：BLtxt文書 -----]
10:33:50.892 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, 　シェイクスピア全集の第10巻に記述されています。, ----- コラム：HTML -----]
10:33:50.892 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　『乱れからくり』の作者は￥【｜備考￥：泡は特殊文字￥】泡坂妻夫￥【備考｜￥】です。, ----- コラム：BLtxt文書 -----]
10:33:50.892 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, 　『乱れからくり』の作者は泡坂妻夫<span class="note">[※泡は特殊文字]</span>です。, ----- コラム：HTML -----]
10:33:50.892 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：BLtxt文書 -----, 　￥【｜ルビ￥：すいとう￥】出納￥【ルビ｜￥】係は言った。, ----- コラム：BLtxt文書 -----]
10:33:50.893 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コラム：HTML -----, 　<ruby>出納<rp>［</rp><rt>すいとう</rt><rp>］</rp></ruby>係は言った。, ----- コラム：HTML -----]
10:33:50.893 [ForkJoinPool-24-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#タグ付きコラム
10:33:50.907 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　おいしいカレーを作るには"隠し味"が大切です。, 　隠し味にもいろいろなものがあります。, , , 　一般家庭で良く使われる<隠し味>を試してみましょう。, 【コラム－】]
10:33:50.927 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, <p>　おいしいカレーを作るには&quot;隠し味&quot;が大切です。<br/>, 　隠し味にもいろいろなものがあります。</p>, , <p>　一般家庭で良く使われる&lt;隠し味&gt;を試してみましょう。</p>, 【コラム－】]
10:33:50.948 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テキスト】, ￥【＃タイトル￥】円周率について, ￥【＃サブタイトル￥】著名な語呂合わせ, ￥【＃著者名￥】山田太郎, 【コラム－】]
10:33:50.969 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テンプレート】, <head>,  ... 中略 ..., <% if (head.containsKey('タイトル')){ %><title><%= head['タイトル'].replaceAll(/<.+?>/, '') %></title><% } %>, </head>,  ... 中略 ..., <header class="container">, <% if (head.containsKey('タイトル')){ %><h1><%= head['タイトル'] %><% if (head.containsKey('サブタイトル')){ %> <small><%= head['サブタイトル'] %></small><% } %></h1><% } %>, <% if (head.containsKey('著者名')){ %><div class="author"><%= head['著者名'] %></div><% } %>, 【コラム－】]
10:33:51.007 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【＝見出し￥：2￥】カレーの作り方, ￥【＝見出し￥：3￥】材料の準備, 【コラム－】]
10:33:51.028 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, <h2><a name="1">カレーの作り方</a></h2>, <h3><a name="2">材料の準備</a></h3>, 【コラム－】]
10:33:51.049 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テンプレート】, <% if (index.size() > 0){ %><nav class="list-group">, <% index.each { Map map -> %><a href="<%= map['href'] %>" class="list-group-item"><%= '　' * (map['level'] - 2) %><%= map['title'] %></a>, <% } %></nav><% } %>, </header>, 【コラム－】]
10:33:51.071 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【＝見出し￥：3￥】材料の準備, ￥【＝小見出し￥】巨大数の歴史, 【コラム－】]
10:33:51.092 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, <h3><a name="2">材料の準備</a></h3>, <h4>巨大数の歴史</h4>, 【コラム－】]
10:33:51.112 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【＝挿入図￥：サンプル￥：img.png￥】, 【コラム－】]
10:33:51.133 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, <div class="img"><img src="img.png" alt="サンプル"></div>, 【コラム－】]
10:33:51.154 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【＝挿入図￥：サンプル￥：img.png￥】これはイメージです。, 【コラム－】]
10:33:51.175 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, <figure><img src="img.png" alt="サンプル" class="img-responsive center-block"><figcaption>これはイメージです。</figcaption></figure>, 【コラム－】]
10:33:51.195 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　XML￥【註￥：XML￥】をHTML￥【註￥：HTML￥】に変換します。, , ￥【＊註記￥：XML￥】, 　eXtensible Markup Languageの略です。, ￥【註記＊￥】, ￥【＊註記￥：HTML￥】, 　Hyper Text Markup Languageの略です。, ￥【註記＊￥】, 【コラム－】]
10:33:51.216 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, <p>　XML<sup><a id="f1" href="#t1">*1</a></sup>をHTML<sup><a id="f2" href="#t2">*2</a></sup>に変換します。</p>, , <dl class="note">, <dt><a name="t1" href="#f1">[*1]</a></dt>, <dd>　eXtensible Markup Languageの略です。</dd>, <dt><a name="t2" href="#f2">[*2]</a></dt>, <dd>　Hyper Text Markup Languageの略です。</dd>, </dl>, 【コラム－】]
10:33:51.237 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：テンプレート】, <% if (!note.empty){ %><aside>, <%= note %>, </aside><% } %>, 【コラム－】]
10:33:51.258 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－箇条書き￥】, ￥【－項目￥】, じゃがいも, ￥【項目－￥】, ￥【－項目￥】, ニンジン, ￥【項目－￥】, ￥【－項目￥】, 玉ねぎ, ￥【－箇条書き￥】, ￥【－説明￥】, 刻むときは注意。, 涙がでます。, ￥【説明－￥】, ￥【箇条書き－￥】, ￥【項目－￥】, ￥【－項目￥】, カレー粉, ￥【－箇条書き￥：順序あり￥】, ￥【－項目￥】, ジャワカレー, ￥【項目－￥】, ￥【－項目￥】, バーモンドカレー, ￥【項目－￥】, ￥【箇条書き－￥】, ￥【項目－￥】, ￥【箇条書き－￥】, 【コラム－】]
10:33:51.277 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, <ul>, <li>じゃがいも</li>, <li>ニンジン</li>, <li>玉ねぎ<br/>, <ul>, <li class="dd">→刻むときは注意。<br/>, 　涙がでます。</li>, </ul></li>, <li>カレー粉<br/>, <ol>, <li>ジャワカレー</li>, <li>バーモンドカレー</li>, </ol></li>, </ul>, 【コラム－】]
10:33:51.298 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－箇条書き￥：項目説明￥】, ￥【－対象￥】, ターメリック, ￥【対象－￥】, ￥【－箇条書き￥】, ￥【－説明￥】, 香辛料の一種です。, ￥【説明－￥】, ￥【箇条書き－￥】, ￥【箇条書き－￥】, 【コラム－】]
10:33:51.320 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, <dl>, <dt>ターメリック</dt>, <dd>香辛料の一種です。</dd>, </dl>, 【コラム－】]
10:33:51.342 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－表￥：各県の名産￥】, ￥【－行￥】, ￥【＝見出しセル￥】No., ￥【＝見出しセル￥】産物, ￥【＝見出しセル￥】産地, ￥【行－￥】, ￥【－行￥】, ￥【＝セル￥】1, ￥【＝セル￥】みかん, ￥【＝セル￥】愛媛, ￥【行－￥】, ￥【－行￥】, ￥【＝セル￥】2, ￥【＝セル￥】茶, ￥【＝セル￥】静岡, ￥【行－￥】, ￥【表－￥】, 【コラム－】]
10:33:51.364 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, <aside class="panel panel-default">, <header class="panel-heading">各県の名産</header>, <table class="table">, <tr><th>No.</th><th>産物</th><th>産地</th></tr>, <tr><td>1</td><td>みかん</td><td>愛媛</td></tr>, <tr><td>2</td><td>茶</td><td>静岡</td></tr>, </table>, </aside>, 【コラム－】]
10:33:51.386 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－コラム￥】, 　日本人の四割は血液型がＯ型です。, ￥【コラム－￥】, 【コラム－】]
10:33:51.408 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, <aside class="panel panel-primary">, <div class="panel-body">, <p>　日本人の四割は血液型がＯ型です。</p>, </div>, </aside>, 【コラム－】]
10:33:51.430 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－コラム￥：８月３１日は￥】, 　８月３１日は野菜の日です。, 　野菜を食べましょう。, ￥【コラム－￥】, 【コラム－】]
10:33:51.452 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, <aside class="panel panel-primary">, <header class="panel-heading">８月３１日は</header>, <div class="panel-body">, <p>　８月３１日は野菜の日です。<br/>, 　野菜を食べましょう。</p>, </div>, </aside>, 【コラム－】]
10:33:51.474 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－注意￥：中火とは￥】, 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。, ￥【注意－￥】, 【コラム－】]
10:33:51.496 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, <aside class="panel panel-warning">, <header class="panel-heading">中火とは</header>, <div class="panel-body">, <p>　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。</p>, </div>, </aside>, 【コラム－】]
10:33:51.519 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－引用￥】, 　山路を登りながら、こう考えた。, 　智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。, ￥【＝引用元￥】夏目漱石『草枕』, ￥【引用－￥】, 【コラム－】]
10:33:51.540 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, <blockquote>, <p>　山路を登りながら、こう考えた。<br/>, 　智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。</p>, <footer>夏目漱石『草枕』</footer>, </blockquote>, 【コラム－】]
10:33:51.564 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－コード￥】, println "Hello, World!";, println "This is sample code of how to hello to all of the world, which is executed " + Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ");, ￥【コード－￥】, 【コラム－】]
10:33:51.588 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, <pre class="code">, println &quot;Hello, World!&quot;;, println &quot;This is sample code of how to hello to all of the world, which is executed &quot; + Date().format(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSZ&quot;);, </pre>, 【コラム－】]
10:33:51.611 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－整形済￥】, ルートフォルダ, 　├ binフォルダ, 　│　└ 実行ファイル, 　└ confフォルダ, ￥【整形済－￥】, 【コラム－】]
10:33:51.632 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, <pre>ルートフォルダ, 　├ binフォルダ, 　│　└ 実行ファイル, 　└ confフォルダ</pre>, 【コラム－】]
10:33:51.672 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, ￥【－生データ￥】, 墨付きカッコが￥【強調￥：そのまま￥】表示されます。, <strong>HTMLタグのエスケープもしません。</strong>, ￥【生データ－￥】, 【コラム－】]
10:33:51.693 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, 墨付きカッコが￥【重要：そのまま￥】表示されます。, &lt;strong&gt;HTMLタグのエスケープもしません。&lt;/strong&gt;, 【コラム－】]
10:33:51.715 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　詳しくは￥【｜リンク￥：https://www.google.co.jp/￥】ネット検索￥【リンク｜￥】してください。, 【コラム－】]
10:33:51.737 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, 　詳しくは<a href="https://www.google.co.jp/">ネット検索</a>してください。, 【コラム－】]
10:33:51.759 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　必ず最後に￥【｜強調￥】確認ボタン￥【強調｜￥】をクリックしてください。, 【コラム－】]
10:33:51.782 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, 　必ず最後に<em>確認ボタン</em>をクリックしてください。, 【コラム－】]
10:33:51.804 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　間違えて￥【｜最強調￥】自爆スイッチ￥【最強調｜￥】を押さないでください。, 【コラム－】]
10:33:51.827 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, 　間違えて<strong>自爆スイッチ</strong>を押さないでください。, 【コラム－】]
10:33:51.850 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　ここが￥【｜傍点￥】重要￥【傍点｜￥】です。, 【コラム－】]
10:33:51.871 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, 　ここが<span class="dot">重要</span>です。, 【コラム－】]
10:33:51.893 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　もちろん本当￥【｜ぼかし￥】かもしれない￥【ぼかし｜￥】ですよ。, 【コラム－】]
10:33:51.914 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, 　もちろん本当<span class="small">かもしれない</span>ですよ。, 【コラム－】]
10:33:51.937 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　富士山の標高は￥【｜訂正￥】３７７７メートル￥【訂正｜￥】３７７６メートルです。, 【コラム－】]
10:33:51.960 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, 　富士山の標高は<s>３７７７メートル</s>３７７６メートルです。, 【コラム－】]
10:33:51.982 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　シェイクスピア全集の第￥【｜縦中横￥】10￥【縦中横｜￥】巻に記述されています。, 【コラム－】]
10:33:52.003 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, 　シェイクスピア全集の第10巻に記述されています。, 【コラム－】]
10:33:52.024 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　『乱れからくり』の作者は￥【｜備考￥：泡は特殊文字￥】泡坂妻夫￥【備考｜￥】です。, 【コラム－】]
10:33:52.045 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, 　『乱れからくり』の作者は泡坂妻夫<span class="note">[※泡は特殊文字]</span>です。, 【コラム－】]
10:33:52.067 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：BLtxt文書】, 　￥【｜ルビ￥：すいとう￥】出納￥【ルビ｜￥】係は言った。, 【コラム－】]
10:33:52.089 [ForkJoinPool-23-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コラム：HTML】, 　<ruby>出納<rp>［</rp><rt>すいとう</rt><rp>］</rp></ruby>係は言った。, 【コラム－】]
10:33:52.090 [ForkJoinPool-23-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#タグ付きコラムを整形
10:33:52.090 [ForkJoinPool-23-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#タグ付きコラムを整形
10:33:52.090 [ForkJoinPool-23-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#タグ付きコラムを整形
10:33:52.090 [ForkJoinPool-24-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#タグ付きコラム
10:33:52.124 [Thread-43] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行終了 key=washscr#BLtxt文書へ整形
10:33:52.127 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：meta タイトル
10:33:52.127 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.127 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.127 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.128 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.128 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.128 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.128 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.128 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.128 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.129 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.129 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.129 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.129 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.130 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.130 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.130 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.130 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:33:52.130 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:33:52.130 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.130 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:33:52.131 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.131 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:33:52.131 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.131 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:33:52.131 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.131 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:33:52.131 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.131 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.132 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:33:52.132 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:33:52.132 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.132 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:33:52.132 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.132 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:33:52.132 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.132 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.132 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.133 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.133 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.133 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.133 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.133 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.134 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.134 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.135 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.135 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.135 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.135 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.135 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.135 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.136 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.136 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.136 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.137 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.137 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.137 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.137 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.137 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.137 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.138 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.138 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.138 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.138 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.138 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.138 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.139 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.139 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.139 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.139 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.139 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.139 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.139 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.139 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.139 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.140 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.140 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.140 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.140 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.141 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.141 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.141 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.141 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.142 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.142 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.142 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.142 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.143 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.143 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.143 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.143 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.146 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.147 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.148 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.148 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.148 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.149 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.149 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.150 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.150 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.150 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.150 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.150 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.152 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.152 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.153 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.153 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.153 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.153 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.154 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.154 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.154 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.154 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.155 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.155 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.155 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.155 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.156 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.156 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.156 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.157 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.157 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.157 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.157 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.158 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.158 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.158 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.158 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.158 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.159 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.159 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.160 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.160 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.160 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.160 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.160 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.161 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.161 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.161 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.162 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.162 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.162 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.162 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.163 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.163 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.163 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.163 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.164 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.164 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.164 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.164 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.165 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.165 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.165 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.165 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.165 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.165 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.165 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.166 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.166 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.166 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.166 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.166 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.166 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.166 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.166 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.166 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.167 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.167 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.167 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.167 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.167 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.167 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.167 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.167 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.168 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.168 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.168 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.168 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.168 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.168 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.168 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.168 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.168 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.169 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.169 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.169 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.169 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.169 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.169 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.169 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.169 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.170 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.170 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.170 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.170 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.170 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.170 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.170 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.170 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.171 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.171 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.171 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.171 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.171 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.171 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.171 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.171 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.171 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.172 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.172 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:33:52.172 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.172 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.172 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.172 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.172 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:33:52.172 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.173 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:33:52.327 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:52.402 [main] DEBUG io.github.longfish801 - para call
10:33:52.456 [main] DEBUG io.github.longfish801 - line call
10:33:52.515 [main] DEBUG io.github.longfish801 - text call: 概要
10:33:52.569 [main] DEBUG io.github.longfish801 - para call
10:33:52.623 [main] DEBUG io.github.longfish801 - line call
10:33:52.680 [main] DEBUG io.github.longfish801 - text call: 　yakumoは変換名「_html」（HTML変換）をあらかじめ用意しています。
10:33:52.732 [main] DEBUG io.github.longfish801 - line call
10:33:52.789 [main] DEBUG io.github.longfish801 - text call: 　HTML変換は、テキストを HTML5形式へ変換するための設定です。
10:33:52.845 [main] DEBUG io.github.longfish801 - line call
10:33:52.903 [main] DEBUG io.github.longfish801 - text call: 　変換に利用しているクロージャマップの処理内容について、以下に説明します。
10:33:52.962 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:53.036 [main] DEBUG io.github.longfish801 - para call
10:33:53.089 [main] DEBUG io.github.longfish801 - line call
10:33:53.153 [main] DEBUG io.github.longfish801 - text call: ブロック要素
10:33:53.210 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:53.265 [main] DEBUG io.github.longfish801 - para call
10:33:53.317 [main] DEBUG io.github.longfish801 - line call
10:33:53.376 [main] DEBUG io.github.longfish801 - text call: 改行と段落
10:33:53.427 [main] DEBUG io.github.longfish801 - para call
10:33:53.481 [main] DEBUG io.github.longfish801 - line call
10:33:53.538 [main] DEBUG io.github.longfish801 - text call: 　改行は brタグを挿入します。
10:33:53.607 [main] DEBUG io.github.longfish801 - line call
10:33:53.664 [main] DEBUG io.github.longfish801 - text call: 　段落は pタグで囲みます。
10:33:53.717 [main] DEBUG io.github.longfish801 - line call
10:33:53.774 [main] DEBUG io.github.longfish801 - text call: 　なお、空行が二行以上あっても、変換結果には反映されません。
10:33:53.827 [main] DEBUG io.github.longfish801 - line call
10:33:53.888 [main] DEBUG io.github.longfish801 - text call: 　HTML文法上の特殊文字があるときはエスケープします。
10:33:53.940 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:53.996 [main] DEBUG io.github.longfish801 - para call
10:33:54.049 [main] DEBUG io.github.longfish801 - line call
10:33:54.114 [main] DEBUG io.github.longfish801 - text call: 　おいしいカレーを作るには"隠し味"が大切です。
10:33:54.174 [main] DEBUG io.github.longfish801 - line call
10:33:54.247 [main] DEBUG io.github.longfish801 - text call: 　隠し味にもいろいろなものがあります。
10:33:54.301 [main] DEBUG io.github.longfish801 - para call
10:33:54.354 [main] DEBUG io.github.longfish801 - line call
10:33:54.414 [main] DEBUG io.github.longfish801 - text call: 　一般家庭で良く使われる<隠し味>を試してみましょう。
10:33:54.466 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:54.521 [main] DEBUG io.github.longfish801 - para call
10:33:54.575 [main] DEBUG io.github.longfish801 - line call
10:33:54.636 [main] DEBUG io.github.longfish801 - text call: <p>　おいしいカレーを作るには&quot;隠し味&quot;が大切です。<br/>
10:33:54.690 [main] DEBUG io.github.longfish801 - line call
10:33:54.751 [main] DEBUG io.github.longfish801 - text call: 　隠し味にもいろいろなものがあります。</p>
10:33:54.806 [main] DEBUG io.github.longfish801 - para call
10:33:54.877 [main] DEBUG io.github.longfish801 - line call
10:33:54.936 [main] DEBUG io.github.longfish801 - text call: <p>　一般家庭で良く使われる&lt;隠し味&gt;を試してみましょう。</p>
10:33:54.988 [main] DEBUG io.github.longfish801 - para call
10:33:55.040 [main] DEBUG io.github.longfish801 - line call
10:33:55.096 [main] DEBUG io.github.longfish801 - text call: 　以下の行タグ、行範囲タグ内では、brタグのみ挿入します。
10:33:55.149 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:33:55.202 [main] DEBUG io.github.longfish801 - block call: block#項目
10:33:55.258 [main] DEBUG io.github.longfish801 - para call
10:33:55.314 [main] DEBUG io.github.longfish801 - line call
10:33:55.376 [main] DEBUG io.github.longfish801 - text call: 見出し、小見出し
10:33:55.430 [main] DEBUG io.github.longfish801 - block call: block#項目
10:33:55.516 [main] DEBUG io.github.longfish801 - para call
10:33:55.570 [main] DEBUG io.github.longfish801 - line call
10:33:55.631 [main] DEBUG io.github.longfish801 - text call: 挿入図
10:33:55.686 [main] DEBUG io.github.longfish801 - block call: block#項目
10:33:55.741 [main] DEBUG io.github.longfish801 - para call
10:33:55.797 [main] DEBUG io.github.longfish801 - line call
10:33:55.857 [main] DEBUG io.github.longfish801 - text call: 箇条書き：項目、対象、説明
10:33:55.912 [main] DEBUG io.github.longfish801 - block call: block#項目
10:33:55.970 [main] DEBUG io.github.longfish801 - para call
10:33:56.025 [main] DEBUG io.github.longfish801 - line call
10:33:56.105 [main] DEBUG io.github.longfish801 - text call: 表：見出しセル、セル
10:33:56.163 [main] DEBUG io.github.longfish801 - block call: block#項目
10:33:56.221 [main] DEBUG io.github.longfish801 - para call
10:33:56.277 [main] DEBUG io.github.longfish801 - line call
10:33:56.340 [main] DEBUG io.github.longfish801 - text call: 引用元
10:33:56.392 [main] DEBUG io.github.longfish801 - para call
10:33:56.446 [main] DEBUG io.github.longfish801 - line call
10:33:56.503 [main] DEBUG io.github.longfish801 - text call: 　以下の行範囲タグ内では brタグ、pタグを付与しません。
10:33:56.558 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:33:56.612 [main] DEBUG io.github.longfish801 - block call: block#項目
10:33:56.669 [main] DEBUG io.github.longfish801 - para call
10:33:56.741 [main] DEBUG io.github.longfish801 - line call
10:33:56.802 [main] DEBUG io.github.longfish801 - text call: 生データ
10:33:56.856 [main] DEBUG io.github.longfish801 - block call: block#項目
10:33:56.912 [main] DEBUG io.github.longfish801 - para call
10:33:56.969 [main] DEBUG io.github.longfish801 - line call
10:33:57.030 [main] DEBUG io.github.longfish801 - text call: 整形済
10:33:57.086 [main] DEBUG io.github.longfish801 - block call: block#項目
10:33:57.142 [main] DEBUG io.github.longfish801 - para call
10:33:57.199 [main] DEBUG io.github.longfish801 - line call
10:33:57.260 [main] DEBUG io.github.longfish801 - text call: コード
10:33:57.332 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:57.387 [main] DEBUG io.github.longfish801 - para call
10:33:57.438 [main] DEBUG io.github.longfish801 - line call
10:33:57.496 [main] DEBUG io.github.longfish801 - text call: タイトル、サブタイトル、著者名
10:33:57.547 [main] DEBUG io.github.longfish801 - para call
10:33:57.599 [main] DEBUG io.github.longfish801 - line call
10:33:57.655 [main] DEBUG io.github.longfish801 - text call: 　タイトル、サブタイトル、著者名は、含意タグで指定します。
10:33:57.712 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:57.766 [main] DEBUG io.github.longfish801 - para call
10:33:57.818 [main] DEBUG io.github.longfish801 - line call
10:33:57.875 [main] DEBUG io.github.longfish801 - text call: 【＃タイトル】円周率について
10:33:57.944 [main] DEBUG io.github.longfish801 - line call
10:33:58.001 [main] DEBUG io.github.longfish801 - text call: 【＃サブタイトル】著名な語呂合わせ
10:33:58.052 [main] DEBUG io.github.longfish801 - line call
10:33:58.110 [main] DEBUG io.github.longfish801 - text call: 【＃著者名】山田太郎
10:33:58.161 [main] DEBUG io.github.longfish801 - para call
10:33:58.220 [main] DEBUG io.github.longfish801 - line call
10:33:58.274 [main] DEBUG io.github.longfish801 - text call: 　含意タグはマップ headに変換します。
10:33:58.325 [main] DEBUG io.github.longfish801 - line call
10:33:58.379 [main] DEBUG io.github.longfish801 - text call: 　テンプレートでは、タイトル、サブタイトル、著者名が記述されていれば出力します。
10:33:58.429 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:33:58.487 [main] DEBUG io.github.longfish801 - para call
10:33:58.555 [main] DEBUG io.github.longfish801 - line call
10:33:58.615 [main] DEBUG io.github.longfish801 - text call: <head>
10:33:58.676 [main] DEBUG io.github.longfish801 - line call
10:33:58.739 [main] DEBUG io.github.longfish801 - text call:  ... 中略 ...
10:33:58.801 [main] DEBUG io.github.longfish801 - line call
10:33:58.865 [main] DEBUG io.github.longfish801 - text call: <% if (head.containsKey('タイトル')){ %><title><%= head['タイトル'].replaceAll(/<.+?>/, '') %></title><% } %>
10:33:58.920 [main] DEBUG io.github.longfish801 - line call
10:33:58.993 [main] DEBUG io.github.longfish801 - text call: </head>
10:33:59.048 [main] DEBUG io.github.longfish801 - line call
10:33:59.105 [main] DEBUG io.github.longfish801 - text call:  ... 中略 ...
10:33:59.156 [main] DEBUG io.github.longfish801 - line call
10:33:59.230 [main] DEBUG io.github.longfish801 - text call: <header class="container">
10:33:59.280 [main] DEBUG io.github.longfish801 - line call
10:33:59.336 [main] DEBUG io.github.longfish801 - text call: <% if (head.containsKey('タイトル')){ %><h1><%= head['タイトル'] %><% if (head.containsKey('サブタイトル')){ %> <small><%= head['サブタイトル'] %></small><% } %></h1><% } %>
10:33:59.385 [main] DEBUG io.github.longfish801 - line call
10:33:59.441 [main] DEBUG io.github.longfish801 - text call: <% if (head.containsKey('著者名')){ %><div class="author"><%= head['著者名'] %></div><% } %>
10:33:59.500 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:33:59.553 [main] DEBUG io.github.longfish801 - para call
10:33:59.604 [main] DEBUG io.github.longfish801 - line call
10:33:59.660 [main] DEBUG io.github.longfish801 - text call: 見出しと目次
10:33:59.710 [main] DEBUG io.github.longfish801 - para call
10:34:00.088 [main] DEBUG io.github.longfish801 - line call
10:34:00.142 [main] DEBUG io.github.longfish801 - text call: 　hタグを生成します。一番目の属性値が見出しのレベルとなります。
10:34:00.191 [main] DEBUG io.github.longfish801 - line call
10:34:00.246 [main] DEBUG io.github.longfish801 - text call: 　目次からページ内リンクで移動できるよう、aタグを挿入します。
10:34:00.299 [main] DEBUG io.github.longfish801 - line call
10:34:00.353 [main] DEBUG io.github.longfish801 - text call: 　name属性には、BLtxt文書を XML化したときの snum属性を利用します。
10:34:00.408 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:00.460 [main] DEBUG io.github.longfish801 - para call
10:34:00.513 [main] DEBUG io.github.longfish801 - line call
10:34:00.569 [main] DEBUG io.github.longfish801 - text call: 【＝見出し：2】カレーの作り方
10:34:00.620 [main] DEBUG io.github.longfish801 - line call
10:34:00.682 [main] DEBUG io.github.longfish801 - text call: 【＝見出し：3】材料の準備
10:34:00.732 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:00.785 [main] DEBUG io.github.longfish801 - para call
10:34:00.836 [main] DEBUG io.github.longfish801 - line call
10:34:00.893 [main] DEBUG io.github.longfish801 - text call: <h2><a name="1">カレーの作り方</a></h2>
10:34:00.944 [main] DEBUG io.github.longfish801 - line call
10:34:01.000 [main] DEBUG io.github.longfish801 - text call: <h3><a name="2">材料の準備</a></h3>
10:34:01.055 [main] DEBUG io.github.longfish801 - para call
10:34:01.106 [main] DEBUG io.github.longfish801 - line call
10:34:01.161 [main] DEBUG io.github.longfish801 - text call: 　見出しから目次を生成し、バインド変数のリスト indexに格納します。
10:34:01.212 [main] DEBUG io.github.longfish801 - line call
10:34:01.274 [main] DEBUG io.github.longfish801 - text call: 　リスト indexの要素はマップになっており、キー levelに見出しレベルを、キー hrefにリンク先アドレスを、キーtitleにリンク対象文字列を格納しています。
10:34:01.326 [main] DEBUG io.github.longfish801 - line call
10:34:01.381 [main] DEBUG io.github.longfish801 - text call: 　テンプレートでは以下のようにして出力しています。
10:34:01.432 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:01.487 [main] DEBUG io.github.longfish801 - para call
10:34:01.540 [main] DEBUG io.github.longfish801 - line call
10:34:01.600 [main] DEBUG io.github.longfish801 - text call: <% if (index.size() > 0){ %><nav class="list-group">
10:34:01.657 [main] DEBUG io.github.longfish801 - line call
10:34:01.717 [main] DEBUG io.github.longfish801 - text call: <% index.each { Map map -> %><a href="<%= map['href'] %>" class="list-group-item"><%= '　' * (map['level'] - 2) %><%= map['title'] %></a>
10:34:01.771 [main] DEBUG io.github.longfish801 - line call
10:34:01.834 [main] DEBUG io.github.longfish801 - text call: <% } %></nav><% } %>
10:34:01.893 [main] DEBUG io.github.longfish801 - line call
10:34:01.952 [main] DEBUG io.github.longfish801 - text call: </header>
10:34:02.012 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:02.070 [main] DEBUG io.github.longfish801 - para call
10:34:02.122 [main] DEBUG io.github.longfish801 - line call
10:34:02.180 [main] DEBUG io.github.longfish801 - text call: 小見出し
10:34:02.232 [main] DEBUG io.github.longfish801 - para call
10:34:02.284 [main] DEBUG io.github.longfish801 - line call
10:34:02.341 [main] DEBUG io.github.longfish801 - text call: 　前のほうで記述された見出しよりも、ひとつ見出しレベルが大きい見出しを作成します。
10:34:02.394 [main] DEBUG io.github.longfish801 - line call
10:34:02.457 [main] DEBUG io.github.longfish801 - text call: 　見出しが記述されていない場合、見出しレベルは 2で作成します。
10:34:02.509 [main] DEBUG io.github.longfish801 - line call
10:34:02.574 [main] DEBUG io.github.longfish801 - text call: 　小見出しは目次に反映しません。
10:34:02.625 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:02.680 [main] DEBUG io.github.longfish801 - para call
10:34:02.736 [main] DEBUG io.github.longfish801 - line call
10:34:02.795 [main] DEBUG io.github.longfish801 - text call: 【＝見出し：3】材料の準備
10:34:02.853 [main] DEBUG io.github.longfish801 - line call
10:34:02.912 [main] DEBUG io.github.longfish801 - text call: 【＝小見出し】巨大数の歴史
10:34:02.964 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:03.018 [main] DEBUG io.github.longfish801 - para call
10:34:03.076 [main] DEBUG io.github.longfish801 - line call
10:34:03.133 [main] DEBUG io.github.longfish801 - text call: <h3><a name="2">材料の準備</a></h3>
10:34:03.184 [main] DEBUG io.github.longfish801 - line call
10:34:03.242 [main] DEBUG io.github.longfish801 - text call: <h4>巨大数の歴史</h4>
10:34:03.301 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:03.355 [main] DEBUG io.github.longfish801 - para call
10:34:03.406 [main] DEBUG io.github.longfish801 - line call
10:34:03.462 [main] DEBUG io.github.longfish801 - text call: 挿入図
10:34:03.512 [main] DEBUG io.github.longfish801 - para call
10:34:03.564 [main] DEBUG io.github.longfish801 - line call
10:34:03.619 [main] DEBUG io.github.longfish801 - text call: 　figureタグを生成します。
10:34:03.675 [main] DEBUG io.github.longfish801 - line call
10:34:03.730 [main] DEBUG io.github.longfish801 - text call: 　行タグの属性に画像の説明、画像ファイルへのパスを指定してください。
10:34:03.782 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:03.839 [main] DEBUG io.github.longfish801 - para call
10:34:03.890 [main] DEBUG io.github.longfish801 - line call
10:34:03.950 [main] DEBUG io.github.longfish801 - text call: 【＝挿入図：サンプル：img.png】
10:34:04.000 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:04.053 [main] DEBUG io.github.longfish801 - para call
10:34:04.106 [main] DEBUG io.github.longfish801 - line call
10:34:04.165 [main] DEBUG io.github.longfish801 - text call: <div class="img"><img src="img.png" alt="サンプル"></div>
10:34:04.218 [main] DEBUG io.github.longfish801 - para call
10:34:04.280 [main] DEBUG io.github.longfish801 - line call
10:34:04.343 [main] DEBUG io.github.longfish801 - text call: 　画像にキャプションを付与することもできます。figcaptionタグを生成します。
10:34:04.395 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:04.450 [main] DEBUG io.github.longfish801 - para call
10:34:04.503 [main] DEBUG io.github.longfish801 - line call
10:34:04.560 [main] DEBUG io.github.longfish801 - text call: 【＝挿入図：サンプル：img.png】これはイメージです。
10:34:04.611 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:04.664 [main] DEBUG io.github.longfish801 - para call
10:34:04.715 [main] DEBUG io.github.longfish801 - line call
10:34:04.772 [main] DEBUG io.github.longfish801 - text call: <figure><img src="img.png" alt="サンプル" class="img-responsive center-block"><figcaption>これはイメージです。</figcaption></figure>
10:34:04.829 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:04.892 [main] DEBUG io.github.longfish801 - para call
10:34:04.944 [main] DEBUG io.github.longfish801 - line call
10:34:05.000 [main] DEBUG io.github.longfish801 - text call: 註、註記
10:34:05.049 [main] DEBUG io.github.longfish801 - para call
10:34:05.101 [main] DEBUG io.github.longfish801 - line call
10:34:05.157 [main] DEBUG io.github.longfish801 - text call: 　註は文中タグで、注記は含意範囲タグで記述します。
10:34:05.209 [main] DEBUG io.github.longfish801 - line call
10:34:05.266 [main] DEBUG io.github.longfish801 - text call: 　一番目の属性に、紐付けのため共通する文字列を指定してください。
10:34:05.317 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:05.371 [main] DEBUG io.github.longfish801 - para call
10:34:05.423 [main] DEBUG io.github.longfish801 - line call
10:34:05.488 [main] DEBUG io.github.longfish801 - text call: 　XML【註：XML】をHTML【註：HTML】に変換します。
10:34:05.540 [main] DEBUG io.github.longfish801 - para call
10:34:05.591 [main] DEBUG io.github.longfish801 - line call
10:34:05.649 [main] DEBUG io.github.longfish801 - text call: 【＊註記：XML】
10:34:05.699 [main] DEBUG io.github.longfish801 - line call
10:34:05.755 [main] DEBUG io.github.longfish801 - text call: 　eXtensible Markup Languageの略です。
10:34:05.808 [main] DEBUG io.github.longfish801 - line call
10:34:05.872 [main] DEBUG io.github.longfish801 - text call: 【註記＊】
10:34:05.925 [main] DEBUG io.github.longfish801 - line call
10:34:05.983 [main] DEBUG io.github.longfish801 - text call: 【＊註記：HTML】
10:34:06.044 [main] DEBUG io.github.longfish801 - line call
10:34:06.100 [main] DEBUG io.github.longfish801 - text call: 　Hyper Text Markup Languageの略です。
10:34:06.151 [main] DEBUG io.github.longfish801 - line call
10:34:06.209 [main] DEBUG io.github.longfish801 - text call: 【註記＊】
10:34:06.259 [main] DEBUG io.github.longfish801 - para call
10:34:06.311 [main] DEBUG io.github.longfish801 - line call
10:34:06.366 [main] DEBUG io.github.longfish801 - text call: 　HTML変換時に通番をふります。
10:34:06.416 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:06.469 [main] DEBUG io.github.longfish801 - para call
10:34:06.521 [main] DEBUG io.github.longfish801 - line call
10:34:06.577 [main] DEBUG io.github.longfish801 - text call: <p>　XML<sup><a id="f1" href="#t1">*1</a></sup>をHTML<sup><a id="f2" href="#t2">*2</a></sup>に変換します。</p>
10:34:06.640 [main] DEBUG io.github.longfish801 - para call
10:34:06.691 [main] DEBUG io.github.longfish801 - line call
10:34:06.747 [main] DEBUG io.github.longfish801 - text call: <dl class="note">
10:34:06.798 [main] DEBUG io.github.longfish801 - line call
10:34:06.856 [main] DEBUG io.github.longfish801 - text call: <dt><a name="t1" href="#f1">[*1]</a></dt>
10:34:06.907 [main] DEBUG io.github.longfish801 - line call
10:34:06.962 [main] DEBUG io.github.longfish801 - text call: <dd>　eXtensible Markup Languageの略です。</dd>
10:34:07.012 [main] DEBUG io.github.longfish801 - line call
10:34:07.068 [main] DEBUG io.github.longfish801 - text call: <dt><a name="t2" href="#f2">[*2]</a></dt>
10:34:07.119 [main] DEBUG io.github.longfish801 - line call
10:34:07.187 [main] DEBUG io.github.longfish801 - text call: <dd>　Hyper Text Markup Languageの略です。</dd>
10:34:07.238 [main] DEBUG io.github.longfish801 - line call
10:34:07.297 [main] DEBUG io.github.longfish801 - text call: </dl>
10:34:07.349 [main] DEBUG io.github.longfish801 - para call
10:34:07.402 [main] DEBUG io.github.longfish801 - line call
10:34:07.460 [main] DEBUG io.github.longfish801 - text call: 　生成した註記は、バインド変数 noteに格納します。
10:34:07.512 [main] DEBUG io.github.longfish801 - line call
10:34:07.568 [main] DEBUG io.github.longfish801 - text call: 　テンプレートでは以下のとおり出力しています。
10:34:07.621 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:07.677 [main] DEBUG io.github.longfish801 - para call
10:34:07.729 [main] DEBUG io.github.longfish801 - line call
10:34:07.799 [main] DEBUG io.github.longfish801 - text call: <% if (!note.empty){ %><aside>
10:34:07.853 [main] DEBUG io.github.longfish801 - line call
10:34:07.914 [main] DEBUG io.github.longfish801 - text call: <%= note %>
10:34:07.967 [main] DEBUG io.github.longfish801 - line call
10:34:08.026 [main] DEBUG io.github.longfish801 - text call: </aside><% } %>
10:34:08.082 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:08.135 [main] DEBUG io.github.longfish801 - para call
10:34:08.189 [main] DEBUG io.github.longfish801 - line call
10:34:08.251 [main] DEBUG io.github.longfish801 - text call: 箇条書き
10:34:08.312 [main] DEBUG io.github.longfish801 - para call
10:34:08.370 [main] DEBUG io.github.longfish801 - line call
10:34:08.445 [main] DEBUG io.github.longfish801 - text call: 　箇条書きには順序あり、順序なし、項目説明の三種類があります。
10:34:08.497 [main] DEBUG io.github.longfish801 - line call
10:34:08.556 [main] DEBUG io.github.longfish801 - text call: 　それぞれ ul, ol, dlタグを生成します。
10:34:08.606 [main] DEBUG io.github.longfish801 - line call
10:34:08.660 [main] DEBUG io.github.longfish801 - text call: 　順序あり、順序なしの項目は liタグを生成します。
10:34:08.711 [main] DEBUG io.github.longfish801 - line call
10:34:08.764 [main] DEBUG io.github.longfish801 - text call: 　項目説明の項目と説明は、それぞれ dt, ddタグを生成します。
10:34:08.814 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:08.869 [main] DEBUG io.github.longfish801 - para call
10:34:08.920 [main] DEBUG io.github.longfish801 - line call
10:34:08.978 [main] DEBUG io.github.longfish801 - text call: 【－箇条書き】
10:34:09.042 [main] DEBUG io.github.longfish801 - line call
10:34:09.098 [main] DEBUG io.github.longfish801 - text call: 【－項目】
10:34:09.151 [main] DEBUG io.github.longfish801 - line call
10:34:09.214 [main] DEBUG io.github.longfish801 - text call: じゃがいも
10:34:09.267 [main] DEBUG io.github.longfish801 - line call
10:34:09.325 [main] DEBUG io.github.longfish801 - text call: 【項目－】
10:34:09.376 [main] DEBUG io.github.longfish801 - line call
10:34:09.433 [main] DEBUG io.github.longfish801 - text call: 【－項目】
10:34:09.485 [main] DEBUG io.github.longfish801 - line call
10:34:09.547 [main] DEBUG io.github.longfish801 - text call: ニンジン
10:34:09.615 [main] DEBUG io.github.longfish801 - line call
10:34:09.675 [main] DEBUG io.github.longfish801 - text call: 【項目－】
10:34:09.729 [main] DEBUG io.github.longfish801 - line call
10:34:09.787 [main] DEBUG io.github.longfish801 - text call: 【－項目】
10:34:09.838 [main] DEBUG io.github.longfish801 - line call
10:34:09.896 [main] DEBUG io.github.longfish801 - text call: 玉ねぎ
10:34:09.947 [main] DEBUG io.github.longfish801 - line call
10:34:10.004 [main] DEBUG io.github.longfish801 - text call: 【－箇条書き】
10:34:10.055 [main] DEBUG io.github.longfish801 - line call
10:34:10.113 [main] DEBUG io.github.longfish801 - text call: 【－説明】
10:34:10.163 [main] DEBUG io.github.longfish801 - line call
10:34:10.235 [main] DEBUG io.github.longfish801 - text call: 刻むときは注意。
10:34:10.294 [main] DEBUG io.github.longfish801 - line call
10:34:10.356 [main] DEBUG io.github.longfish801 - text call: 涙がでます。
10:34:10.411 [main] DEBUG io.github.longfish801 - line call
10:34:10.473 [main] DEBUG io.github.longfish801 - text call: 【説明－】
10:34:10.529 [main] DEBUG io.github.longfish801 - line call
10:34:10.590 [main] DEBUG io.github.longfish801 - text call: 【箇条書き－】
10:34:10.646 [main] DEBUG io.github.longfish801 - line call
10:34:10.707 [main] DEBUG io.github.longfish801 - text call: 【項目－】
10:34:10.766 [main] DEBUG io.github.longfish801 - line call
10:34:10.840 [main] DEBUG io.github.longfish801 - text call: 【－項目】
10:34:10.896 [main] DEBUG io.github.longfish801 - line call
10:34:10.955 [main] DEBUG io.github.longfish801 - text call: カレー粉
10:34:11.012 [main] DEBUG io.github.longfish801 - line call
10:34:11.073 [main] DEBUG io.github.longfish801 - text call: 【－箇条書き：順序あり】
10:34:11.127 [main] DEBUG io.github.longfish801 - line call
10:34:11.186 [main] DEBUG io.github.longfish801 - text call: 【－項目】
10:34:11.242 [main] DEBUG io.github.longfish801 - line call
10:34:11.300 [main] DEBUG io.github.longfish801 - text call: ジャワカレー
10:34:11.356 [main] DEBUG io.github.longfish801 - line call
10:34:11.416 [main] DEBUG io.github.longfish801 - text call: 【項目－】
10:34:11.501 [main] DEBUG io.github.longfish801 - line call
10:34:11.560 [main] DEBUG io.github.longfish801 - text call: 【－項目】
10:34:11.615 [main] DEBUG io.github.longfish801 - line call
10:34:11.674 [main] DEBUG io.github.longfish801 - text call: バーモンドカレー
10:34:11.728 [main] DEBUG io.github.longfish801 - line call
10:34:11.786 [main] DEBUG io.github.longfish801 - text call: 【項目－】
10:34:11.843 [main] DEBUG io.github.longfish801 - line call
10:34:11.903 [main] DEBUG io.github.longfish801 - text call: 【箇条書き－】
10:34:11.958 [main] DEBUG io.github.longfish801 - line call
10:34:12.017 [main] DEBUG io.github.longfish801 - text call: 【項目－】
10:34:12.090 [main] DEBUG io.github.longfish801 - line call
10:34:12.196 [main] DEBUG io.github.longfish801 - text call: 【箇条書き－】
10:34:12.267 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:12.332 [main] DEBUG io.github.longfish801 - para call
10:34:12.385 [main] DEBUG io.github.longfish801 - line call
10:34:12.443 [main] DEBUG io.github.longfish801 - text call: <ul>
10:34:12.494 [main] DEBUG io.github.longfish801 - line call
10:34:12.577 [main] DEBUG io.github.longfish801 - text call: <li>じゃがいも</li>
10:34:12.632 [main] DEBUG io.github.longfish801 - line call
10:34:12.693 [main] DEBUG io.github.longfish801 - text call: <li>ニンジン</li>
10:34:12.745 [main] DEBUG io.github.longfish801 - line call
10:34:12.818 [main] DEBUG io.github.longfish801 - text call: <li>玉ねぎ<br/>
10:34:12.871 [main] DEBUG io.github.longfish801 - line call
10:34:12.934 [main] DEBUG io.github.longfish801 - text call: <ul>
10:34:13.023 [main] DEBUG io.github.longfish801 - line call
10:34:13.101 [main] DEBUG io.github.longfish801 - text call: <li class="dd">→刻むときは注意。<br/>
10:34:13.155 [main] DEBUG io.github.longfish801 - line call
10:34:13.214 [main] DEBUG io.github.longfish801 - text call: 　涙がでます。</li>
10:34:13.266 [main] DEBUG io.github.longfish801 - line call
10:34:13.325 [main] DEBUG io.github.longfish801 - text call: </ul></li>
10:34:13.378 [main] DEBUG io.github.longfish801 - line call
10:34:13.448 [main] DEBUG io.github.longfish801 - text call: <li>カレー粉<br/>
10:34:13.501 [main] DEBUG io.github.longfish801 - line call
10:34:13.559 [main] DEBUG io.github.longfish801 - text call: <ol>
10:34:13.612 [main] DEBUG io.github.longfish801 - line call
10:34:13.668 [main] DEBUG io.github.longfish801 - text call: <li>ジャワカレー</li>
10:34:13.720 [main] DEBUG io.github.longfish801 - line call
10:34:13.778 [main] DEBUG io.github.longfish801 - text call: <li>バーモンドカレー</li>
10:34:13.830 [main] DEBUG io.github.longfish801 - line call
10:34:13.888 [main] DEBUG io.github.longfish801 - text call: </ol></li>
10:34:13.940 [main] DEBUG io.github.longfish801 - line call
10:34:13.998 [main] DEBUG io.github.longfish801 - text call: </ul>
10:34:14.064 [main] DEBUG io.github.longfish801 - para call
10:34:14.119 [main] DEBUG io.github.longfish801 - line call
10:34:14.177 [main] DEBUG io.github.longfish801 - text call: 　項目説明の箇条書きは以下となります。
10:34:14.229 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:14.290 [main] DEBUG io.github.longfish801 - para call
10:34:14.342 [main] DEBUG io.github.longfish801 - line call
10:34:14.399 [main] DEBUG io.github.longfish801 - text call: 【－箇条書き：項目説明】
10:34:14.451 [main] DEBUG io.github.longfish801 - line call
10:34:14.507 [main] DEBUG io.github.longfish801 - text call: 【－対象】
10:34:14.559 [main] DEBUG io.github.longfish801 - line call
10:34:14.633 [main] DEBUG io.github.longfish801 - text call: ターメリック
10:34:14.689 [main] DEBUG io.github.longfish801 - line call
10:34:14.751 [main] DEBUG io.github.longfish801 - text call: 【対象－】
10:34:14.807 [main] DEBUG io.github.longfish801 - line call
10:34:14.869 [main] DEBUG io.github.longfish801 - text call: 【－箇条書き】
10:34:14.923 [main] DEBUG io.github.longfish801 - line call
10:34:14.980 [main] DEBUG io.github.longfish801 - text call: 【－説明】
10:34:15.031 [main] DEBUG io.github.longfish801 - line call
10:34:15.088 [main] DEBUG io.github.longfish801 - text call: 香辛料の一種です。
10:34:15.140 [main] DEBUG io.github.longfish801 - line call
10:34:15.196 [main] DEBUG io.github.longfish801 - text call: 【説明－】
10:34:15.260 [main] DEBUG io.github.longfish801 - line call
10:34:15.318 [main] DEBUG io.github.longfish801 - text call: 【箇条書き－】
10:34:15.370 [main] DEBUG io.github.longfish801 - line call
10:34:15.426 [main] DEBUG io.github.longfish801 - text call: 【箇条書き－】
10:34:15.478 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:15.530 [main] DEBUG io.github.longfish801 - para call
10:34:15.582 [main] DEBUG io.github.longfish801 - line call
10:34:15.640 [main] DEBUG io.github.longfish801 - text call: <dl>
10:34:15.692 [main] DEBUG io.github.longfish801 - line call
10:34:15.749 [main] DEBUG io.github.longfish801 - text call: <dt>ターメリック</dt>
10:34:15.801 [main] DEBUG io.github.longfish801 - line call
10:34:15.871 [main] DEBUG io.github.longfish801 - text call: <dd>香辛料の一種です。</dd>
10:34:15.922 [main] DEBUG io.github.longfish801 - line call
10:34:15.978 [main] DEBUG io.github.longfish801 - text call: </dl>
10:34:16.035 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:16.088 [main] DEBUG io.github.longfish801 - para call
10:34:16.138 [main] DEBUG io.github.longfish801 - line call
10:34:16.196 [main] DEBUG io.github.longfish801 - text call: 表
10:34:16.246 [main] DEBUG io.github.longfish801 - para call
10:34:16.298 [main] DEBUG io.github.longfish801 - line call
10:34:16.352 [main] DEBUG io.github.longfish801 - text call: 　tableタグ（class属性値は"table"）を生成します。
10:34:16.416 [main] DEBUG io.github.longfish801 - line call
10:34:16.471 [main] DEBUG io.github.longfish801 - text call: 　第一属性に小見出しを指定することもできます。
10:34:16.521 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:16.575 [main] DEBUG io.github.longfish801 - para call
10:34:16.628 [main] DEBUG io.github.longfish801 - line call
10:34:16.684 [main] DEBUG io.github.longfish801 - text call: 【－表：各県の名産】
10:34:16.735 [main] DEBUG io.github.longfish801 - line call
10:34:16.793 [main] DEBUG io.github.longfish801 - text call: 【－行】
10:34:16.844 [main] DEBUG io.github.longfish801 - line call
10:34:16.902 [main] DEBUG io.github.longfish801 - text call: 【＝見出しセル】No.
10:34:16.953 [main] DEBUG io.github.longfish801 - line call
10:34:17.024 [main] DEBUG io.github.longfish801 - text call: 【＝見出しセル】産物
10:34:17.075 [main] DEBUG io.github.longfish801 - line call
10:34:17.132 [main] DEBUG io.github.longfish801 - text call: 【＝見出しセル】産地
10:34:17.184 [main] DEBUG io.github.longfish801 - line call
10:34:17.240 [main] DEBUG io.github.longfish801 - text call: 【行－】
10:34:17.291 [main] DEBUG io.github.longfish801 - line call
10:34:17.347 [main] DEBUG io.github.longfish801 - text call: 【－行】
10:34:17.398 [main] DEBUG io.github.longfish801 - line call
10:34:17.454 [main] DEBUG io.github.longfish801 - text call: 【＝セル】1
10:34:17.506 [main] DEBUG io.github.longfish801 - line call
10:34:17.575 [main] DEBUG io.github.longfish801 - text call: 【＝セル】みかん
10:34:17.626 [main] DEBUG io.github.longfish801 - line call
10:34:17.685 [main] DEBUG io.github.longfish801 - text call: 【＝セル】愛媛
10:34:17.737 [main] DEBUG io.github.longfish801 - line call
10:34:17.795 [main] DEBUG io.github.longfish801 - text call: 【行－】
10:34:17.847 [main] DEBUG io.github.longfish801 - line call
10:34:17.903 [main] DEBUG io.github.longfish801 - text call: 【－行】
10:34:17.954 [main] DEBUG io.github.longfish801 - line call
10:34:18.012 [main] DEBUG io.github.longfish801 - text call: 【＝セル】2
10:34:18.063 [main] DEBUG io.github.longfish801 - line call
10:34:18.121 [main] DEBUG io.github.longfish801 - text call: 【＝セル】茶
10:34:18.185 [main] DEBUG io.github.longfish801 - line call
10:34:18.242 [main] DEBUG io.github.longfish801 - text call: 【＝セル】静岡
10:34:18.294 [main] DEBUG io.github.longfish801 - line call
10:34:18.351 [main] DEBUG io.github.longfish801 - text call: 【行－】
10:34:18.404 [main] DEBUG io.github.longfish801 - line call
10:34:18.460 [main] DEBUG io.github.longfish801 - text call: 【表－】
10:34:18.511 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:18.565 [main] DEBUG io.github.longfish801 - para call
10:34:18.617 [main] DEBUG io.github.longfish801 - line call
10:34:18.674 [main] DEBUG io.github.longfish801 - text call: <aside class="panel panel-default">
10:34:18.725 [main] DEBUG io.github.longfish801 - line call
10:34:18.795 [main] DEBUG io.github.longfish801 - text call: <header class="panel-heading">各県の名産</header>
10:34:18.846 [main] DEBUG io.github.longfish801 - line call
10:34:18.902 [main] DEBUG io.github.longfish801 - text call: <table class="table">
10:34:18.953 [main] DEBUG io.github.longfish801 - line call
10:34:19.009 [main] DEBUG io.github.longfish801 - text call: <tr><th>No.</th><th>産物</th><th>産地</th></tr>
10:34:19.060 [main] DEBUG io.github.longfish801 - line call
10:34:19.116 [main] DEBUG io.github.longfish801 - text call: <tr><td>1</td><td>みかん</td><td>愛媛</td></tr>
10:34:19.167 [main] DEBUG io.github.longfish801 - line call
10:34:19.224 [main] DEBUG io.github.longfish801 - text call: <tr><td>2</td><td>茶</td><td>静岡</td></tr>
10:34:19.275 [main] DEBUG io.github.longfish801 - line call
10:34:19.345 [main] DEBUG io.github.longfish801 - text call: </table>
10:34:19.396 [main] DEBUG io.github.longfish801 - line call
10:34:19.453 [main] DEBUG io.github.longfish801 - text call: </aside>
10:34:19.509 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:19.561 [main] DEBUG io.github.longfish801 - para call
10:34:19.611 [main] DEBUG io.github.longfish801 - line call
10:34:19.668 [main] DEBUG io.github.longfish801 - text call: コラム
10:34:19.719 [main] DEBUG io.github.longfish801 - para call
10:34:19.770 [main] DEBUG io.github.longfish801 - line call
10:34:19.826 [main] DEBUG io.github.longfish801 - text call: 　asideタグ（class属性値は"column"）を生成します。
10:34:19.876 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:19.943 [main] DEBUG io.github.longfish801 - para call
10:34:19.994 [main] DEBUG io.github.longfish801 - line call
10:34:20.051 [main] DEBUG io.github.longfish801 - text call: 【－コラム】
10:34:20.102 [main] DEBUG io.github.longfish801 - line call
10:34:20.158 [main] DEBUG io.github.longfish801 - text call: 　日本人の四割は血液型がＯ型です。
10:34:20.208 [main] DEBUG io.github.longfish801 - line call
10:34:20.265 [main] DEBUG io.github.longfish801 - text call: 【コラム－】
10:34:20.315 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:20.368 [main] DEBUG io.github.longfish801 - para call
10:34:20.419 [main] DEBUG io.github.longfish801 - line call
10:34:20.488 [main] DEBUG io.github.longfish801 - text call: <aside class="panel panel-primary">
10:34:20.539 [main] DEBUG io.github.longfish801 - line call
10:34:20.596 [main] DEBUG io.github.longfish801 - text call: <div class="panel-body">
10:34:20.651 [main] DEBUG io.github.longfish801 - line call
10:34:20.709 [main] DEBUG io.github.longfish801 - text call: <p>　日本人の四割は血液型がＯ型です。</p>
10:34:20.760 [main] DEBUG io.github.longfish801 - line call
10:34:20.816 [main] DEBUG io.github.longfish801 - text call: </div>
10:34:20.868 [main] DEBUG io.github.longfish801 - line call
10:34:20.924 [main] DEBUG io.github.longfish801 - text call: </aside>
10:34:20.976 [main] DEBUG io.github.longfish801 - para call
10:34:21.028 [main] DEBUG io.github.longfish801 - line call
10:34:21.095 [main] DEBUG io.github.longfish801 - text call: 　第一属性に小見出しを指定することもできます。
10:34:21.146 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:21.199 [main] DEBUG io.github.longfish801 - para call
10:34:21.250 [main] DEBUG io.github.longfish801 - line call
10:34:21.308 [main] DEBUG io.github.longfish801 - text call: 【－コラム：８月３１日は】
10:34:21.359 [main] DEBUG io.github.longfish801 - line call
10:34:21.416 [main] DEBUG io.github.longfish801 - text call: 　８月３１日は野菜の日です。
10:34:21.467 [main] DEBUG io.github.longfish801 - line call
10:34:21.524 [main] DEBUG io.github.longfish801 - text call: 　野菜を食べましょう。
10:34:21.576 [main] DEBUG io.github.longfish801 - line call
10:34:21.632 [main] DEBUG io.github.longfish801 - text call: 【コラム－】
10:34:21.696 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:21.749 [main] DEBUG io.github.longfish801 - para call
10:34:21.802 [main] DEBUG io.github.longfish801 - line call
10:34:21.858 [main] DEBUG io.github.longfish801 - text call: <aside class="panel panel-primary">
10:34:21.910 [main] DEBUG io.github.longfish801 - line call
10:34:21.966 [main] DEBUG io.github.longfish801 - text call: <header class="panel-heading">８月３１日は</header>
10:34:22.017 [main] DEBUG io.github.longfish801 - line call
10:34:22.074 [main] DEBUG io.github.longfish801 - text call: <div class="panel-body">
10:34:22.125 [main] DEBUG io.github.longfish801 - line call
10:34:22.183 [main] DEBUG io.github.longfish801 - text call: <p>　８月３１日は野菜の日です。<br/>
10:34:22.247 [main] DEBUG io.github.longfish801 - line call
10:34:22.304 [main] DEBUG io.github.longfish801 - text call: 　野菜を食べましょう。</p>
10:34:22.355 [main] DEBUG io.github.longfish801 - line call
10:34:22.412 [main] DEBUG io.github.longfish801 - text call: </div>
10:34:22.463 [main] DEBUG io.github.longfish801 - line call
10:34:22.519 [main] DEBUG io.github.longfish801 - text call: </aside>
10:34:22.575 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:22.628 [main] DEBUG io.github.longfish801 - para call
10:34:22.680 [main] DEBUG io.github.longfish801 - line call
10:34:22.736 [main] DEBUG io.github.longfish801 - text call: 注意
10:34:22.787 [main] DEBUG io.github.longfish801 - para call
10:34:22.868 [main] DEBUG io.github.longfish801 - line call
10:34:22.924 [main] DEBUG io.github.longfish801 - text call: 　asideタグ（class属性値は"attention"）を生成します。
10:34:22.974 [main] DEBUG io.github.longfish801 - line call
10:34:23.029 [main] DEBUG io.github.longfish801 - text call: 　第一属性に小見出しを指定することもできます。
10:34:23.080 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:23.150 [main] DEBUG io.github.longfish801 - para call
10:34:23.202 [main] DEBUG io.github.longfish801 - line call
10:34:23.259 [main] DEBUG io.github.longfish801 - text call: 【－注意：中火とは】
10:34:23.310 [main] DEBUG io.github.longfish801 - line call
10:34:23.366 [main] DEBUG io.github.longfish801 - text call: 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。
10:34:23.417 [main] DEBUG io.github.longfish801 - line call
10:34:23.504 [main] DEBUG io.github.longfish801 - text call: 【注意－】
10:34:23.554 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:23.608 [main] DEBUG io.github.longfish801 - para call
10:34:23.660 [main] DEBUG io.github.longfish801 - line call
10:34:23.716 [main] DEBUG io.github.longfish801 - text call: <aside class="panel panel-warning">
10:34:23.767 [main] DEBUG io.github.longfish801 - line call
10:34:23.823 [main] DEBUG io.github.longfish801 - text call: <header class="panel-heading">中火とは</header>
10:34:23.874 [main] DEBUG io.github.longfish801 - line call
10:34:23.931 [main] DEBUG io.github.longfish801 - text call: <div class="panel-body">
10:34:23.982 [main] DEBUG io.github.longfish801 - line call
10:34:24.051 [main] DEBUG io.github.longfish801 - text call: <p>　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。</p>
10:34:24.119 [main] DEBUG io.github.longfish801 - line call
10:34:24.176 [main] DEBUG io.github.longfish801 - text call: </div>
10:34:24.228 [main] DEBUG io.github.longfish801 - line call
10:34:24.284 [main] DEBUG io.github.longfish801 - text call: </aside>
10:34:24.340 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:24.392 [main] DEBUG io.github.longfish801 - para call
10:34:24.443 [main] DEBUG io.github.longfish801 - line call
10:34:24.499 [main] DEBUG io.github.longfish801 - text call: 引用、引用元
10:34:24.551 [main] DEBUG io.github.longfish801 - para call
10:34:24.601 [main] DEBUG io.github.longfish801 - line call
10:34:24.668 [main] DEBUG io.github.longfish801 - text call: 　blockquoteタグを生成します。
10:34:24.718 [main] DEBUG io.github.longfish801 - line call
10:34:24.773 [main] DEBUG io.github.longfish801 - text call: 　第一属性に小見出しを指定することもできます。
10:34:24.824 [main] DEBUG io.github.longfish801 - line call
10:34:24.879 [main] DEBUG io.github.longfish801 - text call: 　行タグで引用元を指定することもできます。
10:34:24.928 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:24.982 [main] DEBUG io.github.longfish801 - para call
10:34:25.034 [main] DEBUG io.github.longfish801 - line call
10:34:25.091 [main] DEBUG io.github.longfish801 - text call: 【－引用】
10:34:25.142 [main] DEBUG io.github.longfish801 - line call
10:34:25.200 [main] DEBUG io.github.longfish801 - text call: 　山路を登りながら、こう考えた。
10:34:25.266 [main] DEBUG io.github.longfish801 - line call
10:34:25.322 [main] DEBUG io.github.longfish801 - text call: 　智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。
10:34:25.374 [main] DEBUG io.github.longfish801 - line call
10:34:25.430 [main] DEBUG io.github.longfish801 - text call: 【＝引用元】夏目漱石『草枕』
10:34:25.481 [main] DEBUG io.github.longfish801 - line call
10:34:25.537 [main] DEBUG io.github.longfish801 - text call: 【引用－】
10:34:25.587 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:25.640 [main] DEBUG io.github.longfish801 - para call
10:34:25.692 [main] DEBUG io.github.longfish801 - line call
10:34:25.749 [main] DEBUG io.github.longfish801 - text call: <blockquote>
10:34:25.813 [main] DEBUG io.github.longfish801 - line call
10:34:25.870 [main] DEBUG io.github.longfish801 - text call: <p>　山路を登りながら、こう考えた。<br/>
10:34:25.921 [main] DEBUG io.github.longfish801 - line call
10:34:25.979 [main] DEBUG io.github.longfish801 - text call: 　智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。</p>
10:34:26.030 [main] DEBUG io.github.longfish801 - line call
10:34:26.086 [main] DEBUG io.github.longfish801 - text call: <footer>夏目漱石『草枕』</footer>
10:34:26.137 [main] DEBUG io.github.longfish801 - line call
10:34:26.195 [main] DEBUG io.github.longfish801 - text call: </blockquote>
10:34:26.251 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:26.306 [main] DEBUG io.github.longfish801 - para call
10:34:26.357 [main] DEBUG io.github.longfish801 - line call
10:34:26.428 [main] DEBUG io.github.longfish801 - text call: コード
10:34:26.478 [main] DEBUG io.github.longfish801 - para call
10:34:26.530 [main] DEBUG io.github.longfish801 - line call
10:34:26.585 [main] DEBUG io.github.longfish801 - text call: 　preタグ（class属性値は"code"）を生成します。
10:34:26.637 [main] DEBUG io.github.longfish801 - line call
10:34:26.693 [main] DEBUG io.github.longfish801 - text call: 　第一属性に小見出しを指定することもできます。
10:34:26.743 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:26.797 [main] DEBUG io.github.longfish801 - para call
10:34:26.848 [main] DEBUG io.github.longfish801 - line call
10:34:26.906 [main] DEBUG io.github.longfish801 - text call: 【－コード】
10:34:26.958 [main] DEBUG io.github.longfish801 - line call
10:34:27.029 [main] DEBUG io.github.longfish801 - text call: println "Hello, World!";
10:34:27.090 [main] DEBUG io.github.longfish801 - line call
10:34:27.152 [main] DEBUG io.github.longfish801 - text call: println "This is sample code of how to hello to all of the world, which is executed " + Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
10:34:27.204 [main] DEBUG io.github.longfish801 - line call
10:34:27.261 [main] DEBUG io.github.longfish801 - text call: 【コード－】
10:34:27.313 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:27.366 [main] DEBUG io.github.longfish801 - para call
10:34:27.418 [main] DEBUG io.github.longfish801 - line call
10:34:27.477 [main] DEBUG io.github.longfish801 - text call: <pre class="code">
10:34:27.532 [main] DEBUG io.github.longfish801 - line call
10:34:27.619 [main] DEBUG io.github.longfish801 - text call: println &quot;Hello, World!&quot;;
10:34:27.673 [main] DEBUG io.github.longfish801 - line call
10:34:27.731 [main] DEBUG io.github.longfish801 - text call: println &quot;This is sample code of how to hello to all of the world, which is executed &quot; + Date().format(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSZ&quot;);
10:34:27.782 [main] DEBUG io.github.longfish801 - line call
10:34:27.840 [main] DEBUG io.github.longfish801 - text call: </pre>
10:34:27.896 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:27.951 [main] DEBUG io.github.longfish801 - para call
10:34:28.002 [main] DEBUG io.github.longfish801 - line call
10:34:28.076 [main] DEBUG io.github.longfish801 - text call: 整形済
10:34:28.128 [main] DEBUG io.github.longfish801 - para call
10:34:28.179 [main] DEBUG io.github.longfish801 - line call
10:34:28.248 [main] DEBUG io.github.longfish801 - text call: 　preタグを生成します。
10:34:28.299 [main] DEBUG io.github.longfish801 - line call
10:34:28.355 [main] DEBUG io.github.longfish801 - text call: 　第一属性に小見出しを指定することもできます。
10:34:28.405 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:28.459 [main] DEBUG io.github.longfish801 - para call
10:34:28.511 [main] DEBUG io.github.longfish801 - line call
10:34:28.568 [main] DEBUG io.github.longfish801 - text call: 【－整形済】
10:34:28.619 [main] DEBUG io.github.longfish801 - line call
10:34:28.693 [main] DEBUG io.github.longfish801 - text call: ルートフォルダ
10:34:28.745 [main] DEBUG io.github.longfish801 - line call
10:34:28.802 [main] DEBUG io.github.longfish801 - text call: 　├ binフォルダ
10:34:28.866 [main] DEBUG io.github.longfish801 - line call
10:34:28.923 [main] DEBUG io.github.longfish801 - text call: 　│　└ 実行ファイル
10:34:28.974 [main] DEBUG io.github.longfish801 - line call
10:34:29.030 [main] DEBUG io.github.longfish801 - text call: 　└ confフォルダ
10:34:29.084 [main] DEBUG io.github.longfish801 - line call
10:34:29.140 [main] DEBUG io.github.longfish801 - text call: 【整形済－】
10:34:29.191 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:29.244 [main] DEBUG io.github.longfish801 - para call
10:34:29.296 [main] DEBUG io.github.longfish801 - line call
10:34:29.352 [main] DEBUG io.github.longfish801 - text call: <pre>ルートフォルダ
10:34:29.416 [main] DEBUG io.github.longfish801 - line call
10:34:29.494 [main] DEBUG io.github.longfish801 - text call: 　├ binフォルダ
10:34:29.545 [main] DEBUG io.github.longfish801 - line call
10:34:29.604 [main] DEBUG io.github.longfish801 - text call: 　│　└ 実行ファイル
10:34:29.655 [main] DEBUG io.github.longfish801 - line call
10:34:29.711 [main] DEBUG io.github.longfish801 - text call: 　└ confフォルダ</pre>
10:34:29.768 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:29.821 [main] DEBUG io.github.longfish801 - para call
10:34:29.875 [main] DEBUG io.github.longfish801 - line call
10:34:29.932 [main] DEBUG io.github.longfish801 - text call: 生データ
10:34:29.983 [main] DEBUG io.github.longfish801 - para call
10:34:30.047 [main] DEBUG io.github.longfish801 - line call
10:34:30.102 [main] DEBUG io.github.longfish801 - text call: 　記述内容をそのまま変換結果に反映したいときに使用します。
10:34:30.154 [main] DEBUG io.github.longfish801 - line call
10:34:30.210 [main] DEBUG io.github.longfish801 - text call: 　BLtxt記法上の特殊文字はエスケープします。
10:34:30.261 [main] DEBUG io.github.longfish801 - line call
10:34:30.316 [main] DEBUG io.github.longfish801 - text call: 　HTMLタグのエスケープをしません。
10:34:30.366 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:30.420 [main] DEBUG io.github.longfish801 - para call
10:34:30.472 [main] DEBUG io.github.longfish801 - line call
10:34:30.529 [main] DEBUG io.github.longfish801 - text call: 【－生データ】
10:34:30.580 [main] DEBUG io.github.longfish801 - line call
10:34:30.650 [main] DEBUG io.github.longfish801 - text call: 墨付きカッコが【強調：そのまま】表示されます。
10:34:30.701 [main] DEBUG io.github.longfish801 - line call
10:34:30.759 [main] DEBUG io.github.longfish801 - text call: <strong>HTMLタグのエスケープもしません。</strong>
10:34:30.812 [main] DEBUG io.github.longfish801 - line call
10:34:30.868 [main] DEBUG io.github.longfish801 - text call: 【生データ－】
10:34:30.918 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:30.971 [main] DEBUG io.github.longfish801 - para call
10:34:31.024 [main] DEBUG io.github.longfish801 - line call
10:34:31.081 [main] DEBUG io.github.longfish801 - text call: 墨付きカッコが【重要：そのまま】表示されます。
10:34:31.134 [main] DEBUG io.github.longfish801 - line call
10:34:31.207 [main] DEBUG io.github.longfish801 - text call: &lt;strong&gt;HTMLタグのエスケープもしません。&lt;/strong&gt;
10:34:31.264 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:31.318 [main] DEBUG io.github.longfish801 - para call
10:34:31.370 [main] DEBUG io.github.longfish801 - line call
10:34:31.428 [main] DEBUG io.github.longfish801 - text call: インライン要素
10:34:31.485 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:31.538 [main] DEBUG io.github.longfish801 - para call
10:34:31.590 [main] DEBUG io.github.longfish801 - line call
10:34:31.647 [main] DEBUG io.github.longfish801 - text call: リンク
10:34:31.700 [main] DEBUG io.github.longfish801 - para call
10:34:31.751 [main] DEBUG io.github.longfish801 - line call
10:34:31.839 [main] DEBUG io.github.longfish801 - text call: 　aタグを生成します。
10:34:31.891 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:31.945 [main] DEBUG io.github.longfish801 - para call
10:34:31.997 [main] DEBUG io.github.longfish801 - line call
10:34:32.055 [main] DEBUG io.github.longfish801 - text call: 　詳しくは【｜リンク：https://www.google.co.jp/】ネット検索【リンク｜】してください。
10:34:32.104 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:32.157 [main] DEBUG io.github.longfish801 - para call
10:34:32.208 [main] DEBUG io.github.longfish801 - line call
10:34:32.264 [main] DEBUG io.github.longfish801 - text call: 　詳しくは<a href="https://www.google.co.jp/">ネット検索</a>してください。
10:34:32.321 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:32.374 [main] DEBUG io.github.longfish801 - para call
10:34:32.438 [main] DEBUG io.github.longfish801 - line call
10:34:32.494 [main] DEBUG io.github.longfish801 - text call: 強調
10:34:32.545 [main] DEBUG io.github.longfish801 - para call
10:34:32.596 [main] DEBUG io.github.longfish801 - line call
10:34:32.651 [main] DEBUG io.github.longfish801 - text call: 　emタグを生成します。
10:34:32.700 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:32.753 [main] DEBUG io.github.longfish801 - para call
10:34:32.804 [main] DEBUG io.github.longfish801 - line call
10:34:32.860 [main] DEBUG io.github.longfish801 - text call: 　必ず最後に【｜強調】確認ボタン【強調｜】をクリックしてください。
10:34:32.911 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:32.964 [main] DEBUG io.github.longfish801 - para call
10:34:33.030 [main] DEBUG io.github.longfish801 - line call
10:34:33.088 [main] DEBUG io.github.longfish801 - text call: 　必ず最後に<em>確認ボタン</em>をクリックしてください。
10:34:33.145 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:33.198 [main] DEBUG io.github.longfish801 - para call
10:34:33.249 [main] DEBUG io.github.longfish801 - line call
10:34:33.305 [main] DEBUG io.github.longfish801 - text call: 最強調
10:34:33.356 [main] DEBUG io.github.longfish801 - para call
10:34:33.407 [main] DEBUG io.github.longfish801 - line call
10:34:33.462 [main] DEBUG io.github.longfish801 - text call: 　strongタグを生成します。
10:34:33.513 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:33.566 [main] DEBUG io.github.longfish801 - para call
10:34:33.631 [main] DEBUG io.github.longfish801 - line call
10:34:33.688 [main] DEBUG io.github.longfish801 - text call: 　間違えて【｜最強調】自爆スイッチ【最強調｜】を押さないでください。
10:34:33.739 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:33.793 [main] DEBUG io.github.longfish801 - para call
10:34:33.843 [main] DEBUG io.github.longfish801 - line call
10:34:33.900 [main] DEBUG io.github.longfish801 - text call: 　間違えて<strong>自爆スイッチ</strong>を押さないでください。
10:34:33.958 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:34.011 [main] DEBUG io.github.longfish801 - para call
10:34:34.064 [main] DEBUG io.github.longfish801 - line call
10:34:34.121 [main] DEBUG io.github.longfish801 - text call: 傍点
10:34:34.184 [main] DEBUG io.github.longfish801 - para call
10:34:34.236 [main] DEBUG io.github.longfish801 - line call
10:34:34.291 [main] DEBUG io.github.longfish801 - text call: 　spanタグ（class属性値は"dot"）を生成します。
10:34:34.342 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:34.398 [main] DEBUG io.github.longfish801 - para call
10:34:34.449 [main] DEBUG io.github.longfish801 - line call
10:34:34.506 [main] DEBUG io.github.longfish801 - text call: 　ここが【｜傍点】重要【傍点｜】です。
10:34:34.556 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:34.611 [main] DEBUG io.github.longfish801 - para call
10:34:34.662 [main] DEBUG io.github.longfish801 - line call
10:34:34.719 [main] DEBUG io.github.longfish801 - text call: 　ここが<span class="dot">重要</span>です。
10:34:34.789 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:34.843 [main] DEBUG io.github.longfish801 - para call
10:34:34.895 [main] DEBUG io.github.longfish801 - line call
10:34:34.953 [main] DEBUG io.github.longfish801 - text call: ぼかし
10:34:35.004 [main] DEBUG io.github.longfish801 - para call
10:34:35.055 [main] DEBUG io.github.longfish801 - line call
10:34:35.110 [main] DEBUG io.github.longfish801 - text call: 　spanタグ（class属性値は"small"）を生成します。
10:34:35.159 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:35.214 [main] DEBUG io.github.longfish801 - para call
10:34:35.266 [main] DEBUG io.github.longfish801 - line call
10:34:35.324 [main] DEBUG io.github.longfish801 - text call: 　もちろん本当【｜ぼかし】かもしれない【ぼかし｜】ですよ。
10:34:35.388 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:35.442 [main] DEBUG io.github.longfish801 - para call
10:34:35.493 [main] DEBUG io.github.longfish801 - line call
10:34:35.550 [main] DEBUG io.github.longfish801 - text call: 　もちろん本当<span class="small">かもしれない</span>ですよ。
10:34:35.607 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:35.664 [main] DEBUG io.github.longfish801 - para call
10:34:35.723 [main] DEBUG io.github.longfish801 - line call
10:34:35.784 [main] DEBUG io.github.longfish801 - text call: 訂正
10:34:35.838 [main] DEBUG io.github.longfish801 - para call
10:34:35.893 [main] DEBUG io.github.longfish801 - line call
10:34:35.950 [main] DEBUG io.github.longfish801 - text call: 　sタグを生成します。
10:34:36.014 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:36.071 [main] DEBUG io.github.longfish801 - para call
10:34:36.122 [main] DEBUG io.github.longfish801 - line call
10:34:36.178 [main] DEBUG io.github.longfish801 - text call: 　富士山の標高は【｜訂正】３７７７メートル【訂正｜】３７７６メートルです。
10:34:36.228 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:36.299 [main] DEBUG io.github.longfish801 - para call
10:34:36.350 [main] DEBUG io.github.longfish801 - line call
10:34:36.408 [main] DEBUG io.github.longfish801 - text call: 　富士山の標高は<s>３７７７メートル</s>３７７６メートルです。
10:34:36.464 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:36.519 [main] DEBUG io.github.longfish801 - para call
10:34:36.570 [main] DEBUG io.github.longfish801 - line call
10:34:36.642 [main] DEBUG io.github.longfish801 - text call: 縦中横
10:34:36.695 [main] DEBUG io.github.longfish801 - para call
10:34:36.748 [main] DEBUG io.github.longfish801 - line call
10:34:36.808 [main] DEBUG io.github.longfish801 - text call: 　縦中横には対応していないため、特に加工しません。
10:34:36.862 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:36.918 [main] DEBUG io.github.longfish801 - para call
10:34:36.971 [main] DEBUG io.github.longfish801 - line call
10:34:37.035 [main] DEBUG io.github.longfish801 - text call: 　シェイクスピア全集の第【｜縦中横】10【縦中横｜】巻に記述されています。
10:34:37.088 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:37.144 [main] DEBUG io.github.longfish801 - para call
10:34:37.199 [main] DEBUG io.github.longfish801 - line call
10:34:37.272 [main] DEBUG io.github.longfish801 - text call: 　シェイクスピア全集の第10巻に記述されています。
10:34:37.333 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:37.391 [main] DEBUG io.github.longfish801 - para call
10:34:37.447 [main] DEBUG io.github.longfish801 - line call
10:34:37.505 [main] DEBUG io.github.longfish801 - text call: 備考
10:34:37.554 [main] DEBUG io.github.longfish801 - para call
10:34:37.606 [main] DEBUG io.github.longfish801 - line call
10:34:37.661 [main] DEBUG io.github.longfish801 - text call: 　spanタグ（class属性値は"note"）を生成します。
10:34:37.713 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:37.767 [main] DEBUG io.github.longfish801 - para call
10:34:37.821 [main] DEBUG io.github.longfish801 - line call
10:34:37.908 [main] DEBUG io.github.longfish801 - text call: 　『乱れからくり』の作者は【｜備考：泡は特殊文字】泡坂妻夫【備考｜】です。
10:34:37.975 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:38.030 [main] DEBUG io.github.longfish801 - para call
10:34:38.081 [main] DEBUG io.github.longfish801 - line call
10:34:38.138 [main] DEBUG io.github.longfish801 - text call: 　『乱れからくり』の作者は泡坂妻夫<span class="note">[※泡は特殊文字]</span>です。
10:34:38.194 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:38.248 [main] DEBUG io.github.longfish801 - para call
10:34:38.300 [main] DEBUG io.github.longfish801 - line call
10:34:38.357 [main] DEBUG io.github.longfish801 - text call: ルビ
10:34:38.408 [main] DEBUG io.github.longfish801 - para call
10:34:38.475 [main] DEBUG io.github.longfish801 - line call
10:34:38.532 [main] DEBUG io.github.longfish801 - text call: 　rubyタグを生成します。
10:34:38.585 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:38.667 [main] DEBUG io.github.longfish801 - para call
10:34:38.721 [main] DEBUG io.github.longfish801 - line call
10:34:38.782 [main] DEBUG io.github.longfish801 - text call: 　【｜ルビ：すいとう】出納【ルビ｜】係は言った。
10:34:38.836 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:38.892 [main] DEBUG io.github.longfish801 - para call
10:34:38.949 [main] DEBUG io.github.longfish801 - line call
10:34:39.014 [main] DEBUG io.github.longfish801 - text call: 　<ruby>出納<rp>［</rp><rt>すいとう</rt><rp>］</rp></ruby>係は言った。
10:34:39.068 [main] DEBUG io.github.longfish801 - para call
10:34:39.135 [main] DEBUG io.github.longfish801 - line call
10:34:39.192 [main] DEBUG io.github.longfish801 - text call: 以上
10:34:39.306 [main] DEBUG io.github.longfish801 - para call
10:34:39.368 [main] DEBUG io.github.longfish801 - line call
10:34:39.429 [main] DEBUG io.github.longfish801 - text call: HTML変換
10:34:39.538 [main] DEBUG io.github.longfish801 - para call
10:34:39.593 [main] DEBUG io.github.longfish801 - line call
10:34:39.649 [main] DEBUG io.github.longfish801 - text call: 概要
10:34:39.703 [main] DEBUG io.github.longfish801 - para call
10:34:39.774 [main] DEBUG io.github.longfish801 - line call
10:34:39.847 [main] DEBUG io.github.longfish801 - text call: ブロック要素
10:34:39.901 [main] DEBUG io.github.longfish801 - para call
10:34:39.958 [main] DEBUG io.github.longfish801 - line call
10:34:40.016 [main] DEBUG io.github.longfish801 - text call: 改行と段落
10:34:40.068 [main] DEBUG io.github.longfish801 - para call
10:34:40.123 [main] DEBUG io.github.longfish801 - line call
10:34:40.181 [main] DEBUG io.github.longfish801 - text call: タイトル、サブタイトル、著者名
10:34:40.234 [main] DEBUG io.github.longfish801 - para call
10:34:40.288 [main] DEBUG io.github.longfish801 - line call
10:34:40.345 [main] DEBUG io.github.longfish801 - text call: 見出しと目次
10:34:40.415 [main] DEBUG io.github.longfish801 - para call
10:34:40.471 [main] DEBUG io.github.longfish801 - line call
10:34:40.529 [main] DEBUG io.github.longfish801 - text call: 小見出し
10:34:40.599 [main] DEBUG io.github.longfish801 - para call
10:34:40.659 [main] DEBUG io.github.longfish801 - line call
10:34:40.728 [main] DEBUG io.github.longfish801 - text call: 挿入図
10:34:40.785 [main] DEBUG io.github.longfish801 - para call
10:34:40.844 [main] DEBUG io.github.longfish801 - line call
10:34:40.903 [main] DEBUG io.github.longfish801 - text call: 註、註記
10:34:40.959 [main] DEBUG io.github.longfish801 - para call
10:34:41.016 [main] DEBUG io.github.longfish801 - line call
10:34:41.090 [main] DEBUG io.github.longfish801 - text call: 箇条書き
10:34:41.146 [main] DEBUG io.github.longfish801 - para call
10:34:41.200 [main] DEBUG io.github.longfish801 - line call
10:34:41.253 [main] DEBUG io.github.longfish801 - text call: 表
10:34:41.304 [main] DEBUG io.github.longfish801 - para call
10:34:41.357 [main] DEBUG io.github.longfish801 - line call
10:34:41.412 [main] DEBUG io.github.longfish801 - text call: コラム
10:34:41.462 [main] DEBUG io.github.longfish801 - para call
10:34:41.515 [main] DEBUG io.github.longfish801 - line call
10:34:41.569 [main] DEBUG io.github.longfish801 - text call: 注意
10:34:41.621 [main] DEBUG io.github.longfish801 - para call
10:34:41.687 [main] DEBUG io.github.longfish801 - line call
10:34:41.742 [main] DEBUG io.github.longfish801 - text call: 引用、引用元
10:34:41.793 [main] DEBUG io.github.longfish801 - para call
10:34:41.847 [main] DEBUG io.github.longfish801 - line call
10:34:41.901 [main] DEBUG io.github.longfish801 - text call: コード
10:34:41.951 [main] DEBUG io.github.longfish801 - para call
10:34:42.004 [main] DEBUG io.github.longfish801 - line call
10:34:42.059 [main] DEBUG io.github.longfish801 - text call: 整形済
10:34:42.111 [main] DEBUG io.github.longfish801 - para call
10:34:42.169 [main] DEBUG io.github.longfish801 - line call
10:34:42.225 [main] DEBUG io.github.longfish801 - text call: 生データ
10:34:42.305 [main] DEBUG io.github.longfish801 - para call
10:34:42.357 [main] DEBUG io.github.longfish801 - line call
10:34:42.412 [main] DEBUG io.github.longfish801 - text call: インライン要素
10:34:42.463 [main] DEBUG io.github.longfish801 - para call
10:34:42.514 [main] DEBUG io.github.longfish801 - line call
10:34:42.569 [main] DEBUG io.github.longfish801 - text call: リンク
10:34:42.620 [main] DEBUG io.github.longfish801 - para call
10:34:42.671 [main] DEBUG io.github.longfish801 - line call
10:34:42.726 [main] DEBUG io.github.longfish801 - text call: 強調
10:34:42.776 [main] DEBUG io.github.longfish801 - para call
10:34:42.827 [main] DEBUG io.github.longfish801 - line call
10:34:42.896 [main] DEBUG io.github.longfish801 - text call: 最強調
10:34:42.946 [main] DEBUG io.github.longfish801 - para call
10:34:42.997 [main] DEBUG io.github.longfish801 - line call
10:34:43.052 [main] DEBUG io.github.longfish801 - text call: 傍点
10:34:43.103 [main] DEBUG io.github.longfish801 - para call
10:34:43.153 [main] DEBUG io.github.longfish801 - line call
10:34:43.208 [main] DEBUG io.github.longfish801 - text call: ぼかし
10:34:43.259 [main] DEBUG io.github.longfish801 - para call
10:34:43.309 [main] DEBUG io.github.longfish801 - line call
10:34:43.365 [main] DEBUG io.github.longfish801 - text call: 訂正
10:34:43.415 [main] DEBUG io.github.longfish801 - para call
10:34:43.479 [main] DEBUG io.github.longfish801 - line call
10:34:43.535 [main] DEBUG io.github.longfish801 - text call: 縦中横
10:34:43.586 [main] DEBUG io.github.longfish801 - para call
10:34:43.642 [main] DEBUG io.github.longfish801 - line call
10:34:43.702 [main] DEBUG io.github.longfish801 - text call: 備考
10:34:43.753 [main] DEBUG io.github.longfish801 - para call
10:34:43.805 [main] DEBUG io.github.longfish801 - line call
10:34:43.861 [main] DEBUG io.github.longfish801 - text call: ルビ
10:34:43.919 [Thread-57] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行開始 key=washscr#BLtxt文書へ整形
10:34:44.015 [ForkJoinPool-25-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#箇条書き
10:34:44.015 [ForkJoinPool-25-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY reprex#各種置換
10:34:44.060 [ForkJoinPool-26-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY replace#エスケープ
10:34:44.089 [ForkJoinPool-27-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#表
10:34:44.111 [ForkJoinPool-28-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#コラムを整形
10:34:44.133 [ForkJoinPool-29-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#タグ付きコラムを整形
10:34:44.134 [ForkJoinPool-30-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY slice#空白行区切り
10:34:44.134 [ForkJoinPool-30-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#BLエスケープ
10:34:44.135 [ForkJoinPool-30-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#表
10:34:44.135 [ForkJoinPool-30-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#タグ付きコラム
10:34:44.135 [ForkJoinPool-30-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【＃タイトル】yakumo]
10:34:44.135 [ForkJoinPool-30-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#コラム
10:34:44.156 [ForkJoinPool-30-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■概要]
10:34:44.194 [ForkJoinPool-25-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＃タイトル】yakumo]
10:34:44.199 [ForkJoinPool-30-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　yakumoは、特定の書式に従うテキストを構造化、変換するためのライブラリです。, 　Markdownに似ていますが、書式や変換の仕方をカスタマイズすることができます。]
10:34:44.238 [ForkJoinPool-25-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】概要]
10:34:44.242 [ForkJoinPool-30-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■ドキュメント]
10:34:44.281 [ForkJoinPool-25-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　yakumoは、特定の書式に従うテキストを構造化、変換するためのライブラリです。, 　Markdownに似ていますが、書式や変換の仕方をカスタマイズすることができます。]
10:34:44.285 [ForkJoinPool-30-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [・【リンク：概要：yakumo.html】, ・【リンク：YmoScript：ymoscript.html】, ・【リンク：YmoDocument：ymodocument.html】, ・【リンク：BLtxt変換：convert_bltxt.html】, ・【リンク：HTML変換：convert_html.html】, ・【リンク：WashScr記法：washscr.html】, ・【リンク：Clmap記法：clmap.html】, ・【リンク：BLtxt記法：bltxt.html】, ・【リンク：TPAC記法：tpac.html】]
10:34:44.324 [ForkJoinPool-25-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】ドキュメント]
10:34:44.329 [ForkJoinPool-30-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■API仕様書]
10:34:44.374 [ForkJoinPool-30-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　API仕様書(Groovydoc)は以下を参照してください。]
10:34:44.421 [ForkJoinPool-25-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：順序なし】, 【－項目】, 【リンク：概要：yakumo.html】, 【項目－】, 【－項目】, 【リンク：YmoScript：ymoscript.html】, 【項目－】, 【－項目】, 【リンク：YmoDocument：ymodocument.html】, 【項目－】, 【－項目】, 【リンク：BLtxt変換：convert_bltxt.html】, 【項目－】, 【－項目】, 【リンク：HTML変換：convert_html.html】, 【項目－】, 【－項目】, 【リンク：WashScr記法：washscr.html】, 【項目－】, 【－項目】, 【リンク：Clmap記法：clmap.html】, 【項目－】, 【－項目】, 【リンク：BLtxt記法：bltxt.html】, 【項目－】, 【－項目】, 【リンク：TPAC記法：tpac.html】, 【項目－】, 【箇条書き－】]
10:34:44.424 [ForkJoinPool-25-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：順序なし】, 【－項目】, 【｜リンク：yakumo.html】概要【リンク｜】, 【項目－】, 【－項目】, 【｜リンク：ymoscript.html】YmoScript【リンク｜】, 【項目－】, 【－項目】, 【｜リンク：ymodocument.html】YmoDocument【リンク｜】, 【項目－】, 【－項目】, 【｜リンク：convert_bltxt.html】BLtxt変換【リンク｜】, 【項目－】, 【－項目】, 【｜リンク：convert_html.html】HTML変換【リンク｜】, 【項目－】, 【－項目】, 【｜リンク：washscr.html】WashScr記法【リンク｜】, 【項目－】, 【－項目】, 【｜リンク：clmap.html】Clmap記法【リンク｜】, 【項目－】, 【－項目】, 【｜リンク：bltxt.html】BLtxt記法【リンク｜】, 【項目－】, 【－項目】, 【｜リンク：tpac.html】TPAC記法【リンク｜】, 【項目－】, 【箇条書き－】]
10:34:44.440 [ForkJoinPool-30-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [・【リンク：Groovydoc：groovydoc/index.html】]
10:34:44.449 [ForkJoinPool-25-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】API仕様書]
10:34:44.469 [ForkJoinPool-30-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [以上]
10:34:44.504 [ForkJoinPool-25-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　API仕様書(Groovydoc)は以下を参照してください。]
10:34:44.524 [ForkJoinPool-30-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 slice#空白行区切り
10:34:44.587 [ForkJoinPool-25-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：順序なし】, 【－項目】, 【リンク：Groovydoc：groovydoc/index.html】, 【項目－】, 【箇条書き－】]
10:34:44.587 [ForkJoinPool-25-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：順序なし】, 【－項目】, 【｜リンク：groovydoc/index.html】Groovydoc【リンク｜】, 【項目－】, 【箇条書き－】]
10:34:44.613 [ForkJoinPool-25-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#箇条書き
10:34:44.613 [ForkJoinPool-25-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#箇条書き
10:34:44.613 [ForkJoinPool-25-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#箇条書き
10:34:44.613 [ForkJoinPool-25-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[以上]
10:34:44.613 [ForkJoinPool-25-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast reprex#各種置換
10:34:44.613 [ForkJoinPool-25-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate reprex#各種置換
10:34:44.613 [ForkJoinPool-25-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY reprex#各種置換
10:34:44.614 [ForkJoinPool-30-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY slice#空白行区切り
10:34:44.614 [ForkJoinPool-30-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#BLエスケープ
10:34:44.614 [ForkJoinPool-26-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast replace#エスケープ
10:34:44.615 [ForkJoinPool-26-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate replace#エスケープ
10:34:44.615 [ForkJoinPool-26-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY replace#エスケープ
10:34:44.615 [ForkJoinPool-30-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#BLエスケープ
10:34:44.616 [ForkJoinPool-30-worker-2] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#表
10:34:44.616 [ForkJoinPool-27-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#表
10:34:44.616 [ForkJoinPool-27-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#表
10:34:44.616 [ForkJoinPool-27-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#表
10:34:44.616 [ForkJoinPool-30-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#表
10:34:44.617 [ForkJoinPool-30-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#コラム
10:34:44.617 [ForkJoinPool-28-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#コラムを整形
10:34:44.617 [ForkJoinPool-28-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#コラムを整形
10:34:44.617 [ForkJoinPool-28-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#コラムを整形
10:34:44.617 [ForkJoinPool-30-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#コラム
10:34:44.617 [ForkJoinPool-30-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#タグ付きコラム
10:34:44.617 [ForkJoinPool-29-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#タグ付きコラムを整形
10:34:44.617 [ForkJoinPool-29-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#タグ付きコラムを整形
10:34:44.617 [ForkJoinPool-29-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#タグ付きコラムを整形
10:34:44.618 [ForkJoinPool-30-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#タグ付きコラム
10:34:44.618 [Thread-57] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行終了 key=washscr#BLtxt文書へ整形
10:34:44.628 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：meta タイトル
10:34:44.628 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.628 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:34:44.629 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.629 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.629 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:34:44.629 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.629 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:34:44.629 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:44.629 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.629 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:34:44.630 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:44.630 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.630 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:34:44.630 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:44.630 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.630 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:34:44.630 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:44.630 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.631 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:34:44.631 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:44.631 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.631 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:34:44.631 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:44.631 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.631 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:34:44.631 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:44.631 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.632 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:34:44.632 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:44.632 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.632 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:34:44.632 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:44.632 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.632 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:34:44.632 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:34:44.632 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.633 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.633 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:34:44.633 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:44.633 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.633 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:34:44.633 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:44.780 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:44.833 [main] DEBUG io.github.longfish801 - para call
10:34:44.885 [main] DEBUG io.github.longfish801 - line call
10:34:44.943 [main] DEBUG io.github.longfish801 - text call: 概要
10:34:44.994 [main] DEBUG io.github.longfish801 - para call
10:34:45.059 [main] DEBUG io.github.longfish801 - line call
10:34:45.113 [main] DEBUG io.github.longfish801 - text call: 　yakumoは、特定の書式に従うテキストを構造化、変換するためのライブラリです。
10:34:45.163 [main] DEBUG io.github.longfish801 - line call
10:34:45.217 [main] DEBUG io.github.longfish801 - text call: 　Markdownに似ていますが、書式や変換の仕方をカスタマイズすることができます。
10:34:45.273 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:45.326 [main] DEBUG io.github.longfish801 - para call
10:34:45.380 [main] DEBUG io.github.longfish801 - line call
10:34:45.438 [main] DEBUG io.github.longfish801 - text call: ドキュメント
10:34:45.495 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:34:45.549 [main] DEBUG io.github.longfish801 - block call: block#項目
10:34:45.605 [main] DEBUG io.github.longfish801 - para call
10:34:45.675 [main] DEBUG io.github.longfish801 - line call
10:34:45.733 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:34:45.794 [main] DEBUG io.github.longfish801 - text call: 概要
10:34:45.845 [main] DEBUG io.github.longfish801 - block call: block#項目
10:34:45.898 [main] DEBUG io.github.longfish801 - para call
10:34:45.950 [main] DEBUG io.github.longfish801 - line call
10:34:46.006 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:34:46.066 [main] DEBUG io.github.longfish801 - text call: YmoScript
10:34:46.118 [main] DEBUG io.github.longfish801 - block call: block#項目
10:34:46.171 [main] DEBUG io.github.longfish801 - para call
10:34:46.238 [main] DEBUG io.github.longfish801 - line call
10:34:46.294 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:34:46.355 [main] DEBUG io.github.longfish801 - text call: YmoDocument
10:34:46.405 [main] DEBUG io.github.longfish801 - block call: block#項目
10:34:46.458 [main] DEBUG io.github.longfish801 - para call
10:34:46.511 [main] DEBUG io.github.longfish801 - line call
10:34:46.566 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:34:46.627 [main] DEBUG io.github.longfish801 - text call: BLtxt変換
10:34:46.689 [main] DEBUG io.github.longfish801 - block call: block#項目
10:34:46.742 [main] DEBUG io.github.longfish801 - para call
10:34:46.795 [main] DEBUG io.github.longfish801 - line call
10:34:46.867 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:34:46.929 [main] DEBUG io.github.longfish801 - text call: HTML変換
10:34:46.981 [main] DEBUG io.github.longfish801 - block call: block#項目
10:34:47.035 [main] DEBUG io.github.longfish801 - para call
10:34:47.088 [main] DEBUG io.github.longfish801 - line call
10:34:47.144 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:34:47.205 [main] DEBUG io.github.longfish801 - text call: WashScr記法
10:34:47.256 [main] DEBUG io.github.longfish801 - block call: block#項目
10:34:47.310 [main] DEBUG io.github.longfish801 - para call
10:34:47.363 [main] DEBUG io.github.longfish801 - line call
10:34:47.433 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:34:47.494 [main] DEBUG io.github.longfish801 - text call: Clmap記法
10:34:47.545 [main] DEBUG io.github.longfish801 - block call: block#項目
10:34:47.598 [main] DEBUG io.github.longfish801 - para call
10:34:47.651 [main] DEBUG io.github.longfish801 - line call
10:34:47.707 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:34:47.766 [main] DEBUG io.github.longfish801 - text call: BLtxt記法
10:34:47.817 [main] DEBUG io.github.longfish801 - block call: block#項目
10:34:47.872 [main] DEBUG io.github.longfish801 - para call
10:34:47.924 [main] DEBUG io.github.longfish801 - line call
10:34:47.980 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:34:48.055 [main] DEBUG io.github.longfish801 - text call: TPAC記法
10:34:48.112 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:48.165 [main] DEBUG io.github.longfish801 - para call
10:34:48.216 [main] DEBUG io.github.longfish801 - line call
10:34:48.272 [main] DEBUG io.github.longfish801 - text call: API仕様書
10:34:48.321 [main] DEBUG io.github.longfish801 - para call
10:34:48.371 [main] DEBUG io.github.longfish801 - line call
10:34:48.425 [main] DEBUG io.github.longfish801 - text call: 　API仕様書(Groovydoc)は以下を参照してください。
10:34:48.477 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:34:48.529 [main] DEBUG io.github.longfish801 - block call: block#項目
10:34:48.596 [main] DEBUG io.github.longfish801 - para call
10:34:48.651 [main] DEBUG io.github.longfish801 - line call
10:34:48.707 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:34:48.767 [main] DEBUG io.github.longfish801 - text call: Groovydoc
10:34:48.817 [main] DEBUG io.github.longfish801 - para call
10:34:48.868 [main] DEBUG io.github.longfish801 - line call
10:34:48.922 [main] DEBUG io.github.longfish801 - text call: 以上
10:34:49.022 [main] DEBUG io.github.longfish801 - para call
10:34:49.075 [main] DEBUG io.github.longfish801 - line call
10:34:49.131 [main] DEBUG io.github.longfish801 - text call: yakumo
10:34:49.252 [main] DEBUG io.github.longfish801 - para call
10:34:49.312 [main] DEBUG io.github.longfish801 - line call
10:34:49.368 [main] DEBUG io.github.longfish801 - text call: 概要
10:34:49.419 [main] DEBUG io.github.longfish801 - para call
10:34:49.472 [main] DEBUG io.github.longfish801 - line call
10:34:49.527 [main] DEBUG io.github.longfish801 - text call: ドキュメント
10:34:49.578 [main] DEBUG io.github.longfish801 - para call
10:34:49.633 [main] DEBUG io.github.longfish801 - line call
10:34:49.689 [main] DEBUG io.github.longfish801 - text call: API仕様書
10:34:49.748 [Thread-71] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行開始 key=washscr#BLtxt文書へ整形
10:34:49.863 [ForkJoinPool-31-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#箇条書き
10:34:49.863 [ForkJoinPool-31-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY reprex#各種置換
10:34:49.906 [ForkJoinPool-32-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY replace#エスケープ
10:34:49.935 [ForkJoinPool-33-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#表
10:34:49.958 [ForkJoinPool-34-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#コラムを整形
10:34:49.983 [ForkJoinPool-35-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#タグ付きコラムを整形
10:34:49.983 [ForkJoinPool-36-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY slice#空白行区切り
10:34:49.984 [ForkJoinPool-36-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#BLエスケープ
10:34:49.985 [ForkJoinPool-36-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#表
10:34:49.985 [ForkJoinPool-36-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#タグ付きコラム
10:34:49.985 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【＃タイトル】TPAC記法]
10:34:49.985 [ForkJoinPool-36-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#コラム
10:34:50.006 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■概要]
10:34:50.044 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＃タイトル】TPAC記法]
10:34:50.049 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　TPAC記法は、改行を含む長めの文章や、親子関係を簡単に記述するための記法です。, 　名称は、長めの文章(Text)と親子関係(Parent And Child)に由来しています。]
10:34:50.085 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　以下のとおり、既存の記法では難しいことから独自に作成した記法です。]
10:34:50.106 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】概要]
10:34:50.125 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [・XMLは、長いテキストや階層的なデータ構造を実現できますが、表現が冗長です。, ・JSONや YAMLは、階層的なデータ構造を実現できますが、長いテキストの記述には向いていません。, ・Groovy DSLは、文法的な誤りを含む Closureを記述できません。]
10:34:50.146 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　TPAC記法は、改行を含む長めの文章や、親子関係を簡単に記述するための記法です。, 　名称は、長めの文章(Text)と親子関係(Parent And Child)に由来しています。]
10:34:50.167 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■サンプル]
10:34:50.188 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　以下のとおり、既存の記法では難しいことから独自に作成した記法です。]
10:34:50.207 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　以下にTPAC文書のサンプルを示します。, 　ファイル【リンク：tpacSample/sample.tpac】として保存したとします。]
10:34:50.232 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----------, #! dec ルート, ## parent1 親名１]
10:34:50.324 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [## parent2 親名２, #-attr1 属性値１, #-attr2]
10:34:50.330 [ForkJoinPool-31-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：順序なし】, 【－項目】, XMLは、長いテキストや階層的なデータ構造を実現できますが、表現が冗長です。, 【項目－】, 【－項目】, JSONや YAMLは、階層的なデータ構造を実現できますが、長いテキストの記述には向いていません。, 【項目－】, 【－項目】, Groovy DSLは、文法的な誤りを含む Closureを記述できません。, 【項目－】, 【箇条書き－】]
10:34:50.333 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：順序なし】, 【－項目】, XMLは、長いテキストや階層的なデータ構造を実現できますが、表現が冗長です。, 【項目－】, 【－項目】, JSONや YAMLは、階層的なデータ構造を実現できますが、長いテキストの記述には向いていません。, 【項目－】, 【－項目】, Groovy DSLは、文法的な誤りを含む Closureを記述できません。, 【項目－】, 【箇条書き－】]
10:34:50.355 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [サンプルテキストあ, サンプルテキストい, サンプルテキストう]
10:34:50.388 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】サンプル]
10:34:50.396 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [# child1 子名１, サンプルテキストか, サンプルテキストき, サンプルテキストく]
10:34:50.429 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　以下にTPAC文書のサンプルを示します。, 　ファイル【｜リンク：tpacSample/sample.tpac】tpacSample/sample.tpac【リンク｜】として保存したとします。]
10:34:50.436 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [# child2 子名２, #-attr3 属性値３, ----------]
10:34:50.470 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----------, #! dec ルート, ## parent1 親名１]
10:34:50.477 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　上記の TPAC文書を、以下の XMLに変換できます。, 　ファイル【リンク：tpacSample/sample.xml】として保存したとします。]
10:34:50.510 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[## parent2 親名２, #-attr1 属性値１, #-attr2]
10:34:50.517 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----------, <?xml version="1.0" encoding="UTF-8"?>, <dec name="ルート">,   <parent1 name="親名１">, </parent1>,   <parent2 name="親名２" attr1="属性値１" attr2="">, サンプルテキストあ, サンプルテキストい, サンプルテキストう]
10:34:50.550 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[サンプルテキストあ, サンプルテキストい, サンプルテキストう]
10:34:50.557 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [    <child1 name="子名１">サンプルテキストか, サンプルテキストき, サンプルテキストく]
10:34:50.579 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[# child1 子名１, サンプルテキストか, サンプルテキストき, サンプルテキストく]
10:34:50.598 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [</child1>,     <child2 name="子名２" attr3="属性値３" />,   </parent2>, </dec>, ----------]
10:34:50.619 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[# child2 子名２, #-attr3 属性値３, ----------]
10:34:50.638 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　クラス【リンク：Tpac：/tpac/groovydoc/io/github/longfish801/yakumo/tpac/Tpac.html】を利用して、XMLへの変換などができます。]
10:34:50.659 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　上記の TPAC文書を、以下の XMLに変換できます。, 　ファイル【｜リンク：tpacSample/sample.xml】tpacSample/sample.xml【リンク｜】として保存したとします。]
10:34:50.679 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　以下をファイル【リンク：tpacSample/sample.groovy】として保存したとします。, 　groovyコマンドで実行すると、assertに成功します。]
10:34:50.700 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----------, <?xml version="1.0" encoding="UTF-8"?>, <dec name="ルート">,   <parent1 name="親名１">, </parent1>,   <parent2 name="親名２" attr1="属性値１" attr2="">, サンプルテキストあ, サンプルテキストい, サンプルテキストう]
10:34:50.719 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----------, @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/'), @Grab('io.github.longfish801:yakumo:0.1.00'), @GrabExclude('org.codehaus.groovy:groovy-all')]
10:34:50.741 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[    <child1 name="子名１">サンプルテキストか, サンプルテキストき, サンプルテキストく]
10:34:50.761 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [import io.github.longfish801.yakumo.tpac.Tpac;, import io.github.longfish801.yakumo.parser.ParseException;]
10:34:50.784 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[</child1>,     <child2 name="子名２" attr3="属性値３" />,   </parent2>, </dec>, ----------]
10:34:50.803 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [Tpac tpac = null;, try {, 	tpac = new Tpac(new File('sample.tpac'));, 	assert tpac.toXml() == new File('sample.xml').getText('UTF-8');, } catch (ParseException exc){, 	println "文法誤りがあるため TPAC文書を解析できません。exc=${exc}";, }, ----------]
10:34:50.823 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　クラス【｜リンク：/tpac/groovydoc/io/github/longfish801/yakumo/tpac/Tpac.html】Tpac【リンク｜】を利用して、XMLへの変換などができます。]
10:34:50.843 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■全般]
10:34:50.881 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　以下をファイル【｜リンク：tpacSample/sample.groovy】tpacSample/sample.groovy【リンク｜】として保存したとします。, 　groovyコマンドで実行すると、assertに成功します。]
10:34:50.912 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　必ず終端に改行コードが必要です。, 　ファイルに記述する場合、文字コードは UTF-8を使用してください。]
10:34:50.921 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----------, @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/'), @Grab('io.github.longfish801:yakumo:0.1.00'), @GrabExclude('org.codehaus.groovy:groovy-all')]
10:34:50.941 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　タグ名、名前、属性名に改行コード、半角スペース、半角シャープは使用できません。, 　属性値に改行コードは使用できません。, 　タグ名、属性名は空文字を許容しません。名前、属性値は空文字を許容します。]
10:34:50.962 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[import io.github.longfish801.yakumo.tpac.Tpac;, import io.github.longfish801.yakumo.parser.ParseException;]
10:34:50.981 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■使用できる文字]
10:34:51.007 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[Tpac tpac = null;, try {, 	tpac = new Tpac(new File('sample.tpac'));, 	assert tpac.toXml() == new File('sample.xml').getText('UTF-8');, } catch (ParseException exc){, 	println "文法誤りがあるため TPAC文書を解析できません。exc=${exc}";, }, ----------]
10:34:51.029 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　タグ名は必須です。, 　改行コード、半角スペース、半角シャープを使用できません。]
10:34:51.050 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】全般]
10:34:51.081 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　名前は省略可の場合があります。, 　改行コード、半角スペース、半角シャープを使用できません。]
10:34:51.091 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　必ず終端に改行コードが必要です。, 　ファイルに記述する場合、文字コードは UTF-8を使用してください。]
10:34:51.110 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　属性名は必須です。, 　改行コード、半角スペース、半角シャープを使用できません。]
10:34:51.131 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　タグ名、名前、属性名に改行コード、半角スペース、半角シャープは使用できません。, 　属性値に改行コードは使用できません。, 　タグ名、属性名は空文字を許容しません。名前、属性値は空文字を許容します。]
10:34:51.151 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　属性値は省略可です。, 　改行コードを使用できません。]
10:34:51.172 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】使用できる文字]
10:34:51.191 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　テキストは省略可です。, 　すべての文字を使用できます。複数行記述することもできます。, 　先頭を半角シャープ（#）以外の文字で始める必要があります。]
10:34:51.213 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　タグ名は必須です。, 　改行コード、半角スペース、半角シャープを使用できません。]
10:34:51.233 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■宣言]
10:34:51.255 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　名前は省略可の場合があります。, 　改行コード、半角スペース、半角シャープを使用できません。]
10:34:51.276 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　先頭行に宣言をひとつだけ持ちます。, 　半角シャープ＋半角エクスクラメーションマーク（#!）を行の先頭に付加します。, 　タグ名と名前を半角スペース区切りで記述します。, 　タグ名の前にも半角スペースが必要です。, 　タグ名は必須、名前は省略可です。]
10:34:51.299 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　属性名は必須です。, 　改行コード、半角スペース、半角シャープを使用できません。]
10:34:51.329 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■親子要素]
10:34:51.338 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　属性値は省略可です。, 　改行コードを使用できません。]
10:34:51.358 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　親要素、子要素を複数指定できます。]
10:34:51.380 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　テキストは省略可です。, 　すべての文字を使用できます。複数行記述することもできます。, 　先頭を半角シャープ（#）以外の文字で始める必要があります。]
10:34:51.399 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [・親要素は半角シャープふたつ（##）を行の先頭に付加します。, ・子要素は半角シャープ（#）を行の先頭に付加します。]
10:34:51.420 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】宣言]
10:34:51.463 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　子要素を定義するときは、その親要素が必要です。, 　親要素の後に記述した子要素は、その親要素に属するとみなします。]
10:34:51.478 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　先頭行に宣言をひとつだけ持ちます。, 　半角シャープ＋半角エクスクラメーションマーク（#!）を行の先頭に付加します。, 　タグ名と名前を半角スペース区切りで記述します。, 　タグ名の前にも半角スペースが必要です。, 　タグ名は必須、名前は省略可です。]
10:34:51.509 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　親子要素にはタグ名と名前を半角スペース区切りで記述します。, 　タグ名の前にも半角スペースが必要です。]
10:34:51.519 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】親子要素]
10:34:51.549 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [・タグ名は必須、重複可です。, ・名前は、ひとつのみ省略できます。, 　ひとつのみとは、親要素でひとつのみか、同じ親に属する子にひとつのみです。, ・親同士でタグと名前の組合せの重複は不可です。, ・同じ親に属する子同士で、タグと名前の組合せの重複は不可です。]
10:34:51.558 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　親要素、子要素を複数指定できます。]
10:34:51.589 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■属性]
10:34:51.615 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　宣言要素、親子要素には属性を複数持たせることができます。, 　各要素の後続行に、先頭が半角シャープ＋半角ハイフン（#-）で始まる行を記述します。, 　各要素と属性の間、属性の行同士の間に空行は含めないでください。]
10:34:51.661 [ForkJoinPool-31-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：順序なし】, 【－項目】, 親要素は半角シャープふたつ（##）を行の先頭に付加します。, 【項目－】, 【－項目】, 子要素は半角シャープ（#）を行の先頭に付加します。, 【項目－】, 【箇条書き－】]
10:34:51.661 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：順序なし】, 【－項目】, 親要素は半角シャープふたつ（##）を行の先頭に付加します。, 【項目－】, 【－項目】, 子要素は半角シャープ（#）を行の先頭に付加します。, 【項目－】, 【箇条書き－】]
10:34:51.667 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　属性名と属性値を半角スペース区切りで記述します。, 　属性名の前に半角スペースは不要です。]
10:34:51.689 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　子要素を定義するときは、その親要素が必要です。, 　親要素の後に記述した子要素は、その親要素に属するとみなします。]
10:34:51.708 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　属性名は必須です。同じ親あるいは子に属する属性名は重複不可です。, 　属性値は省略可です。]
10:34:51.729 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　親子要素にはタグ名と名前を半角スペース区切りで記述します。, 　タグ名の前にも半角スペースが必要です。]
10:34:51.748 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■テキスト]
10:34:51.787 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　宣言要素、親子要素はテキストを最低ひとつ持たせることができます。, 　テキストの各行は、先頭を半角シャープ（#）以外の文字で始める必要があります。]
10:34:51.836 [ForkJoinPool-31-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：順序なし】, 【－項目】, タグ名は必須、重複可です。, 【項目－】, 【－項目】, 名前は、ひとつのみ省略できます。, ひとつのみとは、親要素でひとつのみか、同じ親に属する子にひとつのみです。, 【項目－】, 【－項目】, 親同士でタグと名前の組合せの重複は不可です。, 【項目－】, 【－項目】, 同じ親に属する子同士で、タグと名前の組合せの重複は不可です。, 【項目－】, 【箇条書き－】]
10:34:51.837 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：順序なし】, 【－項目】, タグ名は必須、重複可です。, 【項目－】, 【－項目】, 名前は、ひとつのみ省略できます。, ひとつのみとは、親要素でひとつのみか、同じ親に属する子にひとつのみです。, 【項目－】, 【－項目】, 親同士でタグと名前の組合せの重複は不可です。, 【項目－】, 【－項目】, 同じ親に属する子同士で、タグと名前の組合せの重複は不可です。, 【項目－】, 【箇条書き－】]
10:34:51.841 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　テキストは省略可です。]
10:34:51.865 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】属性]
10:34:51.885 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [以上]
10:34:51.918 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　宣言要素、親子要素には属性を複数持たせることができます。, 　各要素の後続行に、先頭が半角シャープ＋半角ハイフン（#-）で始まる行を記述します。, 　各要素と属性の間、属性の行同士の間に空行は含めないでください。]
10:34:51.926 [ForkJoinPool-36-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 slice#空白行区切り
10:34:51.945 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　属性名と属性値を半角スペース区切りで記述します。, 　属性名の前に半角スペースは不要です。]
10:34:51.970 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　属性名は必須です。同じ親あるいは子に属する属性名は重複不可です。, 　属性値は省略可です。]
10:34:51.994 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】テキスト]
10:34:52.039 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　宣言要素、親子要素はテキストを最低ひとつ持たせることができます。, 　テキストの各行は、先頭を半角シャープ（#）以外の文字で始める必要があります。]
10:34:52.064 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　テキストは省略可です。]
10:34:52.089 [ForkJoinPool-31-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#箇条書き
10:34:52.089 [ForkJoinPool-31-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#箇条書き
10:34:52.089 [ForkJoinPool-31-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#箇条書き
10:34:52.090 [ForkJoinPool-31-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[以上]
10:34:52.090 [ForkJoinPool-31-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast reprex#各種置換
10:34:52.090 [ForkJoinPool-31-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate reprex#各種置換
10:34:52.090 [ForkJoinPool-31-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY reprex#各種置換
10:34:52.090 [ForkJoinPool-36-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY slice#空白行区切り
10:34:52.090 [ForkJoinPool-36-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#BLエスケープ
10:34:52.091 [ForkJoinPool-32-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast replace#エスケープ
10:34:52.091 [ForkJoinPool-32-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate replace#エスケープ
10:34:52.091 [ForkJoinPool-32-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY replace#エスケープ
10:34:52.092 [ForkJoinPool-36-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#BLエスケープ
10:34:52.092 [ForkJoinPool-36-worker-2] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#表
10:34:52.092 [ForkJoinPool-33-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#表
10:34:52.092 [ForkJoinPool-33-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#表
10:34:52.092 [ForkJoinPool-33-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#表
10:34:52.093 [ForkJoinPool-36-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#表
10:34:52.093 [ForkJoinPool-36-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [#! dec ルート, ## parent1 親名１, , ## parent2 親名２, #-attr1 属性値１, #-attr2, , サンプルテキストあ, サンプルテキストい, サンプルテキストう, , # child1 子名１, サンプルテキストか, サンプルテキストき, サンプルテキストく, , # child2 子名２, #-attr3 属性値３]
10:34:52.093 [ForkJoinPool-36-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [<?xml version="1.0" encoding="UTF-8"?>, <dec name="ルート">,   <parent1 name="親名１">, </parent1>,   <parent2 name="親名２" attr1="属性値１" attr2="">, サンプルテキストあ, サンプルテキストい, サンプルテキストう, , ,     <child1 name="子名１">サンプルテキストか, サンプルテキストき, サンプルテキストく, , </child1>,     <child2 name="子名２" attr3="属性値３" />,   </parent2>, </dec>]
10:34:52.094 [ForkJoinPool-36-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [@GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/'), @Grab('io.github.longfish801:yakumo:0.1.00'), @GrabExclude('org.codehaus.groovy:groovy-all'), , import io.github.longfish801.yakumo.tpac.Tpac;, import io.github.longfish801.yakumo.parser.ParseException;, , Tpac tpac = null;, try {, 	tpac = new Tpac(new File('sample.tpac'));, 	assert tpac.toXml() == new File('sample.xml').getText('UTF-8');, } catch (ParseException exc){, 	println "文法誤りがあるため TPAC文書を解析できません。exc=${exc}";, }]
10:34:52.094 [ForkJoinPool-36-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#コラム
10:34:52.114 [ForkJoinPool-34-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, #! dec ルート, ## parent1 親名１, , ## parent2 親名２, #-attr1 属性値１, #-attr2, , サンプルテキストあ, サンプルテキストい, サンプルテキストう, , # child1 子名１, サンプルテキストか, サンプルテキストき, サンプルテキストく, , # child2 子名２, #-attr3 属性値３, 【コラム－】]
10:34:52.134 [ForkJoinPool-34-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, <?xml version="1.0" encoding="UTF-8"?>, <dec name="ルート">,   <parent1 name="親名１">, </parent1>,   <parent2 name="親名２" attr1="属性値１" attr2="">, サンプルテキストあ, サンプルテキストい, サンプルテキストう, , ,     <child1 name="子名１">サンプルテキストか, サンプルテキストき, サンプルテキストく, , </child1>,     <child2 name="子名２" attr3="属性値３" />,   </parent2>, </dec>, 【コラム－】]
10:34:52.154 [ForkJoinPool-34-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/'), @Grab('io.github.longfish801:yakumo:0.1.00'), @GrabExclude('org.codehaus.groovy:groovy-all'), , import io.github.longfish801.yakumo.tpac.Tpac;, import io.github.longfish801.yakumo.parser.ParseException;, , Tpac tpac = null;, try {, 	tpac = new Tpac(new File('sample.tpac'));, 	assert tpac.toXml() == new File('sample.xml').getText('UTF-8');, } catch (ParseException exc){, 	println "文法誤りがあるため TPAC文書を解析できません。exc=${exc}";, }, 【コラム－】]
10:34:52.154 [ForkJoinPool-34-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#コラムを整形
10:34:52.154 [ForkJoinPool-34-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#コラムを整形
10:34:52.154 [ForkJoinPool-34-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#コラムを整形
10:34:52.155 [ForkJoinPool-36-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#コラム
10:34:52.156 [ForkJoinPool-36-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#タグ付きコラム
10:34:52.156 [ForkJoinPool-35-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#タグ付きコラムを整形
10:34:52.156 [ForkJoinPool-35-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#タグ付きコラムを整形
10:34:52.156 [ForkJoinPool-35-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#タグ付きコラムを整形
10:34:52.157 [ForkJoinPool-36-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#タグ付きコラム
10:34:52.185 [Thread-71] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行終了 key=washscr#BLtxt文書へ整形
10:34:52.185 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：meta タイトル
10:34:52.185 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.185 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:34:52.186 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.186 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.186 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.186 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:34:52.186 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:52.186 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.186 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:52.187 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.187 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:52.187 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.187 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:34:52.187 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.187 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.187 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:34:52.188 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:34:52.188 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.188 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.189 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.189 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.189 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.190 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.190 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:34:52.190 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:34:52.190 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.191 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.191 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.192 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.192 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:34:52.192 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.192 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:34:52.193 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:34:52.193 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.193 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.193 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.194 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:34:52.194 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.194 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.195 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.195 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:34:52.195 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.195 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.196 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.196 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.196 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.196 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.197 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:34:52.197 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.197 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.198 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:34:52.198 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.198 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.198 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:34:52.198 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:52.198 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.198 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:52.198 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.199 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.199 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.199 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:34:52.199 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:52.199 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.199 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:52.200 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.200 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:52.200 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.200 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:34:52.200 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.200 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:34:52.200 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.201 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.201 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.201 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.201 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:34:52.201 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.202 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.202 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.202 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:34:52.353 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:52.407 [main] DEBUG io.github.longfish801 - para call
10:34:52.458 [main] DEBUG io.github.longfish801 - line call
10:34:52.514 [main] DEBUG io.github.longfish801 - text call: 概要
10:34:52.563 [main] DEBUG io.github.longfish801 - para call
10:34:52.631 [main] DEBUG io.github.longfish801 - line call
10:34:52.685 [main] DEBUG io.github.longfish801 - text call: 　TPAC記法は、改行を含む長めの文章や、親子関係を簡単に記述するための記法です。
10:34:52.735 [main] DEBUG io.github.longfish801 - line call
10:34:52.790 [main] DEBUG io.github.longfish801 - text call: 　名称は、長めの文章(Text)と親子関係(Parent And Child)に由来しています。
10:34:52.840 [main] DEBUG io.github.longfish801 - para call
10:34:52.890 [main] DEBUG io.github.longfish801 - line call
10:34:52.943 [main] DEBUG io.github.longfish801 - text call: 　以下のとおり、既存の記法では難しいことから独自に作成した記法です。
10:34:52.994 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:34:53.045 [main] DEBUG io.github.longfish801 - block call: block#項目
10:34:53.099 [main] DEBUG io.github.longfish801 - para call
10:34:53.153 [main] DEBUG io.github.longfish801 - line call
10:34:53.232 [main] DEBUG io.github.longfish801 - text call: XMLは、長いテキストや階層的なデータ構造を実現できますが、表現が冗長です。
10:34:53.288 [main] DEBUG io.github.longfish801 - block call: block#項目
10:34:53.342 [main] DEBUG io.github.longfish801 - para call
10:34:53.394 [main] DEBUG io.github.longfish801 - line call
10:34:53.454 [main] DEBUG io.github.longfish801 - text call: JSONや YAMLは、階層的なデータ構造を実現できますが、長いテキストの記述には向いていません。
10:34:53.504 [main] DEBUG io.github.longfish801 - block call: block#項目
10:34:53.558 [main] DEBUG io.github.longfish801 - para call
10:34:53.611 [main] DEBUG io.github.longfish801 - line call
10:34:53.670 [main] DEBUG io.github.longfish801 - text call: Groovy DSLは、文法的な誤りを含む Closureを記述できません。
10:34:53.727 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:34:53.780 [main] DEBUG io.github.longfish801 - para call
10:34:53.848 [main] DEBUG io.github.longfish801 - line call
10:34:53.904 [main] DEBUG io.github.longfish801 - text call: サンプル
10:34:53.956 [main] DEBUG io.github.longfish801 - para call
10:34:54.007 [main] DEBUG io.github.longfish801 - line call
10:34:54.061 [main] DEBUG io.github.longfish801 - text call: 　以下にTPAC文書のサンプルを示します。
10:34:54.111 [main] DEBUG io.github.longfish801 - line call
10:34:54.166 [main] DEBUG io.github.longfish801 - text call: 　ファイル
10:34:54.218 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:34:54.275 [main] DEBUG io.github.longfish801 - text call: tpacSample/sample.tpac
10:34:54.329 [main] DEBUG io.github.longfish801 - text call: として保存したとします。
10:34:54.396 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:54.450 [main] DEBUG io.github.longfish801 - para call
10:34:54.501 [main] DEBUG io.github.longfish801 - line call
10:34:54.557 [main] DEBUG io.github.longfish801 - text call: #! dec ルート
10:34:54.608 [main] DEBUG io.github.longfish801 - line call
10:34:54.664 [main] DEBUG io.github.longfish801 - text call: ## parent1 親名１
10:34:54.715 [main] DEBUG io.github.longfish801 - para call
10:34:54.766 [main] DEBUG io.github.longfish801 - line call
10:34:54.823 [main] DEBUG io.github.longfish801 - text call: ## parent2 親名２
10:34:54.874 [main] DEBUG io.github.longfish801 - line call
10:34:54.930 [main] DEBUG io.github.longfish801 - text call: #-attr1 属性値１
10:34:54.997 [main] DEBUG io.github.longfish801 - line call
10:34:55.054 [main] DEBUG io.github.longfish801 - text call: #-attr2
10:34:55.106 [main] DEBUG io.github.longfish801 - para call
10:34:55.157 [main] DEBUG io.github.longfish801 - line call
10:34:55.214 [main] DEBUG io.github.longfish801 - text call: サンプルテキストあ
10:34:55.265 [main] DEBUG io.github.longfish801 - line call
10:34:55.321 [main] DEBUG io.github.longfish801 - text call: サンプルテキストい
10:34:55.372 [main] DEBUG io.github.longfish801 - line call
10:34:55.428 [main] DEBUG io.github.longfish801 - text call: サンプルテキストう
10:34:55.480 [main] DEBUG io.github.longfish801 - para call
10:34:55.547 [main] DEBUG io.github.longfish801 - line call
10:34:55.605 [main] DEBUG io.github.longfish801 - text call: # child1 子名１
10:34:55.655 [main] DEBUG io.github.longfish801 - line call
10:34:55.711 [main] DEBUG io.github.longfish801 - text call: サンプルテキストか
10:34:55.762 [main] DEBUG io.github.longfish801 - line call
10:34:55.818 [main] DEBUG io.github.longfish801 - text call: サンプルテキストき
10:34:55.868 [main] DEBUG io.github.longfish801 - line call
10:34:55.923 [main] DEBUG io.github.longfish801 - text call: サンプルテキストく
10:34:55.975 [main] DEBUG io.github.longfish801 - para call
10:34:56.026 [main] DEBUG io.github.longfish801 - line call
10:34:56.083 [main] DEBUG io.github.longfish801 - text call: # child2 子名２
10:34:56.150 [main] DEBUG io.github.longfish801 - line call
10:34:56.206 [main] DEBUG io.github.longfish801 - text call: #-attr3 属性値３
10:34:56.257 [main] DEBUG io.github.longfish801 - para call
10:34:56.308 [main] DEBUG io.github.longfish801 - line call
10:34:56.363 [main] DEBUG io.github.longfish801 - text call: 　上記の TPAC文書を、以下の XMLに変換できます。
10:34:56.412 [main] DEBUG io.github.longfish801 - line call
10:34:56.466 [main] DEBUG io.github.longfish801 - text call: 　ファイル
10:34:56.517 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:34:56.573 [main] DEBUG io.github.longfish801 - text call: tpacSample/sample.xml
10:34:56.627 [main] DEBUG io.github.longfish801 - text call: として保存したとします。
10:34:56.677 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:56.747 [main] DEBUG io.github.longfish801 - para call
10:34:56.798 [main] DEBUG io.github.longfish801 - line call
10:34:56.855 [main] DEBUG io.github.longfish801 - text call: <?xml version="1.0" encoding="UTF-8"?>
10:34:56.906 [main] DEBUG io.github.longfish801 - line call
10:34:56.962 [main] DEBUG io.github.longfish801 - text call: <dec name="ルート">
10:34:57.013 [main] DEBUG io.github.longfish801 - line call
10:34:57.069 [main] DEBUG io.github.longfish801 - text call:   <parent1 name="親名１">
10:34:57.119 [main] DEBUG io.github.longfish801 - line call
10:34:57.176 [main] DEBUG io.github.longfish801 - text call: </parent1>
10:34:57.227 [main] DEBUG io.github.longfish801 - line call
10:34:57.310 [main] DEBUG io.github.longfish801 - text call:   <parent2 name="親名２" attr1="属性値１" attr2="">
10:34:57.368 [main] DEBUG io.github.longfish801 - line call
10:34:57.424 [main] DEBUG io.github.longfish801 - text call: サンプルテキストあ
10:34:57.475 [main] DEBUG io.github.longfish801 - line call
10:34:57.530 [main] DEBUG io.github.longfish801 - text call: サンプルテキストい
10:34:57.581 [main] DEBUG io.github.longfish801 - line call
10:34:57.637 [main] DEBUG io.github.longfish801 - text call: サンプルテキストう
10:34:57.689 [main] DEBUG io.github.longfish801 - para call
10:34:57.740 [main] DEBUG io.github.longfish801 - line call
10:34:57.797 [main] DEBUG io.github.longfish801 - text call:     <child1 name="子名１">サンプルテキストか
10:34:57.848 [main] DEBUG io.github.longfish801 - line call
10:34:57.921 [main] DEBUG io.github.longfish801 - text call: サンプルテキストき
10:34:57.972 [main] DEBUG io.github.longfish801 - line call
10:34:58.029 [main] DEBUG io.github.longfish801 - text call: サンプルテキストく
10:34:58.081 [main] DEBUG io.github.longfish801 - para call
10:34:58.132 [main] DEBUG io.github.longfish801 - line call
10:34:58.188 [main] DEBUG io.github.longfish801 - text call: </child1>
10:34:58.238 [main] DEBUG io.github.longfish801 - line call
10:34:58.295 [main] DEBUG io.github.longfish801 - text call:     <child2 name="子名２" attr3="属性値３" />
10:34:58.346 [main] DEBUG io.github.longfish801 - line call
10:34:58.402 [main] DEBUG io.github.longfish801 - text call:   </parent2>
10:34:58.470 [main] DEBUG io.github.longfish801 - line call
10:34:58.527 [main] DEBUG io.github.longfish801 - text call: </dec>
10:34:58.577 [main] DEBUG io.github.longfish801 - para call
10:34:58.629 [main] DEBUG io.github.longfish801 - line call
10:34:58.684 [main] DEBUG io.github.longfish801 - text call: 　クラス
10:34:58.735 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:34:58.791 [main] DEBUG io.github.longfish801 - text call: Tpac
10:34:58.845 [main] DEBUG io.github.longfish801 - text call: を利用して、XMLへの変換などができます。
10:34:58.895 [main] DEBUG io.github.longfish801 - para call
10:34:58.947 [main] DEBUG io.github.longfish801 - line call
10:34:59.004 [main] DEBUG io.github.longfish801 - text call: 　以下をファイル
10:34:59.074 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:34:59.131 [main] DEBUG io.github.longfish801 - text call: tpacSample/sample.groovy
10:34:59.188 [main] DEBUG io.github.longfish801 - text call: として保存したとします。
10:34:59.239 [main] DEBUG io.github.longfish801 - line call
10:34:59.294 [main] DEBUG io.github.longfish801 - text call: 　groovyコマンドで実行すると、assertに成功します。
10:34:59.344 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:34:59.406 [main] DEBUG io.github.longfish801 - para call
10:34:59.459 [main] DEBUG io.github.longfish801 - line call
10:34:59.516 [main] DEBUG io.github.longfish801 - text call: @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/')
10:34:59.567 [main] DEBUG io.github.longfish801 - line call
10:34:59.624 [main] DEBUG io.github.longfish801 - text call: @Grab('io.github.longfish801:yakumo:0.1.00')
10:34:59.708 [main] DEBUG io.github.longfish801 - line call
10:34:59.764 [main] DEBUG io.github.longfish801 - text call: @GrabExclude('org.codehaus.groovy:groovy-all')
10:34:59.817 [main] DEBUG io.github.longfish801 - para call
10:34:59.870 [main] DEBUG io.github.longfish801 - line call
10:34:59.926 [main] DEBUG io.github.longfish801 - text call: import io.github.longfish801.yakumo.tpac.Tpac;
10:34:59.976 [main] DEBUG io.github.longfish801 - line call
10:35:00.034 [main] DEBUG io.github.longfish801 - text call: import io.github.longfish801.yakumo.parser.ParseException;
10:35:00.086 [main] DEBUG io.github.longfish801 - para call
10:35:00.137 [main] DEBUG io.github.longfish801 - line call
10:35:00.193 [main] DEBUG io.github.longfish801 - text call: Tpac tpac = null;
10:35:00.260 [main] DEBUG io.github.longfish801 - line call
10:35:00.316 [main] DEBUG io.github.longfish801 - text call: try {
10:35:00.367 [main] DEBUG io.github.longfish801 - line call
10:35:00.424 [main] DEBUG io.github.longfish801 - text call: 	tpac = new Tpac(new File('sample.tpac'));
10:35:00.476 [main] DEBUG io.github.longfish801 - line call
10:35:00.532 [main] DEBUG io.github.longfish801 - text call: 	assert tpac.toXml() == new File('sample.xml').getText('UTF-8');
10:35:00.582 [main] DEBUG io.github.longfish801 - line call
10:35:00.639 [main] DEBUG io.github.longfish801 - text call: } catch (ParseException exc){
10:35:00.690 [main] DEBUG io.github.longfish801 - line call
10:35:00.746 [main] DEBUG io.github.longfish801 - text call: 	println "文法誤りがあるため TPAC文書を解析できません。exc=${exc}";
10:35:00.801 [main] DEBUG io.github.longfish801 - line call
10:35:00.873 [main] DEBUG io.github.longfish801 - text call: }
10:35:00.929 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:00.983 [main] DEBUG io.github.longfish801 - para call
10:35:01.035 [main] DEBUG io.github.longfish801 - line call
10:35:01.091 [main] DEBUG io.github.longfish801 - text call: 全般
10:35:01.142 [main] DEBUG io.github.longfish801 - para call
10:35:01.193 [main] DEBUG io.github.longfish801 - line call
10:35:01.248 [main] DEBUG io.github.longfish801 - text call: 　必ず終端に改行コードが必要です。
10:35:01.298 [main] DEBUG io.github.longfish801 - line call
10:35:01.353 [main] DEBUG io.github.longfish801 - text call: 　ファイルに記述する場合、文字コードは UTF-8を使用してください。
10:35:01.415 [main] DEBUG io.github.longfish801 - para call
10:35:01.467 [main] DEBUG io.github.longfish801 - line call
10:35:01.522 [main] DEBUG io.github.longfish801 - text call: 　タグ名、名前、属性名に改行コード、半角スペース、半角シャープは使用できません。
10:35:01.571 [main] DEBUG io.github.longfish801 - line call
10:35:01.626 [main] DEBUG io.github.longfish801 - text call: 　属性値に改行コードは使用できません。
10:35:01.676 [main] DEBUG io.github.longfish801 - line call
10:35:01.730 [main] DEBUG io.github.longfish801 - text call: 　タグ名、属性名は空文字を許容しません。名前、属性値は空文字を許容します。
10:35:01.786 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:01.840 [main] DEBUG io.github.longfish801 - para call
10:35:01.891 [main] DEBUG io.github.longfish801 - line call
10:35:01.947 [main] DEBUG io.github.longfish801 - text call: 使用できる文字
10:35:02.011 [main] DEBUG io.github.longfish801 - para call
10:35:02.062 [main] DEBUG io.github.longfish801 - line call
10:35:02.117 [main] DEBUG io.github.longfish801 - text call: 　タグ名は必須です。
10:35:02.168 [main] DEBUG io.github.longfish801 - line call
10:35:02.222 [main] DEBUG io.github.longfish801 - text call: 　改行コード、半角スペース、半角シャープを使用できません。
10:35:02.272 [main] DEBUG io.github.longfish801 - para call
10:35:02.322 [main] DEBUG io.github.longfish801 - line call
10:35:02.378 [main] DEBUG io.github.longfish801 - text call: 　名前は省略可の場合があります。
10:35:02.428 [main] DEBUG io.github.longfish801 - line call
10:35:02.482 [main] DEBUG io.github.longfish801 - text call: 　改行コード、半角スペース、半角シャープを使用できません。
10:35:02.532 [main] DEBUG io.github.longfish801 - para call
10:35:02.596 [main] DEBUG io.github.longfish801 - line call
10:35:02.650 [main] DEBUG io.github.longfish801 - text call: 　属性名は必須です。
10:35:02.700 [main] DEBUG io.github.longfish801 - line call
10:35:02.755 [main] DEBUG io.github.longfish801 - text call: 　改行コード、半角スペース、半角シャープを使用できません。
10:35:02.806 [main] DEBUG io.github.longfish801 - para call
10:35:02.861 [main] DEBUG io.github.longfish801 - line call
10:35:02.918 [main] DEBUG io.github.longfish801 - text call: 　属性値は省略可です。
10:35:02.971 [main] DEBUG io.github.longfish801 - line call
10:35:03.025 [main] DEBUG io.github.longfish801 - text call: 　改行コードを使用できません。
10:35:03.075 [main] DEBUG io.github.longfish801 - para call
10:35:03.126 [main] DEBUG io.github.longfish801 - line call
10:35:03.193 [main] DEBUG io.github.longfish801 - text call: 　テキストは省略可です。
10:35:03.243 [main] DEBUG io.github.longfish801 - line call
10:35:03.299 [main] DEBUG io.github.longfish801 - text call: 　すべての文字を使用できます。複数行記述することもできます。
10:35:03.350 [main] DEBUG io.github.longfish801 - line call
10:35:03.405 [main] DEBUG io.github.longfish801 - text call: 　先頭を半角シャープ（#）以外の文字で始める必要があります。
10:35:03.460 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:03.512 [main] DEBUG io.github.longfish801 - para call
10:35:03.563 [main] DEBUG io.github.longfish801 - line call
10:35:03.619 [main] DEBUG io.github.longfish801 - text call: 宣言
10:35:03.670 [main] DEBUG io.github.longfish801 - para call
10:35:03.720 [main] DEBUG io.github.longfish801 - line call
10:35:03.789 [main] DEBUG io.github.longfish801 - text call: 　先頭行に宣言をひとつだけ持ちます。
10:35:03.840 [main] DEBUG io.github.longfish801 - line call
10:35:03.895 [main] DEBUG io.github.longfish801 - text call: 　半角シャープ＋半角エクスクラメーションマーク（#!）を行の先頭に付加します。
10:35:03.946 [main] DEBUG io.github.longfish801 - line call
10:35:04.001 [main] DEBUG io.github.longfish801 - text call: 　タグ名と名前を半角スペース区切りで記述します。
10:35:04.051 [main] DEBUG io.github.longfish801 - line call
10:35:04.105 [main] DEBUG io.github.longfish801 - text call: 　タグ名の前にも半角スペースが必要です。
10:35:04.155 [main] DEBUG io.github.longfish801 - line call
10:35:04.210 [main] DEBUG io.github.longfish801 - text call: 　タグ名は必須、名前は省略可です。
10:35:04.266 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:04.319 [main] DEBUG io.github.longfish801 - para call
10:35:04.385 [main] DEBUG io.github.longfish801 - line call
10:35:04.441 [main] DEBUG io.github.longfish801 - text call: 親子要素
10:35:04.491 [main] DEBUG io.github.longfish801 - para call
10:35:04.542 [main] DEBUG io.github.longfish801 - line call
10:35:04.597 [main] DEBUG io.github.longfish801 - text call: 　親要素、子要素を複数指定できます。
10:35:04.648 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:04.700 [main] DEBUG io.github.longfish801 - block call: block#項目
10:35:04.754 [main] DEBUG io.github.longfish801 - para call
10:35:04.808 [main] DEBUG io.github.longfish801 - line call
10:35:04.867 [main] DEBUG io.github.longfish801 - text call: 親要素は半角シャープふたつ（##）を行の先頭に付加します。
10:35:04.919 [main] DEBUG io.github.longfish801 - block call: block#項目
10:35:04.986 [main] DEBUG io.github.longfish801 - para call
10:35:05.039 [main] DEBUG io.github.longfish801 - line call
10:35:05.097 [main] DEBUG io.github.longfish801 - text call: 子要素は半角シャープ（#）を行の先頭に付加します。
10:35:05.147 [main] DEBUG io.github.longfish801 - para call
10:35:05.198 [main] DEBUG io.github.longfish801 - line call
10:35:05.252 [main] DEBUG io.github.longfish801 - text call: 　子要素を定義するときは、その親要素が必要です。
10:35:05.303 [main] DEBUG io.github.longfish801 - line call
10:35:05.358 [main] DEBUG io.github.longfish801 - text call: 　親要素の後に記述した子要素は、その親要素に属するとみなします。
10:35:05.409 [main] DEBUG io.github.longfish801 - para call
10:35:05.459 [main] DEBUG io.github.longfish801 - line call
10:35:05.527 [main] DEBUG io.github.longfish801 - text call: 　親子要素にはタグ名と名前を半角スペース区切りで記述します。
10:35:05.578 [main] DEBUG io.github.longfish801 - line call
10:35:05.633 [main] DEBUG io.github.longfish801 - text call: 　タグ名の前にも半角スペースが必要です。
10:35:05.686 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:05.738 [main] DEBUG io.github.longfish801 - block call: block#項目
10:35:05.793 [main] DEBUG io.github.longfish801 - para call
10:35:05.847 [main] DEBUG io.github.longfish801 - line call
10:35:05.906 [main] DEBUG io.github.longfish801 - text call: タグ名は必須、重複可です。
10:35:05.959 [main] DEBUG io.github.longfish801 - block call: block#項目
10:35:06.014 [main] DEBUG io.github.longfish801 - para call
10:35:06.071 [main] DEBUG io.github.longfish801 - line call
10:35:06.150 [main] DEBUG io.github.longfish801 - text call: 名前は、ひとつのみ省略できます。
10:35:06.202 [main] DEBUG io.github.longfish801 - line call
10:35:06.261 [main] DEBUG io.github.longfish801 - text call: ひとつのみとは、親要素でひとつのみか、同じ親に属する子にひとつのみです。
10:35:06.313 [main] DEBUG io.github.longfish801 - block call: block#項目
10:35:06.368 [main] DEBUG io.github.longfish801 - para call
10:35:06.421 [main] DEBUG io.github.longfish801 - line call
10:35:06.480 [main] DEBUG io.github.longfish801 - text call: 親同士でタグと名前の組合せの重複は不可です。
10:35:06.533 [main] DEBUG io.github.longfish801 - block call: block#項目
10:35:06.586 [main] DEBUG io.github.longfish801 - para call
10:35:06.639 [main] DEBUG io.github.longfish801 - line call
10:35:06.698 [main] DEBUG io.github.longfish801 - text call: 同じ親に属する子同士で、タグと名前の組合せの重複は不可です。
10:35:06.768 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:06.822 [main] DEBUG io.github.longfish801 - para call
10:35:06.874 [main] DEBUG io.github.longfish801 - line call
10:35:06.930 [main] DEBUG io.github.longfish801 - text call: 属性
10:35:06.980 [main] DEBUG io.github.longfish801 - para call
10:35:07.032 [main] DEBUG io.github.longfish801 - line call
10:35:07.087 [main] DEBUG io.github.longfish801 - text call: 　宣言要素、親子要素には属性を複数持たせることができます。
10:35:07.138 [main] DEBUG io.github.longfish801 - line call
10:35:07.192 [main] DEBUG io.github.longfish801 - text call: 　各要素の後続行に、先頭が半角シャープ＋半角ハイフン（#-）で始まる行を記述します。
10:35:07.243 [main] DEBUG io.github.longfish801 - line call
10:35:07.311 [main] DEBUG io.github.longfish801 - text call: 　各要素と属性の間、属性の行同士の間に空行は含めないでください。
10:35:07.362 [main] DEBUG io.github.longfish801 - para call
10:35:07.412 [main] DEBUG io.github.longfish801 - line call
10:35:07.468 [main] DEBUG io.github.longfish801 - text call: 　属性名と属性値を半角スペース区切りで記述します。
10:35:07.518 [main] DEBUG io.github.longfish801 - line call
10:35:07.572 [main] DEBUG io.github.longfish801 - text call: 　属性名の前に半角スペースは不要です。
10:35:07.622 [main] DEBUG io.github.longfish801 - para call
10:35:07.672 [main] DEBUG io.github.longfish801 - line call
10:35:07.727 [main] DEBUG io.github.longfish801 - text call: 　属性名は必須です。同じ親あるいは子に属する属性名は重複不可です。
10:35:07.778 [main] DEBUG io.github.longfish801 - line call
10:35:07.833 [main] DEBUG io.github.longfish801 - text call: 　属性値は省略可です。
10:35:07.903 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:07.956 [main] DEBUG io.github.longfish801 - para call
10:35:08.007 [main] DEBUG io.github.longfish801 - line call
10:35:08.064 [main] DEBUG io.github.longfish801 - text call: テキスト
10:35:08.115 [main] DEBUG io.github.longfish801 - para call
10:35:08.166 [main] DEBUG io.github.longfish801 - line call
10:35:08.220 [main] DEBUG io.github.longfish801 - text call: 　宣言要素、親子要素はテキストを最低ひとつ持たせることができます。
10:35:08.270 [main] DEBUG io.github.longfish801 - line call
10:35:08.325 [main] DEBUG io.github.longfish801 - text call: 　テキストの各行は、先頭を半角シャープ（#）以外の文字で始める必要があります。
10:35:08.376 [main] DEBUG io.github.longfish801 - para call
10:35:08.427 [main] DEBUG io.github.longfish801 - line call
10:35:08.494 [main] DEBUG io.github.longfish801 - text call: 　テキストは省略可です。
10:35:08.544 [main] DEBUG io.github.longfish801 - para call
10:35:08.594 [main] DEBUG io.github.longfish801 - line call
10:35:08.649 [main] DEBUG io.github.longfish801 - text call: 以上
10:35:08.749 [main] DEBUG io.github.longfish801 - para call
10:35:08.801 [main] DEBUG io.github.longfish801 - line call
10:35:08.857 [main] DEBUG io.github.longfish801 - text call: TPAC記法
10:35:08.962 [main] DEBUG io.github.longfish801 - para call
10:35:09.015 [main] DEBUG io.github.longfish801 - line call
10:35:09.085 [main] DEBUG io.github.longfish801 - text call: 概要
10:35:09.136 [main] DEBUG io.github.longfish801 - para call
10:35:09.190 [main] DEBUG io.github.longfish801 - line call
10:35:09.245 [main] DEBUG io.github.longfish801 - text call: サンプル
10:35:09.297 [main] DEBUG io.github.longfish801 - para call
10:35:09.350 [main] DEBUG io.github.longfish801 - line call
10:35:09.404 [main] DEBUG io.github.longfish801 - text call: 全般
10:35:09.455 [main] DEBUG io.github.longfish801 - para call
10:35:09.508 [main] DEBUG io.github.longfish801 - line call
10:35:09.563 [main] DEBUG io.github.longfish801 - text call: 使用できる文字
10:35:09.613 [main] DEBUG io.github.longfish801 - para call
10:35:09.680 [main] DEBUG io.github.longfish801 - line call
10:35:09.735 [main] DEBUG io.github.longfish801 - text call: 宣言
10:35:09.785 [main] DEBUG io.github.longfish801 - para call
10:35:09.840 [main] DEBUG io.github.longfish801 - line call
10:35:09.895 [main] DEBUG io.github.longfish801 - text call: 親子要素
10:35:09.951 [main] DEBUG io.github.longfish801 - para call
10:35:10.003 [main] DEBUG io.github.longfish801 - line call
10:35:10.058 [main] DEBUG io.github.longfish801 - text call: 属性
10:35:10.109 [main] DEBUG io.github.longfish801 - para call
10:35:10.163 [main] DEBUG io.github.longfish801 - line call
10:35:10.217 [main] DEBUG io.github.longfish801 - text call: テキスト
10:35:10.288 [Thread-85] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行開始 key=washscr#BLtxt文書へ整形
10:35:10.377 [ForkJoinPool-37-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#箇条書き
10:35:10.377 [ForkJoinPool-37-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY reprex#各種置換
10:35:10.424 [ForkJoinPool-38-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY replace#エスケープ
10:35:10.455 [ForkJoinPool-39-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#表
10:35:10.477 [ForkJoinPool-40-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#コラムを整形
10:35:10.501 [ForkJoinPool-41-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#タグ付きコラムを整形
10:35:10.501 [ForkJoinPool-42-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY slice#空白行区切り
10:35:10.501 [ForkJoinPool-42-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#BLエスケープ
10:35:10.502 [ForkJoinPool-42-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#タグ付きコラム
10:35:10.502 [ForkJoinPool-42-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#コラム
10:35:10.502 [ForkJoinPool-42-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#表
10:35:10.502 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【＃タイトル】WashScr記法]
10:35:10.523 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■概要]
10:35:10.563 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＃タイトル】WashScr記法]
10:35:10.574 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　WashScr記法は、Washスクリプトのための記法です。, 　Washスクリプトは、テキストの整形に特化したスクリプトです。, 　文法は【リンク：TPAC記法：tpac.html】をベースにしています。, 　【リンク：Clmap記法：clmap.html】の拡張であり、Clmap記法のタグが使用できます。]
10:35:10.636 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】概要]
10:35:10.643 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■構成]
10:35:10.685 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　WashScr記法は、Washスクリプトのための記法です。, 　Washスクリプトは、テキストの整形に特化したスクリプトです。, 　文法は【｜リンク：tpac.html】TPAC記法【リンク｜】をベースにしています。, 　【｜リンク：clmap.html】Clmap記法【リンク｜】の拡張であり、Clmap記法のタグが使用できます。]
10:35:10.691 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　ファイルに記述する場合、文字コードは UTF-8としてください。, 　Clmap記法で使用できるタグはすべて使用できます。]
10:35:10.731 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】構成]
10:35:10.736 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　先頭に宣言をひとつ持ちます。, 　タグ名は「washscr」です。, 　スペース区切りで任意の名前を付与してください。名前は省略可です。]
10:35:10.777 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　ファイルに記述する場合、文字コードは UTF-8としてください。, 　Clmap記法で使用できるタグはすべて使用できます。]
10:35:10.782 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [--------------------, #! washscr 整形スクリプト, --------------------]
10:35:10.822 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　先頭に宣言をひとつ持ちます。, 　タグ名は「washscr」です。, 　スペース区切りで任意の名前を付与してください。名前は省略可です。]
10:35:10.826 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　宣言の次行から、タグを記述します。, 　タグには範囲指定タグと処理タグの二種類があります。, 　範囲指定タグによって指定された範囲内の文字列に対し、処理タグで指定された処理をします。]
10:35:10.865 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[--------------------, #! washscr 整形スクリプト, --------------------]
10:35:10.869 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■範囲指定タグ, □sliceタグ]
10:35:10.905 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　宣言の次行から、タグを記述します。, 　タグには範囲指定タグと処理タグの二種類があります。, 　範囲指定タグによって指定された範囲内の文字列に対し、処理タグで指定された処理をします。]
10:35:10.912 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　betweenタグは、区切り行で分割した各行を処理タグに渡します。, 　sliceタグの後に、処理名称を記述してください。]
10:35:10.939 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】範囲指定タグ, 【＝見出し：3】sliceタグ]
10:35:10.955 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　div属性には分割の区切りとなる行を正規表現で指定します。, 　デフォルトは空行を意味する正規表現(^$)です。]
10:35:10.982 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　betweenタグは、区切り行で分割した各行を処理タグに渡します。, 　sliceタグの後に、処理名称を記述してください。]
10:35:10.999 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　divhandle属性には区切り行の扱いを指定します。以下のいずれかを指定できます。, 　デフォルトは "exclude"です。, 　"include"の場合、区切り行は範囲の先頭に付与します。]
10:35:11.029 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　div属性には分割の区切りとなる行を正規表現で指定します。, 　デフォルトは空行を意味する正規表現(^$)です。]
10:35:11.047 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [・include - 区切り行を含めて処理タグに渡します。, ・exclude - 区切り行は処理タグに渡さず、そのまま残します。, ・delete - 区切り行を削除します。]
10:35:11.077 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　divhandle属性には区切り行の扱いを指定します。以下のいずれかを指定できます。, 　デフォルトは "exclude"です。, 　"include"の場合、区切り行は範囲の先頭に付与します。]
10:35:11.093 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　処理タグによる処理の対象とするか、クロージャで判断させることができます。, 　judge属性にクロージャのコンビキーを指定します。, 　クロージャには引数List<String> linesを渡します。, 　linesは、分割した文字列を行毎に分割したリストです。, 　処理対象とするか否かを boolean値で返してください。, 　judge属性の指定がない場合は、すべて処理対象となります。]
10:35:11.139 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [--------------------, ## slice 分割, #-div ^$, #-divhandle include, #-judge slice#judge]
10:35:11.187 [ForkJoinPool-37-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：順序なし】, 【－項目】, include - 区切り行を含めて処理タグに渡します。, 【項目－】, 【－項目】, exclude - 区切り行は処理タグに渡さず、そのまま残します。, 【項目－】, 【－項目】, delete - 区切り行を削除します。, 【項目－】, 【箇条書き－】]
10:35:11.188 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：順序なし】, 【－項目】, include - 区切り行を含めて処理タグに渡します。, 【項目－】, 【－項目】, exclude - 区切り行は処理タグに渡さず、そのまま残します。, 【項目－】, 【－項目】, delete - 区切り行を削除します。, 【項目－】, 【箇条書き－】]
10:35:11.221 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [## map replace, # args, 	List<String> lines, # closure judge, 	return (line[0] == '--- 対象外 ---')? false : true;, --------------------]
10:35:11.233 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　処理タグによる処理の対象とするか、クロージャで判断させることができます。, 　judge属性にクロージャのコンビキーを指定します。, 　クロージャには引数List<String> linesを渡します。, 　linesは、分割した文字列を行毎に分割したリストです。, 　処理対象とするか否かを boolean値で返してください。, 　judge属性の指定がない場合は、すべて処理対象となります。]
10:35:11.259 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□betweenタグ]
10:35:11.275 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[--------------------, ## slice 分割, #-div ^$, #-divhandle include, #-judge slice#judge]
10:35:11.308 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　betweenタグは、特定の開始行から終了行の範囲の行を処理タグに渡します。, 　範囲外の文字列はそのまま残ります。, 　betweenタグの後に、処理名称を記述してください。]
10:35:11.318 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[## map replace, # args, 	List<String> lines, # closure judge, 	return (line[0] == '--- 対象外 ---')? false : true;, --------------------]
10:35:11.349 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　bgn属性には開始行を正規表現で指定します。, 　必須項目です。]
10:35:11.358 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】betweenタグ]
10:35:11.389 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　end属性には終了行を正規表現で指定します。, 　デフォルトは空文字です。, 　空文字の場合、開始行と一致する文字列を終了行とみなします。, 　終了行は開始行の次行から探します。, 　開始行はあるのに終了行がないままファイル末端を迎えた場合は、ファイル末端を終了行とみなします。]
10:35:11.398 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　betweenタグは、特定の開始行から終了行の範囲の行を処理タグに渡します。, 　範囲外の文字列はそのまま残ります。, 　betweenタグの後に、処理名称を記述してください。]
10:35:11.417 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　divhandle属性には区切り行の扱いを指定します。, 　詳細はsliceタグを参照してください。]
10:35:11.437 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　bgn属性には開始行を正規表現で指定します。, 　必須項目です。]
10:35:11.456 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　処理を実施するか判断するクロージャを judge属性で指定できます。, 　詳細はsliceタグを参照してください。]
10:35:11.476 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　end属性には終了行を正規表現で指定します。, 　デフォルトは空文字です。, 　空文字の場合、開始行と一致する文字列を終了行とみなします。, 　終了行は開始行の次行から探します。, 　開始行はあるのに終了行がないままファイル末端を迎えた場合は、ファイル末端を終了行とみなします。]
10:35:11.495 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [--------------------, ## between 範囲分割, #-bgn ^\~{5,}$, #-end ^\_{5,}$, #-divhandle include, --------------------]
10:35:11.515 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　divhandle属性には区切り行の扱いを指定します。, 　詳細はsliceタグを参照してください。]
10:35:11.534 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■処理タグ, □replaceタグ]
10:35:11.555 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　処理を実施するか判断するクロージャを judge属性で指定できます。, 　詳細はsliceタグを参照してください。]
10:35:11.574 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　固定文字列での置換をします。, 　replaceタグの後に、処理名称を記述してください。]
10:35:11.594 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[--------------------, ## between 範囲分割, #-bgn ^\~{5,}$, #-end ^\_{5,}$, #-divhandle include, --------------------]
10:35:11.613 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　後続行には、検索文字列と置換後文字列をタブ区切りで記述します。, 　改行区切りで複数指定できます。, 　改行コードを含む検索文字列を指定しても有効とはなりません。]
10:35:11.634 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】処理タグ, 【＝見出し：3】replaceタグ]
10:35:11.652 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　置換を実行するか否か判定する場合、judge属性を指定します。, 　クロージャのコンビキーを指定します。, 　クロージャには引数List<String> linesを渡します。, 　引数linesは、範囲内の文字列を行毎に分割したリストです。, 　処理対象とするか否かを boolean値で返してください。, 　judge属性の指定がない場合は、すべて処理対象となります。]
10:35:11.672 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　固定文字列での置換をします。, 　replaceタグの後に、処理名称を記述してください。]
10:35:11.692 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　対象文字列の前処理をする場合、first属性を指定します。, 　クロージャのコンビキーを指定します。, 　クロージャには引数List<String> linesを渡します。, 　引数linesは、範囲内の文字列を行毎に分割したリストです。, 　処理結果を List<String>で返してください。, 　なお、前処理よりも先に judge属性による判定を実施します。]
10:35:11.712 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　後続行には、検索文字列と置換後文字列をタブ区切りで記述します。, 　改行区切りで複数指定できます。, 　改行コードを含む検索文字列を指定しても有効とはなりません。]
10:35:11.730 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　対象文字列の後処理をする場合、last属性を指定します。, 　置換後の文字列を引数 linesに渡すこと以外は first属性と同じです。]
10:35:11.750 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　置換を実行するか否か判定する場合、judge属性を指定します。, 　クロージャのコンビキーを指定します。, 　クロージャには引数List<String> linesを渡します。, 　引数linesは、範囲内の文字列を行毎に分割したリストです。, 　処理対象とするか否かを boolean値で返してください。, 　judge属性の指定がない場合は、すべて処理対象となります。]
10:35:11.786 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [--------------------, # replace 固定置換, #-judge replace#判定, #-first replace#前処理, #-last replace#後処理, テスト	試験, サンプル	例]
10:35:11.808 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　対象文字列の前処理をする場合、first属性を指定します。, 　クロージャのコンビキーを指定します。, 　クロージャには引数List<String> linesを渡します。, 　引数linesは、範囲内の文字列を行毎に分割したリストです。, 　処理結果を List<String>で返してください。, 　なお、前処理よりも先に judge属性による判定を実施します。]
10:35:11.829 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [## map replace, # args, 	List<String> lines, # closure 判定, 	return (line[0] == '--- 対象外 ---')? false : true;, # closure 前処理, 	return lines.collect { "${it} -サンプル" };, # closure 後処理, 	return lines.collect { "テスト- ${it}" };, --------------------]
10:35:11.850 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　対象文字列の後処理をする場合、last属性を指定します。, 　置換後の文字列を引数 linesに渡すこと以外は first属性と同じです。]
10:35:11.871 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□reprexタグ]
10:35:11.892 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[--------------------, # replace 固定置換, #-judge replace#判定, #-first replace#前処理, #-last replace#後処理, テスト	試験, サンプル	例]
10:35:11.911 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　正規表現での置換をします。, 　reprexタグの後に、処理名称を記述してください。]
10:35:11.933 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[## map replace, # args, 	List<String> lines, # closure 判定, 	return (line[0] == '--- 対象外 ---')? false : true;, # closure 前処理, 	return lines.collect { "${it} -サンプル" };, # closure 後処理, 	return lines.collect { "テスト- ${it}" };, --------------------]
10:35:11.951 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　後続行には、検索文字列と置換後文字列をタブ区切りで記述します。, 　改行区切りで複数指定できます。, 　改行コードを含む検索文字列を指定しても有効となりません。]
10:35:11.973 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】reprexタグ]
10:35:11.992 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　judge属性、first属性、last属性を指定できます。, 　詳細はreplaceタグを参照してください。]
10:35:12.012 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　正規表現での置換をします。, 　reprexタグの後に、処理名称を記述してください。]
10:35:12.032 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [--------------------, # reprex 正規表現置換, テスト(\d+)	サンプル#$1, テスト(\d+)	試験#$1, --------------------]
10:35:12.052 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　後続行には、検索文字列と置換後文字列をタブ区切りで記述します。, 　改行区切りで複数指定できます。, 　改行コードを含む検索文字列を指定しても有効となりません。]
10:35:12.071 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [□callタグ]
10:35:12.093 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　judge属性、first属性、last属性を指定できます。, 　詳細はreplaceタグを参照してください。]
10:35:12.113 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　範囲文字列の処理をするクロージャを呼ぶことができます。, 　callタグの後に、処理名称を記述してください。]
10:35:12.134 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[--------------------, # reprex 正規表現置換, テスト(\d+)	サンプル#$1, テスト(\d+)	試験#$1, --------------------]
10:35:12.155 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　combi属性にクロージャのコンビキーを指定します。必須です。, 　クロージャには引数List<String> linesを渡します。, 　引数linesは、分割した文字列を行毎に分割したリストです。, 　暗黙の引数 config.idxで呼び出し順（0始まり）を参照できます。, 　config.isLastの値が trueのときは最後の要素です。, 　処理結果を List<String>で返してください。]
10:35:12.174 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：3】callタグ]
10:35:12.193 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　judge属性、first属性、last属性を指定できます。, 　詳細はreplaceタグを参照してください。]
10:35:12.213 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　範囲文字列の処理をするクロージャを呼ぶことができます。, 　callタグの後に、処理名称を記述してください。]
10:35:12.232 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [--------------------, # call 範囲処理, #-combi range#add]
10:35:12.253 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　combi属性にクロージャのコンビキーを指定します。必須です。, 　クロージャには引数List<String> linesを渡します。, 　引数linesは、分割した文字列を行毎に分割したリストです。, 　暗黙の引数 config.idxで呼び出し順（0始まり）を参照できます。, 　config.isLastの値が trueのときは最後の要素です。, 　処理結果を List<String>で返してください。]
10:35:12.271 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [## map range, # args, 	List<String> lines, # closure add, 	lines.add(0, '--- ここから ---');, 	lines << '--- ここまで ---';, 	return lines;, --------------------]
10:35:12.293 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　judge属性、first属性、last属性を指定できます。, 　詳細はreplaceタグを参照してください。]
10:35:12.311 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■クロージャ呼び出しについて]
10:35:12.349 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[--------------------, # call 範囲処理, #-combi range#add]
10:35:12.365 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　クロージャ呼び出し時、暗黙の引数 configに以下の情報を格納します。]
10:35:12.392 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[## map range, # args, 	List<String> lines, # closure add, 	lines.add(0, '--- ここから ---');, 	lines << '--- ここまで ---';, 	return lines;, --------------------]
10:35:12.411 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [－config.{ID}.index, 　→範囲指定タグで分割された範囲の位置（0始まり）, －config.{ID}.isLast, 　→範囲指定タグで分割された範囲の、最後の範囲か否か]
10:35:12.436 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】クロージャ呼び出しについて]
10:35:12.455 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　IDは、タグ名と名前を半角シャープ(#)で連結した文字列です。, 　たとえば以下は、まず空行区切りで分割します。, 　先頭の範囲のみ「--- ここから ---」という行を先頭に付与します。, 　末尾の範囲のみ「--- ここまで ---」という行を末尾に付与します。]
10:35:12.476 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　クロージャ呼び出し時、暗黙の引数 configに以下の情報を格納します。]
10:35:12.495 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [--------------------, # slice, # call 範囲指定, #-combi #先頭と末尾に追記]
10:35:12.533 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [## map, # args, 	List<String> lines, # closure 先頭と末尾に追記, 	if (config.'call#範囲指定'.idx == 0) lines.add(0, '--- ここから ---');, 	if (config.'call#範囲指定'.isLast) lines << '--- ここまで ---';, 	return lines;, --------------------]
10:35:12.582 [ForkJoinPool-37-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：対象】, 【－対象】, config.{ID}.index, 【対象－】, 【－箇条書き：説明】, 【－説明】, 範囲指定タグで分割された範囲の位置（0始まり）, 【説明－】, 【箇条書き－】, 【－対象】, config.{ID}.isLast, 【対象－】, 【－箇条書き：説明】, 【－説明】, 範囲指定タグで分割された範囲の、最後の範囲か否か, 【説明－】, 【箇条書き－】, 【箇条書き－】]
10:35:12.583 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：対象】, 【－対象】, config.{ID}.index, 【対象－】, 【－箇条書き：説明】, 【－説明】, 範囲指定タグで分割された範囲の位置（0始まり）, 【説明－】, 【箇条書き－】, 【－対象】, config.{ID}.isLast, 【対象－】, 【－箇条書き：説明】, 【－説明】, 範囲指定タグで分割された範囲の、最後の範囲か否か, 【説明－】, 【箇条書き－】, 【箇条書き－】]
10:35:12.584 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　各タグの処理は並列実行されます。, 　このため、たとえば初めのほうのタグで configに設定した値が、必ずしも後のほうのタグで参照できるとは限らないため注意してください。]
10:35:12.611 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　IDは、タグ名と名前を半角シャープ(#)で連結した文字列です。, 　たとえば以下は、まず空行区切りで分割します。, 　先頭の範囲のみ「--- ここから ---」という行を先頭に付与します。, 　末尾の範囲のみ「--- ここまで ---」という行を末尾に付与します。]
10:35:12.630 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [以上]
10:35:12.652 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[--------------------, # slice, # call 範囲指定, #-combi #先頭と末尾に追記]
10:35:12.672 [ForkJoinPool-42-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 slice#空白行区切り
10:35:12.691 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[## map, # args, 	List<String> lines, # closure 先頭と末尾に追記, 	if (config.'call#範囲指定'.idx == 0) lines.add(0, '--- ここから ---');, 	if (config.'call#範囲指定'.isLast) lines << '--- ここまで ---';, 	return lines;, --------------------]
10:35:12.716 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　各タグの処理は並列実行されます。, 　このため、たとえば初めのほうのタグで configに設定した値が、必ずしも後のほうのタグで参照できるとは限らないため注意してください。]
10:35:12.740 [ForkJoinPool-37-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#箇条書き
10:35:12.740 [ForkJoinPool-37-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#箇条書き
10:35:12.740 [ForkJoinPool-37-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#箇条書き
10:35:12.740 [ForkJoinPool-37-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[以上]
10:35:12.740 [ForkJoinPool-37-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast reprex#各種置換
10:35:12.740 [ForkJoinPool-37-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate reprex#各種置換
10:35:12.740 [ForkJoinPool-37-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY reprex#各種置換
10:35:12.741 [ForkJoinPool-42-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY slice#空白行区切り
10:35:12.741 [ForkJoinPool-42-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#BLエスケープ
10:35:12.741 [ForkJoinPool-38-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast replace#エスケープ
10:35:12.741 [ForkJoinPool-38-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate replace#エスケープ
10:35:12.741 [ForkJoinPool-38-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY replace#エスケープ
10:35:12.743 [ForkJoinPool-42-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#BLエスケープ
10:35:12.743 [ForkJoinPool-42-worker-2] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#表
10:35:12.743 [ForkJoinPool-39-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#表
10:35:12.743 [ForkJoinPool-39-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#表
10:35:12.743 [ForkJoinPool-39-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#表
10:35:12.744 [ForkJoinPool-42-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [#! washscr 整形スクリプト]
10:35:12.744 [ForkJoinPool-42-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [## slice 分割, #-div ^$, #-divhandle include, #-judge slice#judge, , ## map replace, # args, 	List<String> lines, # closure judge, 	return (line[0] == '--- 対象外 ---')? false : true;]
10:35:12.745 [ForkJoinPool-42-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [## between 範囲分割, #-bgn ^\~{5,}$, #-end ^\_{5,}$, #-divhandle include]
10:35:12.745 [ForkJoinPool-42-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#表
10:35:12.745 [ForkJoinPool-42-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [# replace 固定置換, #-judge replace#判定, #-first replace#前処理, #-last replace#後処理, テスト	試験, サンプル	例, , ## map replace, # args, 	List<String> lines, # closure 判定, 	return (line[0] == '--- 対象外 ---')? false : true;, # closure 前処理, 	return lines.collect { "${it} -サンプル" };, # closure 後処理, 	return lines.collect { "テスト- ${it}" };]
10:35:12.745 [ForkJoinPool-42-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [# reprex 正規表現置換, テスト(\d+)	サンプル#$1, テスト(\d+)	試験#$1]
10:35:12.745 [ForkJoinPool-42-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [# call 範囲処理, #-combi range#add, , ## map range, # args, 	List<String> lines, # closure add, 	lines.add(0, '--- ここから ---');, 	lines << '--- ここまで ---';, 	return lines;]
10:35:12.745 [ForkJoinPool-42-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#コラム: [# slice, # call 範囲指定, #-combi #先頭と末尾に追記, , ## map, # args, 	List<String> lines, # closure 先頭と末尾に追記, 	if (config.'call#範囲指定'.idx == 0) lines.add(0, '--- ここから ---');, 	if (config.'call#範囲指定'.isLast) lines << '--- ここまで ---';, 	return lines;]
10:35:12.746 [ForkJoinPool-42-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#コラム
10:35:12.766 [ForkJoinPool-40-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, #! washscr 整形スクリプト, 【コラム－】]
10:35:12.786 [ForkJoinPool-40-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, ## slice 分割, #-div ^$, #-divhandle include, #-judge slice#judge, , ## map replace, # args, 	List<String> lines, # closure judge, 	return (line[0] == '--- 対象外 ---')? false : true;, 【コラム－】]
10:35:12.806 [ForkJoinPool-40-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, ## between 範囲分割, #-bgn ^\~{5,}$, #-end ^\_{5,}$, #-divhandle include, 【コラム－】]
10:35:12.827 [ForkJoinPool-40-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, # replace 固定置換, #-judge replace#判定, #-first replace#前処理, #-last replace#後処理, テスト	試験, サンプル	例, , ## map replace, # args, 	List<String> lines, # closure 判定, 	return (line[0] == '--- 対象外 ---')? false : true;, # closure 前処理, 	return lines.collect { "${it} -サンプル" };, # closure 後処理, 	return lines.collect { "テスト- ${it}" };, 【コラム－】]
10:35:12.865 [ForkJoinPool-40-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, # reprex 正規表現置換, テスト(\d+)	サンプル#$1, テスト(\d+)	試験#$1, 【コラム－】]
10:35:12.885 [ForkJoinPool-40-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, # call 範囲処理, #-combi range#add, , ## map range, # args, 	List<String> lines, # closure add, 	lines.add(0, '--- ここから ---');, 	lines << '--- ここまで ---';, 	return lines;, 【コラム－】]
10:35:12.906 [ForkJoinPool-40-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#コラムを整形 :[【－コラム】, # slice, # call 範囲指定, #-combi #先頭と末尾に追記, , ## map, # args, 	List<String> lines, # closure 先頭と末尾に追記, 	if (config.'call#範囲指定'.idx == 0) lines.add(0, '--- ここから ---');, 	if (config.'call#範囲指定'.isLast) lines << '--- ここまで ---';, 	return lines;, 【コラム－】]
10:35:12.906 [ForkJoinPool-40-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#コラムを整形
10:35:12.906 [ForkJoinPool-40-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#コラムを整形
10:35:12.906 [ForkJoinPool-40-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#コラムを整形
10:35:12.907 [ForkJoinPool-42-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#コラム
10:35:12.907 [ForkJoinPool-42-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#タグ付きコラム
10:35:12.907 [ForkJoinPool-41-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#タグ付きコラムを整形
10:35:12.907 [ForkJoinPool-41-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#タグ付きコラムを整形
10:35:12.908 [ForkJoinPool-41-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#タグ付きコラムを整形
10:35:12.909 [ForkJoinPool-42-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#タグ付きコラム
10:35:12.951 [Thread-85] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行終了 key=washscr#BLtxt文書へ整形
10:35:12.951 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：meta タイトル
10:35:12.951 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.952 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:35:12.952 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.952 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.952 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:35:12.953 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:35:12.953 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:35:12.953 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.953 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.953 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.954 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:35:12.954 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.954 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.954 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:35:12.954 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.955 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:35:12.955 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.955 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.955 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.955 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.956 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:12.956 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:35:12.956 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.956 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:35:12.956 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.956 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:35:12.956 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.957 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.957 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:35:12.958 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.958 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.959 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:35:12.959 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.959 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.959 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.959 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.960 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.960 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.960 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:35:12.961 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.961 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:35:12.961 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.961 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:35:12.961 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.962 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.962 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.962 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.963 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.963 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.964 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:35:12.964 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.964 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.965 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:35:12.966 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.966 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.966 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.966 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.967 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:35:12.967 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.967 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:35:12.967 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.967 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.968 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.968 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.969 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:35:12.969 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.969 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.970 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:35:12.970 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.970 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.970 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:12.970 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:35:12.970 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.970 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:12.970 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:35:12.971 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.971 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:35:12.971 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.971 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:12.971 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:35:12.971 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.971 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.972 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コラム
10:35:12.972 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.972 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.973 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:12.973 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:13.126 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:13.180 [main] DEBUG io.github.longfish801 - para call
10:35:13.233 [main] DEBUG io.github.longfish801 - line call
10:35:13.291 [main] DEBUG io.github.longfish801 - text call: 概要
10:35:13.344 [main] DEBUG io.github.longfish801 - para call
10:35:13.396 [main] DEBUG io.github.longfish801 - line call
10:35:13.451 [main] DEBUG io.github.longfish801 - text call: 　WashScr記法は、Washスクリプトのための記法です。
10:35:13.520 [main] DEBUG io.github.longfish801 - line call
10:35:13.576 [main] DEBUG io.github.longfish801 - text call: 　Washスクリプトは、テキストの整形に特化したスクリプトです。
10:35:13.628 [main] DEBUG io.github.longfish801 - line call
10:35:13.684 [main] DEBUG io.github.longfish801 - text call: 　文法は
10:35:13.738 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:35:13.801 [main] DEBUG io.github.longfish801 - text call: TPAC記法
10:35:13.856 [main] DEBUG io.github.longfish801 - text call: をベースにしています。
10:35:13.908 [main] DEBUG io.github.longfish801 - line call
10:35:13.964 [main] DEBUG io.github.longfish801 - text call: 　
10:35:14.016 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:35:14.091 [main] DEBUG io.github.longfish801 - text call: Clmap記法
10:35:14.146 [main] DEBUG io.github.longfish801 - text call: の拡張であり、Clmap記法のタグが使用できます。
10:35:14.204 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:14.259 [main] DEBUG io.github.longfish801 - para call
10:35:14.311 [main] DEBUG io.github.longfish801 - line call
10:35:14.368 [main] DEBUG io.github.longfish801 - text call: 構成
10:35:14.419 [main] DEBUG io.github.longfish801 - para call
10:35:14.470 [main] DEBUG io.github.longfish801 - line call
10:35:14.525 [main] DEBUG io.github.longfish801 - text call: 　ファイルに記述する場合、文字コードは UTF-8としてください。
10:35:14.583 [main] DEBUG io.github.longfish801 - line call
10:35:14.639 [main] DEBUG io.github.longfish801 - text call: 　Clmap記法で使用できるタグはすべて使用できます。
10:35:14.707 [main] DEBUG io.github.longfish801 - para call
10:35:14.760 [main] DEBUG io.github.longfish801 - line call
10:35:14.815 [main] DEBUG io.github.longfish801 - text call: 　先頭に宣言をひとつ持ちます。
10:35:14.867 [main] DEBUG io.github.longfish801 - line call
10:35:14.923 [main] DEBUG io.github.longfish801 - text call: 　タグ名は「washscr」です。
10:35:14.974 [main] DEBUG io.github.longfish801 - line call
10:35:15.029 [main] DEBUG io.github.longfish801 - text call: 　スペース区切りで任意の名前を付与してください。名前は省略可です。
10:35:15.079 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:35:15.132 [main] DEBUG io.github.longfish801 - para call
10:35:15.184 [main] DEBUG io.github.longfish801 - line call
10:35:15.241 [main] DEBUG io.github.longfish801 - text call: #! washscr 整形スクリプト
10:35:15.310 [main] DEBUG io.github.longfish801 - para call
10:35:15.361 [main] DEBUG io.github.longfish801 - line call
10:35:15.417 [main] DEBUG io.github.longfish801 - text call: 　宣言の次行から、タグを記述します。
10:35:15.469 [main] DEBUG io.github.longfish801 - line call
10:35:15.524 [main] DEBUG io.github.longfish801 - text call: 　タグには範囲指定タグと処理タグの二種類があります。
10:35:15.574 [main] DEBUG io.github.longfish801 - line call
10:35:15.629 [main] DEBUG io.github.longfish801 - text call: 　範囲指定タグによって指定された範囲内の文字列に対し、処理タグで指定された処理をします。
10:35:15.686 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:15.741 [main] DEBUG io.github.longfish801 - para call
10:35:15.793 [main] DEBUG io.github.longfish801 - line call
10:35:15.851 [main] DEBUG io.github.longfish801 - text call: 範囲指定タグ
10:35:15.925 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:15.979 [main] DEBUG io.github.longfish801 - para call
10:35:16.031 [main] DEBUG io.github.longfish801 - line call
10:35:16.089 [main] DEBUG io.github.longfish801 - text call: sliceタグ
10:35:16.140 [main] DEBUG io.github.longfish801 - para call
10:35:16.191 [main] DEBUG io.github.longfish801 - line call
10:35:16.246 [main] DEBUG io.github.longfish801 - text call: 　betweenタグは、区切り行で分割した各行を処理タグに渡します。
10:35:16.297 [main] DEBUG io.github.longfish801 - line call
10:35:16.353 [main] DEBUG io.github.longfish801 - text call: 　sliceタグの後に、処理名称を記述してください。
10:35:16.404 [main] DEBUG io.github.longfish801 - para call
10:35:16.455 [main] DEBUG io.github.longfish801 - line call
10:35:16.526 [main] DEBUG io.github.longfish801 - text call: 　div属性には分割の区切りとなる行を正規表現で指定します。
10:35:16.577 [main] DEBUG io.github.longfish801 - line call
10:35:16.633 [main] DEBUG io.github.longfish801 - text call: 　デフォルトは空行を意味する正規表現(^$)です。
10:35:16.684 [main] DEBUG io.github.longfish801 - para call
10:35:16.736 [main] DEBUG io.github.longfish801 - line call
10:35:16.790 [main] DEBUG io.github.longfish801 - text call: 　divhandle属性には区切り行の扱いを指定します。以下のいずれかを指定できます。
10:35:16.841 [main] DEBUG io.github.longfish801 - line call
10:35:16.897 [main] DEBUG io.github.longfish801 - text call: 　デフォルトは "exclude"です。
10:35:16.948 [main] DEBUG io.github.longfish801 - line call
10:35:17.003 [main] DEBUG io.github.longfish801 - text call: 　"include"の場合、区切り行は範囲の先頭に付与します。
10:35:17.071 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:17.126 [main] DEBUG io.github.longfish801 - block call: block#項目
10:35:17.181 [main] DEBUG io.github.longfish801 - para call
10:35:17.235 [main] DEBUG io.github.longfish801 - line call
10:35:17.295 [main] DEBUG io.github.longfish801 - text call: include - 区切り行を含めて処理タグに渡します。
10:35:17.347 [main] DEBUG io.github.longfish801 - block call: block#項目
10:35:17.400 [main] DEBUG io.github.longfish801 - para call
10:35:17.453 [main] DEBUG io.github.longfish801 - line call
10:35:17.512 [main] DEBUG io.github.longfish801 - text call: exclude - 区切り行は処理タグに渡さず、そのまま残します。
10:35:17.564 [main] DEBUG io.github.longfish801 - block call: block#項目
10:35:17.617 [main] DEBUG io.github.longfish801 - para call
10:35:17.687 [main] DEBUG io.github.longfish801 - line call
10:35:17.746 [main] DEBUG io.github.longfish801 - text call: delete - 区切り行を削除します。
10:35:17.797 [main] DEBUG io.github.longfish801 - para call
10:35:17.849 [main] DEBUG io.github.longfish801 - line call
10:35:17.903 [main] DEBUG io.github.longfish801 - text call: 　処理タグによる処理の対象とするか、クロージャで判断させることができます。
10:35:17.953 [main] DEBUG io.github.longfish801 - line call
10:35:18.007 [main] DEBUG io.github.longfish801 - text call: 　judge属性にクロージャのコンビキーを指定します。
10:35:18.058 [main] DEBUG io.github.longfish801 - line call
10:35:18.113 [main] DEBUG io.github.longfish801 - text call: 　クロージャには引数List<String> linesを渡します。
10:35:18.163 [main] DEBUG io.github.longfish801 - line call
10:35:18.219 [main] DEBUG io.github.longfish801 - text call: 　linesは、分割した文字列を行毎に分割したリストです。
10:35:18.286 [main] DEBUG io.github.longfish801 - line call
10:35:18.341 [main] DEBUG io.github.longfish801 - text call: 　処理対象とするか否かを boolean値で返してください。
10:35:18.392 [main] DEBUG io.github.longfish801 - line call
10:35:18.447 [main] DEBUG io.github.longfish801 - text call: 　judge属性の指定がない場合は、すべて処理対象となります。
10:35:18.497 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:35:18.550 [main] DEBUG io.github.longfish801 - para call
10:35:18.601 [main] DEBUG io.github.longfish801 - line call
10:35:18.657 [main] DEBUG io.github.longfish801 - text call: ## slice 分割
10:35:18.708 [main] DEBUG io.github.longfish801 - line call
10:35:18.766 [main] DEBUG io.github.longfish801 - text call: #-div ^$
10:35:18.818 [main] DEBUG io.github.longfish801 - line call
10:35:18.892 [main] DEBUG io.github.longfish801 - text call: #-divhandle include
10:35:18.943 [main] DEBUG io.github.longfish801 - line call
10:35:19.000 [main] DEBUG io.github.longfish801 - text call: #-judge slice#judge
10:35:19.054 [main] DEBUG io.github.longfish801 - para call
10:35:19.105 [main] DEBUG io.github.longfish801 - line call
10:35:19.161 [main] DEBUG io.github.longfish801 - text call: ## map replace
10:35:19.212 [main] DEBUG io.github.longfish801 - line call
10:35:19.269 [main] DEBUG io.github.longfish801 - text call: # args
10:35:19.320 [main] DEBUG io.github.longfish801 - line call
10:35:19.377 [main] DEBUG io.github.longfish801 - text call: 	List<String> lines
10:35:19.445 [main] DEBUG io.github.longfish801 - line call
10:35:19.502 [main] DEBUG io.github.longfish801 - text call: # closure judge
10:35:19.553 [main] DEBUG io.github.longfish801 - line call
10:35:19.611 [main] DEBUG io.github.longfish801 - text call: 	return (line[0] == '--- 対象外 ---')? false : true;
10:35:19.668 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:19.721 [main] DEBUG io.github.longfish801 - para call
10:35:19.772 [main] DEBUG io.github.longfish801 - line call
10:35:19.829 [main] DEBUG io.github.longfish801 - text call: betweenタグ
10:35:19.880 [main] DEBUG io.github.longfish801 - para call
10:35:19.931 [main] DEBUG io.github.longfish801 - line call
10:35:19.986 [main] DEBUG io.github.longfish801 - text call: 　betweenタグは、特定の開始行から終了行の範囲の行を処理タグに渡します。
10:35:20.052 [main] DEBUG io.github.longfish801 - line call
10:35:20.107 [main] DEBUG io.github.longfish801 - text call: 　範囲外の文字列はそのまま残ります。
10:35:20.158 [main] DEBUG io.github.longfish801 - line call
10:35:20.213 [main] DEBUG io.github.longfish801 - text call: 　betweenタグの後に、処理名称を記述してください。
10:35:20.263 [main] DEBUG io.github.longfish801 - para call
10:35:20.314 [main] DEBUG io.github.longfish801 - line call
10:35:20.369 [main] DEBUG io.github.longfish801 - text call: 　bgn属性には開始行を正規表現で指定します。
10:35:20.418 [main] DEBUG io.github.longfish801 - line call
10:35:20.473 [main] DEBUG io.github.longfish801 - text call: 　必須項目です。
10:35:20.524 [main] DEBUG io.github.longfish801 - para call
10:35:20.575 [main] DEBUG io.github.longfish801 - line call
10:35:20.647 [main] DEBUG io.github.longfish801 - text call: 　end属性には終了行を正規表現で指定します。
10:35:20.698 [main] DEBUG io.github.longfish801 - line call
10:35:20.754 [main] DEBUG io.github.longfish801 - text call: 　デフォルトは空文字です。
10:35:20.805 [main] DEBUG io.github.longfish801 - line call
10:35:20.861 [main] DEBUG io.github.longfish801 - text call: 　空文字の場合、開始行と一致する文字列を終了行とみなします。
10:35:20.911 [main] DEBUG io.github.longfish801 - line call
10:35:20.965 [main] DEBUG io.github.longfish801 - text call: 　終了行は開始行の次行から探します。
10:35:21.016 [main] DEBUG io.github.longfish801 - line call
10:35:21.071 [main] DEBUG io.github.longfish801 - text call: 　開始行はあるのに終了行がないままファイル末端を迎えた場合は、ファイル末端を終了行とみなします。
10:35:21.122 [main] DEBUG io.github.longfish801 - para call
10:35:21.173 [main] DEBUG io.github.longfish801 - line call
10:35:21.244 [main] DEBUG io.github.longfish801 - text call: 　divhandle属性には区切り行の扱いを指定します。
10:35:21.295 [main] DEBUG io.github.longfish801 - line call
10:35:21.350 [main] DEBUG io.github.longfish801 - text call: 　詳細はsliceタグを参照してください。
10:35:21.401 [main] DEBUG io.github.longfish801 - para call
10:35:21.452 [main] DEBUG io.github.longfish801 - line call
10:35:21.505 [main] DEBUG io.github.longfish801 - text call: 　処理を実施するか判断するクロージャを judge属性で指定できます。
10:35:21.555 [main] DEBUG io.github.longfish801 - line call
10:35:21.610 [main] DEBUG io.github.longfish801 - text call: 　詳細はsliceタグを参照してください。
10:35:21.661 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:35:21.715 [main] DEBUG io.github.longfish801 - para call
10:35:21.767 [main] DEBUG io.github.longfish801 - line call
10:35:21.839 [main] DEBUG io.github.longfish801 - text call: ## between 範囲分割
10:35:21.890 [main] DEBUG io.github.longfish801 - line call
10:35:21.946 [main] DEBUG io.github.longfish801 - text call: #-bgn ^\~{5,}$
10:35:21.998 [main] DEBUG io.github.longfish801 - line call
10:35:22.054 [main] DEBUG io.github.longfish801 - text call: #-end ^\_{5,}$
10:35:22.104 [main] DEBUG io.github.longfish801 - line call
10:35:22.160 [main] DEBUG io.github.longfish801 - text call: #-divhandle include
10:35:22.218 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:22.271 [main] DEBUG io.github.longfish801 - para call
10:35:22.323 [main] DEBUG io.github.longfish801 - line call
10:35:22.394 [main] DEBUG io.github.longfish801 - text call: 処理タグ
10:35:22.451 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:22.504 [main] DEBUG io.github.longfish801 - para call
10:35:22.556 [main] DEBUG io.github.longfish801 - line call
10:35:22.612 [main] DEBUG io.github.longfish801 - text call: replaceタグ
10:35:22.663 [main] DEBUG io.github.longfish801 - para call
10:35:22.713 [main] DEBUG io.github.longfish801 - line call
10:35:22.768 [main] DEBUG io.github.longfish801 - text call: 　固定文字列での置換をします。
10:35:22.818 [main] DEBUG io.github.longfish801 - line call
10:35:22.873 [main] DEBUG io.github.longfish801 - text call: 　replaceタグの後に、処理名称を記述してください。
10:35:22.923 [main] DEBUG io.github.longfish801 - para call
10:35:22.988 [main] DEBUG io.github.longfish801 - line call
10:35:23.043 [main] DEBUG io.github.longfish801 - text call: 　後続行には、検索文字列と置換後文字列をタブ区切りで記述します。
10:35:23.094 [main] DEBUG io.github.longfish801 - line call
10:35:23.150 [main] DEBUG io.github.longfish801 - text call: 　改行区切りで複数指定できます。
10:35:23.200 [main] DEBUG io.github.longfish801 - line call
10:35:23.255 [main] DEBUG io.github.longfish801 - text call: 　改行コードを含む検索文字列を指定しても有効とはなりません。
10:35:23.305 [main] DEBUG io.github.longfish801 - para call
10:35:23.356 [main] DEBUG io.github.longfish801 - line call
10:35:23.411 [main] DEBUG io.github.longfish801 - text call: 　置換を実行するか否か判定する場合、judge属性を指定します。
10:35:23.462 [main] DEBUG io.github.longfish801 - line call
10:35:23.517 [main] DEBUG io.github.longfish801 - text call: 　クロージャのコンビキーを指定します。
10:35:23.581 [main] DEBUG io.github.longfish801 - line call
10:35:23.635 [main] DEBUG io.github.longfish801 - text call: 　クロージャには引数List<String> linesを渡します。
10:35:23.686 [main] DEBUG io.github.longfish801 - line call
10:35:23.742 [main] DEBUG io.github.longfish801 - text call: 　引数linesは、範囲内の文字列を行毎に分割したリストです。
10:35:23.793 [main] DEBUG io.github.longfish801 - line call
10:35:23.847 [main] DEBUG io.github.longfish801 - text call: 　処理対象とするか否かを boolean値で返してください。
10:35:23.897 [main] DEBUG io.github.longfish801 - line call
10:35:23.951 [main] DEBUG io.github.longfish801 - text call: 　judge属性の指定がない場合は、すべて処理対象となります。
10:35:24.001 [main] DEBUG io.github.longfish801 - para call
10:35:24.052 [main] DEBUG io.github.longfish801 - line call
10:35:24.107 [main] DEBUG io.github.longfish801 - text call: 　対象文字列の前処理をする場合、first属性を指定します。
10:35:24.172 [main] DEBUG io.github.longfish801 - line call
10:35:24.226 [main] DEBUG io.github.longfish801 - text call: 　クロージャのコンビキーを指定します。
10:35:24.278 [main] DEBUG io.github.longfish801 - line call
10:35:24.332 [main] DEBUG io.github.longfish801 - text call: 　クロージャには引数List<String> linesを渡します。
10:35:24.390 [main] DEBUG io.github.longfish801 - line call
10:35:24.449 [main] DEBUG io.github.longfish801 - text call: 　引数linesは、範囲内の文字列を行毎に分割したリストです。
10:35:24.499 [main] DEBUG io.github.longfish801 - line call
10:35:24.553 [main] DEBUG io.github.longfish801 - text call: 　処理結果を List<String>で返してください。
10:35:24.605 [main] DEBUG io.github.longfish801 - line call
10:35:24.659 [main] DEBUG io.github.longfish801 - text call: 　なお、前処理よりも先に judge属性による判定を実施します。
10:35:24.710 [main] DEBUG io.github.longfish801 - para call
10:35:24.775 [main] DEBUG io.github.longfish801 - line call
10:35:24.832 [main] DEBUG io.github.longfish801 - text call: 　対象文字列の後処理をする場合、last属性を指定します。
10:35:24.883 [main] DEBUG io.github.longfish801 - line call
10:35:24.938 [main] DEBUG io.github.longfish801 - text call: 　置換後の文字列を引数 linesに渡すこと以外は first属性と同じです。
10:35:24.988 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:35:25.041 [main] DEBUG io.github.longfish801 - para call
10:35:25.093 [main] DEBUG io.github.longfish801 - line call
10:35:25.150 [main] DEBUG io.github.longfish801 - text call: # replace 固定置換
10:35:25.201 [main] DEBUG io.github.longfish801 - line call
10:35:25.258 [main] DEBUG io.github.longfish801 - text call: #-judge replace#判定
10:35:25.323 [main] DEBUG io.github.longfish801 - line call
10:35:25.381 [main] DEBUG io.github.longfish801 - text call: #-first replace#前処理
10:35:25.433 [main] DEBUG io.github.longfish801 - line call
10:35:25.490 [main] DEBUG io.github.longfish801 - text call: #-last replace#後処理
10:35:25.541 [main] DEBUG io.github.longfish801 - line call
10:35:25.598 [main] DEBUG io.github.longfish801 - text call: テスト	試験
10:35:25.649 [main] DEBUG io.github.longfish801 - line call
10:35:25.704 [main] DEBUG io.github.longfish801 - text call: サンプル	例
10:35:25.756 [main] DEBUG io.github.longfish801 - para call
10:35:25.808 [main] DEBUG io.github.longfish801 - line call
10:35:25.866 [main] DEBUG io.github.longfish801 - text call: ## map replace
10:35:25.931 [main] DEBUG io.github.longfish801 - line call
10:35:25.988 [main] DEBUG io.github.longfish801 - text call: # args
10:35:26.039 [main] DEBUG io.github.longfish801 - line call
10:35:26.097 [main] DEBUG io.github.longfish801 - text call: 	List<String> lines
10:35:26.148 [main] DEBUG io.github.longfish801 - line call
10:35:26.205 [main] DEBUG io.github.longfish801 - text call: # closure 判定
10:35:26.256 [main] DEBUG io.github.longfish801 - line call
10:35:26.313 [main] DEBUG io.github.longfish801 - text call: 	return (line[0] == '--- 対象外 ---')? false : true;
10:35:26.364 [main] DEBUG io.github.longfish801 - line call
10:35:26.423 [main] DEBUG io.github.longfish801 - text call: # closure 前処理
10:35:26.488 [main] DEBUG io.github.longfish801 - line call
10:35:26.545 [main] DEBUG io.github.longfish801 - text call: 	return lines.collect { "${it} -サンプル" };
10:35:26.596 [main] DEBUG io.github.longfish801 - line call
10:35:26.653 [main] DEBUG io.github.longfish801 - text call: # closure 後処理
10:35:26.705 [main] DEBUG io.github.longfish801 - line call
10:35:26.761 [main] DEBUG io.github.longfish801 - text call: 	return lines.collect { "テスト- ${it}" };
10:35:26.818 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:26.871 [main] DEBUG io.github.longfish801 - para call
10:35:26.923 [main] DEBUG io.github.longfish801 - line call
10:35:26.981 [main] DEBUG io.github.longfish801 - text call: reprexタグ
10:35:27.033 [main] DEBUG io.github.longfish801 - para call
10:35:27.098 [main] DEBUG io.github.longfish801 - line call
10:35:27.153 [main] DEBUG io.github.longfish801 - text call: 　正規表現での置換をします。
10:35:27.205 [main] DEBUG io.github.longfish801 - line call
10:35:27.260 [main] DEBUG io.github.longfish801 - text call: 　reprexタグの後に、処理名称を記述してください。
10:35:27.310 [main] DEBUG io.github.longfish801 - para call
10:35:27.360 [main] DEBUG io.github.longfish801 - line call
10:35:27.415 [main] DEBUG io.github.longfish801 - text call: 　後続行には、検索文字列と置換後文字列をタブ区切りで記述します。
10:35:27.466 [main] DEBUG io.github.longfish801 - line call
10:35:27.521 [main] DEBUG io.github.longfish801 - text call: 　改行区切りで複数指定できます。
10:35:27.572 [main] DEBUG io.github.longfish801 - line call
10:35:27.627 [main] DEBUG io.github.longfish801 - text call: 　改行コードを含む検索文字列を指定しても有効となりません。
10:35:27.691 [main] DEBUG io.github.longfish801 - para call
10:35:27.743 [main] DEBUG io.github.longfish801 - line call
10:35:27.798 [main] DEBUG io.github.longfish801 - text call: 　judge属性、first属性、last属性を指定できます。
10:35:27.849 [main] DEBUG io.github.longfish801 - line call
10:35:27.904 [main] DEBUG io.github.longfish801 - text call: 　詳細はreplaceタグを参照してください。
10:35:27.954 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:35:28.006 [main] DEBUG io.github.longfish801 - para call
10:35:28.058 [main] DEBUG io.github.longfish801 - line call
10:35:28.115 [main] DEBUG io.github.longfish801 - text call: # reprex 正規表現置換
10:35:28.166 [main] DEBUG io.github.longfish801 - line call
10:35:28.223 [main] DEBUG io.github.longfish801 - text call: テスト(\d+)	サンプル#$1
10:35:28.288 [main] DEBUG io.github.longfish801 - line call
10:35:28.345 [main] DEBUG io.github.longfish801 - text call: テスト(\d+)	試験#$1
10:35:28.403 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:28.457 [main] DEBUG io.github.longfish801 - para call
10:35:28.509 [main] DEBUG io.github.longfish801 - line call
10:35:28.565 [main] DEBUG io.github.longfish801 - text call: callタグ
10:35:28.616 [main] DEBUG io.github.longfish801 - para call
10:35:28.667 [main] DEBUG io.github.longfish801 - line call
10:35:28.723 [main] DEBUG io.github.longfish801 - text call: 　範囲文字列の処理をするクロージャを呼ぶことができます。
10:35:28.774 [main] DEBUG io.github.longfish801 - line call
10:35:28.843 [main] DEBUG io.github.longfish801 - text call: 　callタグの後に、処理名称を記述してください。
10:35:28.894 [main] DEBUG io.github.longfish801 - para call
10:35:28.944 [main] DEBUG io.github.longfish801 - line call
10:35:28.999 [main] DEBUG io.github.longfish801 - text call: 　combi属性にクロージャのコンビキーを指定します。必須です。
10:35:29.050 [main] DEBUG io.github.longfish801 - line call
10:35:29.105 [main] DEBUG io.github.longfish801 - text call: 　クロージャには引数List<String> linesを渡します。
10:35:29.155 [main] DEBUG io.github.longfish801 - line call
10:35:29.210 [main] DEBUG io.github.longfish801 - text call: 　引数linesは、分割した文字列を行毎に分割したリストです。
10:35:29.260 [main] DEBUG io.github.longfish801 - line call
10:35:29.315 [main] DEBUG io.github.longfish801 - text call: 　暗黙の引数 config.idxで呼び出し順（0始まり）を参照できます。
10:35:29.366 [main] DEBUG io.github.longfish801 - line call
10:35:29.435 [main] DEBUG io.github.longfish801 - text call: 　config.isLastの値が trueのときは最後の要素です。
10:35:29.486 [main] DEBUG io.github.longfish801 - line call
10:35:29.540 [main] DEBUG io.github.longfish801 - text call: 　処理結果を List<String>で返してください。
10:35:29.591 [main] DEBUG io.github.longfish801 - para call
10:35:29.642 [main] DEBUG io.github.longfish801 - line call
10:35:29.698 [main] DEBUG io.github.longfish801 - text call: 　judge属性、first属性、last属性を指定できます。
10:35:29.748 [main] DEBUG io.github.longfish801 - line call
10:35:29.802 [main] DEBUG io.github.longfish801 - text call: 　詳細はreplaceタグを参照してください。
10:35:29.853 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:35:29.907 [main] DEBUG io.github.longfish801 - para call
10:35:29.959 [main] DEBUG io.github.longfish801 - line call
10:35:30.031 [main] DEBUG io.github.longfish801 - text call: # call 範囲処理
10:35:30.083 [main] DEBUG io.github.longfish801 - line call
10:35:30.140 [main] DEBUG io.github.longfish801 - text call: #-combi range#add
10:35:30.194 [main] DEBUG io.github.longfish801 - para call
10:35:30.246 [main] DEBUG io.github.longfish801 - line call
10:35:30.303 [main] DEBUG io.github.longfish801 - text call: ## map range
10:35:30.354 [main] DEBUG io.github.longfish801 - line call
10:35:30.411 [main] DEBUG io.github.longfish801 - text call: # args
10:35:30.463 [main] DEBUG io.github.longfish801 - line call
10:35:30.521 [main] DEBUG io.github.longfish801 - text call: 	List<String> lines
10:35:30.572 [main] DEBUG io.github.longfish801 - line call
10:35:30.643 [main] DEBUG io.github.longfish801 - text call: # closure add
10:35:30.695 [main] DEBUG io.github.longfish801 - line call
10:35:30.752 [main] DEBUG io.github.longfish801 - text call: 	lines.add(0, '--- ここから ---');
10:35:30.803 [main] DEBUG io.github.longfish801 - line call
10:35:30.860 [main] DEBUG io.github.longfish801 - text call: 	lines << '--- ここまで ---';
10:35:30.910 [main] DEBUG io.github.longfish801 - line call
10:35:30.967 [main] DEBUG io.github.longfish801 - text call: 	return lines;
10:35:31.024 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:31.078 [main] DEBUG io.github.longfish801 - para call
10:35:31.130 [main] DEBUG io.github.longfish801 - line call
10:35:31.201 [main] DEBUG io.github.longfish801 - text call: クロージャ呼び出しについて
10:35:31.253 [main] DEBUG io.github.longfish801 - para call
10:35:31.304 [main] DEBUG io.github.longfish801 - line call
10:35:31.359 [main] DEBUG io.github.longfish801 - text call: 　クロージャ呼び出し時、暗黙の引数 configに以下の情報を格納します。
10:35:31.412 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:31.465 [main] DEBUG io.github.longfish801 - block call: block#対象
10:35:31.518 [main] DEBUG io.github.longfish801 - para call
10:35:31.572 [main] DEBUG io.github.longfish801 - line call
10:35:31.631 [main] DEBUG io.github.longfish801 - text call: config.{ID}.index
10:35:31.685 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:31.740 [main] DEBUG io.github.longfish801 - block call: block#説明
10:35:31.811 [main] DEBUG io.github.longfish801 - para call
10:35:31.867 [main] DEBUG io.github.longfish801 - line call
10:35:31.928 [main] DEBUG io.github.longfish801 - text call: 範囲指定タグで分割された範囲の位置（0始まり）
10:35:31.981 [main] DEBUG io.github.longfish801 - block call: block#対象
10:35:32.035 [main] DEBUG io.github.longfish801 - para call
10:35:32.087 [main] DEBUG io.github.longfish801 - line call
10:35:32.145 [main] DEBUG io.github.longfish801 - text call: config.{ID}.isLast
10:35:32.200 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:32.254 [main] DEBUG io.github.longfish801 - block call: block#説明
10:35:32.310 [main] DEBUG io.github.longfish801 - para call
10:35:32.380 [main] DEBUG io.github.longfish801 - line call
10:35:32.440 [main] DEBUG io.github.longfish801 - text call: 範囲指定タグで分割された範囲の、最後の範囲か否か
10:35:32.491 [main] DEBUG io.github.longfish801 - para call
10:35:32.543 [main] DEBUG io.github.longfish801 - line call
10:35:32.598 [main] DEBUG io.github.longfish801 - text call: 　IDは、タグ名と名前を半角シャープ(#)で連結した文字列です。
10:35:32.648 [main] DEBUG io.github.longfish801 - line call
10:35:32.703 [main] DEBUG io.github.longfish801 - text call: 　たとえば以下は、まず空行区切りで分割します。
10:35:32.754 [main] DEBUG io.github.longfish801 - line call
10:35:32.810 [main] DEBUG io.github.longfish801 - text call: 　先頭の範囲のみ「--- ここから ---」という行を先頭に付与します。
10:35:32.862 [main] DEBUG io.github.longfish801 - line call
10:35:32.918 [main] DEBUG io.github.longfish801 - text call: 　末尾の範囲のみ「--- ここまで ---」という行を末尾に付与します。
10:35:32.983 [main] DEBUG io.github.longfish801 - block call: block#コラム
10:35:33.038 [main] DEBUG io.github.longfish801 - para call
10:35:33.089 [main] DEBUG io.github.longfish801 - line call
10:35:33.153 [main] DEBUG io.github.longfish801 - text call: # slice
10:35:33.208 [main] DEBUG io.github.longfish801 - line call
10:35:33.264 [main] DEBUG io.github.longfish801 - text call: # call 範囲指定
10:35:33.315 [main] DEBUG io.github.longfish801 - line call
10:35:33.374 [main] DEBUG io.github.longfish801 - text call: #-combi #先頭と末尾に追記
10:35:33.427 [main] DEBUG io.github.longfish801 - para call
10:35:33.481 [main] DEBUG io.github.longfish801 - line call
10:35:33.539 [main] DEBUG io.github.longfish801 - text call: ## map
10:35:33.605 [main] DEBUG io.github.longfish801 - line call
10:35:33.662 [main] DEBUG io.github.longfish801 - text call: # args
10:35:33.714 [main] DEBUG io.github.longfish801 - line call
10:35:33.771 [main] DEBUG io.github.longfish801 - text call: 	List<String> lines
10:35:33.824 [main] DEBUG io.github.longfish801 - line call
10:35:33.880 [main] DEBUG io.github.longfish801 - text call: # closure 先頭と末尾に追記
10:35:33.934 [main] DEBUG io.github.longfish801 - line call
10:35:33.992 [main] DEBUG io.github.longfish801 - text call: 	if (config.'call#範囲指定'.idx == 0) lines.add(0, '--- ここから ---');
10:35:34.043 [main] DEBUG io.github.longfish801 - line call
10:35:34.100 [main] DEBUG io.github.longfish801 - text call: 	if (config.'call#範囲指定'.isLast) lines << '--- ここまで ---';
10:35:34.166 [main] DEBUG io.github.longfish801 - line call
10:35:34.223 [main] DEBUG io.github.longfish801 - text call: 	return lines;
10:35:34.275 [main] DEBUG io.github.longfish801 - para call
10:35:34.327 [main] DEBUG io.github.longfish801 - line call
10:35:34.384 [main] DEBUG io.github.longfish801 - text call: 　各タグの処理は並列実行されます。
10:35:34.435 [main] DEBUG io.github.longfish801 - line call
10:35:34.490 [main] DEBUG io.github.longfish801 - text call: 　このため、たとえば初めのほうのタグで configに設定した値が、必ずしも後のほうのタグで参照できるとは限らないため注意してください。
10:35:34.540 [main] DEBUG io.github.longfish801 - para call
10:35:34.591 [main] DEBUG io.github.longfish801 - line call
10:35:34.654 [main] DEBUG io.github.longfish801 - text call: 以上
10:35:34.769 [main] DEBUG io.github.longfish801 - para call
10:35:34.825 [main] DEBUG io.github.longfish801 - line call
10:35:34.880 [main] DEBUG io.github.longfish801 - text call: WashScr記法
10:35:34.986 [main] DEBUG io.github.longfish801 - para call
10:35:35.039 [main] DEBUG io.github.longfish801 - line call
10:35:35.094 [main] DEBUG io.github.longfish801 - text call: 概要
10:35:35.145 [main] DEBUG io.github.longfish801 - para call
10:35:35.199 [main] DEBUG io.github.longfish801 - line call
10:35:35.255 [main] DEBUG io.github.longfish801 - text call: 構成
10:35:35.307 [main] DEBUG io.github.longfish801 - para call
10:35:35.376 [main] DEBUG io.github.longfish801 - line call
10:35:35.432 [main] DEBUG io.github.longfish801 - text call: 範囲指定タグ
10:35:35.488 [main] DEBUG io.github.longfish801 - para call
10:35:35.544 [main] DEBUG io.github.longfish801 - line call
10:35:35.601 [main] DEBUG io.github.longfish801 - text call: sliceタグ
10:35:35.652 [main] DEBUG io.github.longfish801 - para call
10:35:35.707 [main] DEBUG io.github.longfish801 - line call
10:35:35.763 [main] DEBUG io.github.longfish801 - text call: betweenタグ
10:35:35.815 [main] DEBUG io.github.longfish801 - para call
10:35:35.870 [main] DEBUG io.github.longfish801 - line call
10:35:35.926 [main] DEBUG io.github.longfish801 - text call: 処理タグ
10:35:35.992 [main] DEBUG io.github.longfish801 - para call
10:35:36.049 [main] DEBUG io.github.longfish801 - line call
10:35:36.106 [main] DEBUG io.github.longfish801 - text call: replaceタグ
10:35:36.159 [main] DEBUG io.github.longfish801 - para call
10:35:36.213 [main] DEBUG io.github.longfish801 - line call
10:35:36.268 [main] DEBUG io.github.longfish801 - text call: reprexタグ
10:35:36.319 [main] DEBUG io.github.longfish801 - para call
10:35:36.373 [main] DEBUG io.github.longfish801 - line call
10:35:36.429 [main] DEBUG io.github.longfish801 - text call: callタグ
10:35:36.481 [main] DEBUG io.github.longfish801 - para call
10:35:36.536 [main] DEBUG io.github.longfish801 - line call
10:35:36.606 [main] DEBUG io.github.longfish801 - text call: クロージャ呼び出しについて
10:35:36.664 [Thread-99] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行開始 key=washscr#BLtxt文書へ整形
10:35:36.748 [ForkJoinPool-43-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#箇条書き
10:35:36.749 [ForkJoinPool-43-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY reprex#各種置換
10:35:36.793 [ForkJoinPool-44-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY replace#エスケープ
10:35:36.822 [ForkJoinPool-45-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#表
10:35:36.843 [ForkJoinPool-46-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#コラムを整形
10:35:36.866 [ForkJoinPool-47-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#タグ付きコラムを整形
10:35:36.866 [ForkJoinPool-48-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY slice#空白行区切り
10:35:36.866 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【＃タイトル】概要]
10:35:36.866 [ForkJoinPool-48-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#表
10:35:36.866 [ForkJoinPool-48-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#コラム
10:35:36.866 [ForkJoinPool-48-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#BLエスケープ
10:35:36.866 [ForkJoinPool-48-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#タグ付きコラム
10:35:36.888 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■yakumoとは]
10:35:36.949 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＃タイトル】概要]
10:35:36.961 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　yakumoは、特定の書式に従うテキストを構造化、変換するためのライブラリです。, 　名称は、マークアップを主に約物で実現することに由来しています。, 　yakumoにはあらかじめ書式が用意されていますが、それを拡張／改変することもできます。]
10:35:37.000 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】yakumoとは]
10:35:37.005 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　おおまかには事前整形、構造化、加工、テンプレート適用の順序でテキストを変換します。, 　まずテキストを事前整形します。XMLのように階層関係がある、構造化が可能な記法（BLtxt記法）に沿った文書にします。, 　構造化した文書から、各要素を参照して加工し、テンプレートを適用することで目的のテキストを得ます。]
10:35:37.045 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　yakumoは、特定の書式に従うテキストを構造化、変換するためのライブラリです。, 　名称は、マークアップを主に約物で実現することに由来しています。, 　yakumoにはあらかじめ書式が用意されていますが、それを拡張／改変することもできます。]
10:35:37.050 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　テキストは直接 BLtxt記法で記述しても構いませんが、やや煩雑になります。, 　慣用的な表現で記述し、yakumoによって各形式へ変換するほうが省力できます。]
10:35:37.090 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　おおまかには事前整形、構造化、加工、テンプレート適用の順序でテキストを変換します。, 　まずテキストを事前整形します。XMLのように階層関係がある、構造化が可能な記法（BLtxt記法）に沿った文書にします。, 　構造化した文書から、各要素を参照して加工し、テンプレートを適用することで目的のテキストを得ます。]
10:35:37.095 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　yakumoには、デフォルトで慣用的な表現を BLtxt記法へ事前整形するスクリプトが用意されています。, 　詳しくは【リンク：BLtxt変換：convert_bltxt.html】を参照してください。]
10:35:37.132 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　テキストは直接 BLtxt記法で記述しても構いませんが、やや煩雑になります。, 　慣用的な表現で記述し、yakumoによって各形式へ変換するほうが省力できます。]
10:35:37.141 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　yakumoには、デフォルトで BLtxt記法を HTMLへ変換するための設定が用意されています。, 　詳しくは【リンク：HTML変換：convert_bltxt.html】を参照してください。]
10:35:37.180 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　yakumoには、デフォルトで慣用的な表現を BLtxt記法へ事前整形するスクリプトが用意されています。, 　詳しくは【｜リンク：convert_bltxt.html】BLtxt変換【リンク｜】を参照してください。]
10:35:37.185 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■変換に利用するクラス]
10:35:37.224 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　yakumoには、デフォルトで BLtxt記法を HTMLへ変換するための設定が用意されています。, 　詳しくは【｜リンク：convert_bltxt.html】HTML変換【リンク｜】を参照してください。]
10:35:37.229 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　パッケージ io.github.longfish801.yakumo配下に、以下のクラスがあります。]
10:35:37.268 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】変換に利用するクラス]
10:35:37.273 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [－【リンク：YmoScript：ymoscript.html】, 　　→文字列から文字列へ、ひとつの入力ファイルから出力ファイルへの変換を実現します。, －【リンク：YmoDocument：ymodocument.html】, 　　→特定のフォルダ直下に存在するテキストファイルの一括変換を実現します。]
10:35:37.300 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　パッケージ io.github.longfish801.yakumo配下に、以下のクラスがあります。]
10:35:37.317 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■構成]
10:35:37.361 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　yakumoは主に、以下のサブパッケージから構成されています。]
10:35:37.409 [ForkJoinPool-43-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：対象】, 【－対象】, 【リンク：YmoScript：ymoscript.html】, 【対象－】, 【－箇条書き：説明】, 【－説明】, 文字列から文字列へ、ひとつの入力ファイルから出力ファイルへの変換を実現します。, 【説明－】, 【箇条書き－】, 【－対象】, 【リンク：YmoDocument：ymodocument.html】, 【対象－】, 【－箇条書き：説明】, 【－説明】, 特定のフォルダ直下に存在するテキストファイルの一括変換を実現します。, 【説明－】, 【箇条書き－】, 【箇条書き－】]
10:35:37.410 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：対象】, 【－対象】, 【｜リンク：ymoscript.html】YmoScript【リンク｜】, 【対象－】, 【－箇条書き：説明】, 【－説明】, 文字列から文字列へ、ひとつの入力ファイルから出力ファイルへの変換を実現します。, 【説明－】, 【箇条書き－】, 【－対象】, 【｜リンク：ymodocument.html】YmoDocument【リンク｜】, 【対象－】, 【－箇条書き：説明】, 【－説明】, 特定のフォルダ直下に存在するテキストファイルの一括変換を実現します。, 【説明－】, 【箇条書き－】, 【箇条書き－】]
10:35:37.411 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [－io.github.longfish801.yakumo.washscr, 　　→WashScr記法の解析／実行のためのパッケージです。, －io.github.longfish801.yakumo.bltxt, 　　→BLtxt記法の解析のためのパッケージです。, －io.github.longfish801.yakumo.clmap, 　　→Clmap記法の参照／実行のためのパッケージです。, －io.github.longfish801.yakumo.tpac, 　　→TPAC文書を扱うためのパッケージです。]
10:35:37.437 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】構成]
10:35:37.457 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　事前整形には washscrを利用します。, 　WashScr記法で記述されたスクリプトにより、テキストに対して置換処理などを施します。, 　これによりテキストを BLtxt文書に整形します。, 　詳細は【リンク：WashScr記法：washscr.html】を参照してください。]
10:35:37.478 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　yakumoは主に、以下のサブパッケージから構成されています。]
10:35:37.497 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　構造化には bltxtを利用します。, 　BLtxt記法で記述された文書は、XMLのように階層関係のある構造を持たせることができます。, 　BLtxt文書を読みこんで、BLtxtインスタンスへ変換します。, 　詳細は【リンク：BLtxt記法：bltxt.html】を参照してください。]
10:35:37.569 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　加工には clmapを利用します。, 　Clmap記法により、複数のクロージャをまとめたクロージャマップを定義できます。, 　BLtxtインスタンスをクロージャで加工します。, 　詳細は【リンク：Clmap記法：clmap.html】を参照してください。]
10:35:37.621 [ForkJoinPool-43-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：対象】, 【－対象】, io.github.longfish801.yakumo.washscr, 【対象－】, 【－箇条書き：説明】, 【－説明】, WashScr記法の解析／実行のためのパッケージです。, 【説明－】, 【箇条書き－】, 【－対象】, io.github.longfish801.yakumo.bltxt, 【対象－】, 【－箇条書き：説明】, 【－説明】, BLtxt記法の解析のためのパッケージです。, 【説明－】, 【箇条書き－】, 【－対象】, io.github.longfish801.yakumo.clmap, 【対象－】, 【－箇条書き：説明】, 【－説明】, Clmap記法の参照／実行のためのパッケージです。, 【説明－】, 【箇条書き－】, 【－対象】, io.github.longfish801.yakumo.tpac, 【対象－】, 【－箇条書き：説明】, 【－説明】, TPAC文書を扱うためのパッケージです。, 【説明－】, 【箇条書き－】, 【箇条書き－】]
10:35:37.623 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　加工した結果をテンプレートに適用することで、目的のテキストを得ます。, 　テンプレートへの適用には groovy.text.SimpleTemplateEngineを利用します。]
10:35:37.623 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：対象】, 【－対象】, io.github.longfish801.yakumo.washscr, 【対象－】, 【－箇条書き：説明】, 【－説明】, WashScr記法の解析／実行のためのパッケージです。, 【説明－】, 【箇条書き－】, 【－対象】, io.github.longfish801.yakumo.bltxt, 【対象－】, 【－箇条書き：説明】, 【－説明】, BLtxt記法の解析のためのパッケージです。, 【説明－】, 【箇条書き－】, 【－対象】, io.github.longfish801.yakumo.clmap, 【対象－】, 【－箇条書き：説明】, 【－説明】, Clmap記法の参照／実行のためのパッケージです。, 【説明－】, 【箇条書き－】, 【－対象】, io.github.longfish801.yakumo.tpac, 【対象－】, 【－箇条書き：説明】, 【－説明】, TPAC文書を扱うためのパッケージです。, 【説明－】, 【箇条書き－】, 【箇条書き－】]
10:35:37.650 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　事前整形には washscrを利用します。, 　WashScr記法で記述されたスクリプトにより、テキストに対して置換処理などを施します。, 　これによりテキストを BLtxt文書に整形します。, 　詳細は【｜リンク：washscr.html】WashScr記法【リンク｜】を参照してください。]
10:35:37.670 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　tpacは、TPAC記法を解析するためのライブラリです。, 　WashScr文書や Clmap文書は TPAC記法をベースとしています。, 　詳細は【リンク：TPAC記法：tpac.html】を参照してください。]
10:35:37.691 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　構造化には bltxtを利用します。, 　BLtxt記法で記述された文書は、XMLのように階層関係のある構造を持たせることができます。, 　BLtxt文書を読みこんで、BLtxtインスタンスへ変換します。, 　詳細は【｜リンク：bltxt.html】BLtxt記法【リンク｜】を参照してください。]
10:35:37.710 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [以上]
10:35:37.732 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　加工には clmapを利用します。, 　Clmap記法により、複数のクロージャをまとめたクロージャマップを定義できます。, 　BLtxtインスタンスをクロージャで加工します。, 　詳細は【｜リンク：clmap.html】Clmap記法【リンク｜】を参照してください。]
10:35:37.763 [ForkJoinPool-48-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 slice#空白行区切り
10:35:37.770 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　加工した結果をテンプレートに適用することで、目的のテキストを得ます。, 　テンプレートへの適用には groovy.text.SimpleTemplateEngineを利用します。]
10:35:37.794 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　tpacは、TPAC記法を解析するためのライブラリです。, 　WashScr文書や Clmap文書は TPAC記法をベースとしています。, 　詳細は【｜リンク：tpac.html】TPAC記法【リンク｜】を参照してください。]
10:35:37.817 [ForkJoinPool-43-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#箇条書き
10:35:37.817 [ForkJoinPool-43-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#箇条書き
10:35:37.817 [ForkJoinPool-43-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#箇条書き
10:35:37.817 [ForkJoinPool-43-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[以上]
10:35:37.817 [ForkJoinPool-43-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast reprex#各種置換
10:35:37.817 [ForkJoinPool-43-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate reprex#各種置換
10:35:37.817 [ForkJoinPool-43-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY reprex#各種置換
10:35:37.819 [ForkJoinPool-48-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY slice#空白行区切り
10:35:37.819 [ForkJoinPool-48-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#BLエスケープ
10:35:37.819 [ForkJoinPool-44-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast replace#エスケープ
10:35:37.819 [ForkJoinPool-44-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate replace#エスケープ
10:35:37.819 [ForkJoinPool-44-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY replace#エスケープ
10:35:37.820 [ForkJoinPool-48-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#BLエスケープ
10:35:37.820 [ForkJoinPool-48-worker-2] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#表
10:35:37.820 [ForkJoinPool-45-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#表
10:35:37.820 [ForkJoinPool-45-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#表
10:35:37.821 [ForkJoinPool-45-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#表
10:35:37.821 [ForkJoinPool-48-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#表
10:35:37.821 [ForkJoinPool-48-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#コラム
10:35:37.821 [ForkJoinPool-46-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#コラムを整形
10:35:37.821 [ForkJoinPool-46-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#コラムを整形
10:35:37.821 [ForkJoinPool-46-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#コラムを整形
10:35:37.822 [ForkJoinPool-48-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#コラム
10:35:37.822 [ForkJoinPool-48-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#タグ付きコラム
10:35:37.822 [ForkJoinPool-47-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#タグ付きコラムを整形
10:35:37.822 [ForkJoinPool-47-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#タグ付きコラムを整形
10:35:37.822 [ForkJoinPool-47-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#タグ付きコラムを整形
10:35:37.823 [ForkJoinPool-48-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#タグ付きコラム
10:35:37.832 [Thread-99] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行終了 key=washscr#BLtxt文書へ整形
10:35:37.840 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：meta タイトル
10:35:37.840 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.841 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:35:37.841 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.841 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.841 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.842 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.842 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.842 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:35:37.842 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.843 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:35:37.843 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:35:37.843 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.843 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.843 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:37.843 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:35:37.843 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.843 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:35:37.844 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:37.844 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:35:37.844 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.844 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:35:37.844 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.844 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:35:37.844 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:37.844 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:35:37.844 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.845 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:35:37.845 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.845 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.845 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:37.845 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:35:37.845 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.845 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:37.846 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:35:37.846 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.846 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:35:37.846 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.846 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:37.846 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:35:37.846 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.846 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:35:37.846 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.847 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:37.847 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:35:37.847 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.847 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:35:37.847 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.847 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:37.847 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:35:37.847 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.848 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.848 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:35:37.848 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.849 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:35:37.849 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.849 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:35:37.850 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.850 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.850 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:35:37.850 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:37.997 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:38.065 [main] DEBUG io.github.longfish801 - para call
10:35:38.116 [main] DEBUG io.github.longfish801 - line call
10:35:38.176 [main] DEBUG io.github.longfish801 - text call: yakumoとは
10:35:38.228 [main] DEBUG io.github.longfish801 - para call
10:35:38.280 [main] DEBUG io.github.longfish801 - line call
10:35:38.335 [main] DEBUG io.github.longfish801 - text call: 　yakumoは、特定の書式に従うテキストを構造化、変換するためのライブラリです。
10:35:38.385 [main] DEBUG io.github.longfish801 - line call
10:35:38.440 [main] DEBUG io.github.longfish801 - text call: 　名称は、マークアップを主に約物で実現することに由来しています。
10:35:38.491 [main] DEBUG io.github.longfish801 - line call
10:35:38.546 [main] DEBUG io.github.longfish801 - text call: 　yakumoにはあらかじめ書式が用意されていますが、それを拡張／改変することもできます。
10:35:38.597 [main] DEBUG io.github.longfish801 - para call
10:35:38.664 [main] DEBUG io.github.longfish801 - line call
10:35:38.725 [main] DEBUG io.github.longfish801 - text call: 　おおまかには事前整形、構造化、加工、テンプレート適用の順序でテキストを変換します。
10:35:38.777 [main] DEBUG io.github.longfish801 - line call
10:35:38.832 [main] DEBUG io.github.longfish801 - text call: 　まずテキストを事前整形します。XMLのように階層関係がある、構造化が可能な記法（BLtxt記法）に沿った文書にします。
10:35:38.882 [main] DEBUG io.github.longfish801 - line call
10:35:38.938 [main] DEBUG io.github.longfish801 - text call: 　構造化した文書から、各要素を参照して加工し、テンプレートを適用することで目的のテキストを得ます。
10:35:38.988 [main] DEBUG io.github.longfish801 - para call
10:35:39.039 [main] DEBUG io.github.longfish801 - line call
10:35:39.094 [main] DEBUG io.github.longfish801 - text call: 　テキストは直接 BLtxt記法で記述しても構いませんが、やや煩雑になります。
10:35:39.146 [main] DEBUG io.github.longfish801 - line call
10:35:39.202 [main] DEBUG io.github.longfish801 - text call: 　慣用的な表現で記述し、yakumoによって各形式へ変換するほうが省力できます。
10:35:39.269 [main] DEBUG io.github.longfish801 - para call
10:35:39.321 [main] DEBUG io.github.longfish801 - line call
10:35:39.376 [main] DEBUG io.github.longfish801 - text call: 　yakumoには、デフォルトで慣用的な表現を BLtxt記法へ事前整形するスクリプトが用意されています。
10:35:39.427 [main] DEBUG io.github.longfish801 - line call
10:35:39.481 [main] DEBUG io.github.longfish801 - text call: 　詳しくは
10:35:39.533 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:35:39.590 [main] DEBUG io.github.longfish801 - text call: BLtxt変換
10:35:39.643 [main] DEBUG io.github.longfish801 - text call: を参照してください。
10:35:39.695 [main] DEBUG io.github.longfish801 - para call
10:35:39.746 [main] DEBUG io.github.longfish801 - line call
10:35:39.817 [main] DEBUG io.github.longfish801 - text call: 　yakumoには、デフォルトで BLtxt記法を HTMLへ変換するための設定が用意されています。
10:35:39.868 [main] DEBUG io.github.longfish801 - line call
10:35:39.924 [main] DEBUG io.github.longfish801 - text call: 　詳しくは
10:35:39.976 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:35:40.033 [main] DEBUG io.github.longfish801 - text call: HTML変換
10:35:40.087 [main] DEBUG io.github.longfish801 - text call: を参照してください。
10:35:40.142 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:40.195 [main] DEBUG io.github.longfish801 - para call
10:35:40.247 [main] DEBUG io.github.longfish801 - line call
10:35:40.303 [main] DEBUG io.github.longfish801 - text call: 変換に利用するクラス
10:35:40.354 [main] DEBUG io.github.longfish801 - para call
10:35:40.421 [main] DEBUG io.github.longfish801 - line call
10:35:40.477 [main] DEBUG io.github.longfish801 - text call: 　パッケージ io.github.longfish801.yakumo配下に、以下のクラスがあります。
10:35:40.529 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:40.582 [main] DEBUG io.github.longfish801 - block call: block#対象
10:35:40.636 [main] DEBUG io.github.longfish801 - para call
10:35:40.690 [main] DEBUG io.github.longfish801 - line call
10:35:40.747 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:35:40.808 [main] DEBUG io.github.longfish801 - text call: YmoScript
10:35:40.861 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:40.915 [main] DEBUG io.github.longfish801 - block call: block#説明
10:35:40.969 [main] DEBUG io.github.longfish801 - para call
10:35:41.040 [main] DEBUG io.github.longfish801 - line call
10:35:41.100 [main] DEBUG io.github.longfish801 - text call: 文字列から文字列へ、ひとつの入力ファイルから出力ファイルへの変換を実現します。
10:35:41.153 [main] DEBUG io.github.longfish801 - block call: block#対象
10:35:41.207 [main] DEBUG io.github.longfish801 - para call
10:35:41.260 [main] DEBUG io.github.longfish801 - line call
10:35:41.315 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:35:41.375 [main] DEBUG io.github.longfish801 - text call: YmoDocument
10:35:41.429 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:41.483 [main] DEBUG io.github.longfish801 - block call: block#説明
10:35:41.539 [main] DEBUG io.github.longfish801 - para call
10:35:41.609 [main] DEBUG io.github.longfish801 - line call
10:35:41.670 [main] DEBUG io.github.longfish801 - text call: 特定のフォルダ直下に存在するテキストファイルの一括変換を実現します。
10:35:41.727 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:41.781 [main] DEBUG io.github.longfish801 - para call
10:35:41.832 [main] DEBUG io.github.longfish801 - line call
10:35:41.888 [main] DEBUG io.github.longfish801 - text call: 構成
10:35:41.938 [main] DEBUG io.github.longfish801 - para call
10:35:41.989 [main] DEBUG io.github.longfish801 - line call
10:35:42.044 [main] DEBUG io.github.longfish801 - text call: 　yakumoは主に、以下のサブパッケージから構成されています。
10:35:42.096 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:42.148 [main] DEBUG io.github.longfish801 - block call: block#対象
10:35:42.217 [main] DEBUG io.github.longfish801 - para call
10:35:42.269 [main] DEBUG io.github.longfish801 - line call
10:35:42.328 [main] DEBUG io.github.longfish801 - text call: io.github.longfish801.yakumo.washscr
10:35:42.381 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:42.435 [main] DEBUG io.github.longfish801 - block call: block#説明
10:35:42.490 [main] DEBUG io.github.longfish801 - para call
10:35:42.544 [main] DEBUG io.github.longfish801 - line call
10:35:42.603 [main] DEBUG io.github.longfish801 - text call: WashScr記法の解析／実行のためのパッケージです。
10:35:42.655 [main] DEBUG io.github.longfish801 - block call: block#対象
10:35:42.714 [main] DEBUG io.github.longfish801 - para call
10:35:42.782 [main] DEBUG io.github.longfish801 - line call
10:35:42.841 [main] DEBUG io.github.longfish801 - text call: io.github.longfish801.yakumo.bltxt
10:35:42.897 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:42.958 [main] DEBUG io.github.longfish801 - block call: block#説明
10:35:43.017 [main] DEBUG io.github.longfish801 - para call
10:35:43.074 [main] DEBUG io.github.longfish801 - line call
10:35:43.135 [main] DEBUG io.github.longfish801 - text call: BLtxt記法の解析のためのパッケージです。
10:35:43.187 [main] DEBUG io.github.longfish801 - block call: block#対象
10:35:43.241 [main] DEBUG io.github.longfish801 - para call
10:35:43.295 [main] DEBUG io.github.longfish801 - line call
10:35:43.361 [main] DEBUG io.github.longfish801 - text call: io.github.longfish801.yakumo.clmap
10:35:43.429 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:43.484 [main] DEBUG io.github.longfish801 - block call: block#説明
10:35:43.540 [main] DEBUG io.github.longfish801 - para call
10:35:43.596 [main] DEBUG io.github.longfish801 - line call
10:35:43.657 [main] DEBUG io.github.longfish801 - text call: Clmap記法の参照／実行のためのパッケージです。
10:35:43.709 [main] DEBUG io.github.longfish801 - block call: block#対象
10:35:43.764 [main] DEBUG io.github.longfish801 - para call
10:35:43.818 [main] DEBUG io.github.longfish801 - line call
10:35:43.878 [main] DEBUG io.github.longfish801 - text call: io.github.longfish801.yakumo.tpac
10:35:43.932 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:44.003 [main] DEBUG io.github.longfish801 - block call: block#説明
10:35:44.059 [main] DEBUG io.github.longfish801 - para call
10:35:44.115 [main] DEBUG io.github.longfish801 - line call
10:35:44.176 [main] DEBUG io.github.longfish801 - text call: TPAC文書を扱うためのパッケージです。
10:35:44.227 [main] DEBUG io.github.longfish801 - para call
10:35:44.277 [main] DEBUG io.github.longfish801 - line call
10:35:44.332 [main] DEBUG io.github.longfish801 - text call: 　事前整形には washscrを利用します。
10:35:44.383 [main] DEBUG io.github.longfish801 - line call
10:35:44.437 [main] DEBUG io.github.longfish801 - text call: 　WashScr記法で記述されたスクリプトにより、テキストに対して置換処理などを施します。
10:35:44.488 [main] DEBUG io.github.longfish801 - line call
10:35:44.544 [main] DEBUG io.github.longfish801 - text call: 　これによりテキストを BLtxt文書に整形します。
10:35:44.610 [main] DEBUG io.github.longfish801 - line call
10:35:44.666 [main] DEBUG io.github.longfish801 - text call: 　詳細は
10:35:44.718 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:35:44.776 [main] DEBUG io.github.longfish801 - text call: WashScr記法
10:35:44.831 [main] DEBUG io.github.longfish801 - text call: を参照してください。
10:35:44.881 [main] DEBUG io.github.longfish801 - para call
10:35:44.933 [main] DEBUG io.github.longfish801 - line call
10:35:44.989 [main] DEBUG io.github.longfish801 - text call: 　構造化には bltxtを利用します。
10:35:45.040 [main] DEBUG io.github.longfish801 - line call
10:35:45.096 [main] DEBUG io.github.longfish801 - text call: 　BLtxt記法で記述された文書は、XMLのように階層関係のある構造を持たせることができます。
10:35:45.163 [main] DEBUG io.github.longfish801 - line call
10:35:45.218 [main] DEBUG io.github.longfish801 - text call: 　BLtxt文書を読みこんで、BLtxtインスタンスへ変換します。
10:35:45.268 [main] DEBUG io.github.longfish801 - line call
10:35:45.323 [main] DEBUG io.github.longfish801 - text call: 　詳細は
10:35:45.375 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:35:45.432 [main] DEBUG io.github.longfish801 - text call: BLtxt記法
10:35:45.486 [main] DEBUG io.github.longfish801 - text call: を参照してください。
10:35:45.536 [main] DEBUG io.github.longfish801 - para call
10:35:45.588 [main] DEBUG io.github.longfish801 - line call
10:35:45.643 [main] DEBUG io.github.longfish801 - text call: 　加工には clmapを利用します。
10:35:45.694 [main] DEBUG io.github.longfish801 - line call
10:35:45.765 [main] DEBUG io.github.longfish801 - text call: 　Clmap記法により、複数のクロージャをまとめたクロージャマップを定義できます。
10:35:45.816 [main] DEBUG io.github.longfish801 - line call
10:35:45.871 [main] DEBUG io.github.longfish801 - text call: 　BLtxtインスタンスをクロージャで加工します。
10:35:45.922 [main] DEBUG io.github.longfish801 - line call
10:35:45.977 [main] DEBUG io.github.longfish801 - text call: 　詳細は
10:35:46.030 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:35:46.087 [main] DEBUG io.github.longfish801 - text call: Clmap記法
10:35:46.141 [main] DEBUG io.github.longfish801 - text call: を参照してください。
10:35:46.193 [main] DEBUG io.github.longfish801 - para call
10:35:46.245 [main] DEBUG io.github.longfish801 - line call
10:35:46.300 [main] DEBUG io.github.longfish801 - text call: 　加工した結果をテンプレートに適用することで、目的のテキストを得ます。
10:35:46.366 [main] DEBUG io.github.longfish801 - line call
10:35:46.421 [main] DEBUG io.github.longfish801 - text call: 　テンプレートへの適用には groovy.text.SimpleTemplateEngineを利用します。
10:35:46.472 [main] DEBUG io.github.longfish801 - para call
10:35:46.524 [main] DEBUG io.github.longfish801 - line call
10:35:46.580 [main] DEBUG io.github.longfish801 - text call: 　tpacは、TPAC記法を解析するためのライブラリです。
10:35:46.631 [main] DEBUG io.github.longfish801 - line call
10:35:46.686 [main] DEBUG io.github.longfish801 - text call: 　WashScr文書や Clmap文書は TPAC記法をベースとしています。
10:35:46.737 [main] DEBUG io.github.longfish801 - line call
10:35:46.791 [main] DEBUG io.github.longfish801 - text call: 　詳細は
10:35:46.842 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:35:46.899 [main] DEBUG io.github.longfish801 - text call: TPAC記法
10:35:46.968 [main] DEBUG io.github.longfish801 - text call: を参照してください。
10:35:47.021 [main] DEBUG io.github.longfish801 - para call
10:35:47.073 [main] DEBUG io.github.longfish801 - line call
10:35:47.128 [main] DEBUG io.github.longfish801 - text call: 以上
10:35:47.229 [main] DEBUG io.github.longfish801 - para call
10:35:47.283 [main] DEBUG io.github.longfish801 - line call
10:35:47.338 [main] DEBUG io.github.longfish801 - text call: 概要
10:35:47.444 [main] DEBUG io.github.longfish801 - para call
10:35:47.498 [main] DEBUG io.github.longfish801 - line call
10:35:47.570 [main] DEBUG io.github.longfish801 - text call: yakumoとは
10:35:47.623 [main] DEBUG io.github.longfish801 - para call
10:35:47.677 [main] DEBUG io.github.longfish801 - line call
10:35:47.734 [main] DEBUG io.github.longfish801 - text call: 変換に利用するクラス
10:35:47.786 [main] DEBUG io.github.longfish801 - para call
10:35:47.839 [main] DEBUG io.github.longfish801 - line call
10:35:47.895 [main] DEBUG io.github.longfish801 - text call: 構成
10:35:47.953 [Thread-113] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行開始 key=washscr#BLtxt文書へ整形
10:35:48.035 [ForkJoinPool-49-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#箇条書き
10:35:48.035 [ForkJoinPool-49-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY reprex#各種置換
10:35:48.094 [ForkJoinPool-50-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY replace#エスケープ
10:35:48.124 [ForkJoinPool-51-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#表
10:35:48.146 [ForkJoinPool-52-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#コラムを整形
10:35:48.169 [ForkJoinPool-53-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#タグ付きコラムを整形
10:35:48.169 [ForkJoinPool-54-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY slice#空白行区切り
10:35:48.170 [ForkJoinPool-54-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#BLエスケープ
10:35:48.170 [ForkJoinPool-54-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#表
10:35:48.170 [ForkJoinPool-54-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#タグ付きコラム
10:35:48.170 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【＃タイトル】YmoDocument]
10:35:48.170 [ForkJoinPool-54-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#コラム
10:35:48.192 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■YmoDocumentとは]
10:35:48.231 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＃タイトル】YmoDocument]
10:35:48.236 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　【リンク：YmoDocument：/yakumo/groovydoc/io/github/longfish801/yakumo/YmoDocument.html】は、特定のフォルダ直下に存在するテキストファイルの一括変換を実現します。]
10:35:48.276 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】YmoDocumentとは]
10:35:48.280 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■サンプル]
10:35:48.319 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　【｜リンク：/yakumo/groovydoc/io/github/longfish801/yakumo/YmoDocument.html】YmoDocument【リンク｜】は、特定のフォルダ直下に存在するテキストファイルの一括変換を実現します。]
10:35:48.325 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　本ドキュメントも YmoDocumentで生成しています。, 　本ドキュメントを生成するサンプルスクリプト（【リンク：ymodocumentSample/sample.groovy】）を以下に示します。]
10:35:48.365 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】サンプル]
10:35:48.370 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- コード -----, @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/'), @Grab('io.github.longfish801:yakumo:0.1.00'), @GrabExclude('org.codehaus.groovy:groovy-all')]
10:35:48.411 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　本ドキュメントも YmoDocumentで生成しています。, 　本ドキュメントを生成するサンプルスクリプト（【｜リンク：ymodocumentSample/sample.groovy】ymodocumentSample/sample.groovy【リンク｜】）を以下に示します。]
10:35:48.416 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [import io.github.longfish801.yakumo.YmoDocument;, import io.github.longfish801.yakumo.YmoConvertException;]
10:35:48.457 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- コード -----, @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/'), @Grab('io.github.longfish801:yakumo:0.1.00'), @GrabExclude('org.codehaus.groovy:groovy-all')]
10:35:48.461 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [try {, 	new YmoDocument(new File('..').getCanonicalFile()).run('_html');, } catch (YmoConvertException exc){, 	println "変換に失敗しました。exc=${exc}";, }, ----- コード -----]
10:35:48.501 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[import io.github.longfish801.yakumo.YmoDocument;, import io.github.longfish801.yakumo.YmoConvertException;]
10:35:48.506 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■変換対象]
10:35:48.547 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[try {, 	new YmoDocument(new File('..').getCanonicalFile()).run('_html');, } catch (YmoConvertException exc){, 	println "変換に失敗しました。exc=${exc}";, }, ----- コード -----]
10:35:48.551 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　テキストファイル（拡張子txt）を変換対象とします。, 　複数のファイル、あるいは複数のテキストファイルが格納されたフォルダを指定します。, 　サブフォルダ内のファイルは変換対象としません。]
10:35:48.592 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】変換対象]
10:35:48.597 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　変換対象のファイルに共通する親フォルダを、変換対象フォルダと呼びます。, 　変換対象フォルダの直下に、変換名と同じ名前のフォルダを作成します。, 　そこに、以下のように変換に必要なファイルを格納します。]
10:35:48.666 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　テキストファイル（拡張子txt）を変換対象とします。, 　複数のファイル、あるいは複数のテキストファイルが格納されたフォルダを指定します。, 　サブフォルダ内のファイルは変換対象としません。]
10:35:48.671 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- 整形済 -----, 変換対象フォルダ, 　├変換対象テキストファイル１（拡張子txt）, 　├変換対象テキストファイル２（拡張子txt）, 　├ …, 　├変換対象テキストファイルｎ（拡張子txt）, 　└設定フォルダ（変換名）, 　　　├変換スクリプト（ymoscript.groovy）, 　　　├Washスクリプト格納フォルダ（washscr）, 　　　│　├Washスクリプト１（拡張子tpac）, 　　　│　├Washスクリプト２（拡張子tpac）, 　　　│　├ …, 　　　│　└Washスクリプトｎ（拡張子tpac）, 　　　├クロージャマップ格納フォルダ（clmap）, 　　　│　├クロージャマップ１（拡張子tpac）, 　　　│　├クロージャマップ２（拡張子tpac）, 　　　│　├ …, 　　　│　└クロージャマップｎ（拡張子tpac）, 　　　├テンプレート格納フォルダ（template）, 　　　│　├テンプレート１, 　　　│　├テンプレート２, 　　　│　├ …, 　　　│　└テンプレートｎ, 　　　├メタ定義格納フォルダ（meta）, 　　　│　├メタ定義ファイル１（拡張子txt）, 　　　│　├メタ定義ファイル２（拡張子txt）, 　　　│　├ …, 　　　│　└メタ定義ファイルｎ（拡張子txt）, 　　　└固定ファイル格納フォルダ（asset）, 　　　　　├固定ファイル１, 　　　　　├固定ファイル２, 　　　　　├ …, 　　　　　└固定ファイルｎ, ----- 整形済 -----]
10:35:48.709 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　出力フォルダや、固定ファイルのコピー方法などは変換スクリプトにて設定します。, 　変換スクリプトには以下のバインド変数を使用できます。]
10:35:48.731 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　変換対象のファイルに共通する親フォルダを、変換対象フォルダと呼びます。, 　変換対象フォルダの直下に、変換名と同じ名前のフォルダを作成します。, 　そこに、以下のように変換に必要なファイルを格納します。]
10:35:48.738 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [－ymoDocument, 　　→YmoDocumentインスタンスです。, －engine, 　　→ConvertEngineインスタンスです。, －assetHandler, 　　→AssetHandlerインスタンスです。, －conversionName, 　　→変換名です。, －targetDir, 　　→変換対象フォルダです。, －conversionDir, 　　→設定フォルダです。]
10:35:48.774 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- 整形済 -----, 変換対象フォルダ, 　├変換対象テキストファイル１（拡張子txt）, 　├変換対象テキストファイル２（拡張子txt）, 　├ …, 　├変換対象テキストファイルｎ（拡張子txt）, 　└設定フォルダ（変換名）, 　　　├変換スクリプト（ymoscript.groovy）, 　　　├Washスクリプト格納フォルダ（washscr）, 　　　│　├Washスクリプト１（拡張子tpac）, 　　　│　├Washスクリプト２（拡張子tpac）, 　　　│　├ …, 　　　│　└Washスクリプトｎ（拡張子tpac）, 　　　├クロージャマップ格納フォルダ（clmap）, 　　　│　├クロージャマップ１（拡張子tpac）, 　　　│　├クロージャマップ２（拡張子tpac）, 　　　│　├ …, 　　　│　└クロージャマップｎ（拡張子tpac）, 　　　├テンプレート格納フォルダ（template）, 　　　│　├テンプレート１, 　　　│　├テンプレート２, 　　　│　├ …, 　　　│　└テンプレートｎ, 　　　├メタ定義格納フォルダ（meta）, 　　　│　├メタ定義ファイル１（拡張子txt）, 　　　│　├メタ定義ファイル２（拡張子txt）, 　　　│　├ …, 　　　│　└メタ定義ファイルｎ（拡張子txt）, 　　　└固定ファイル格納フォルダ（asset）, 　　　　　├固定ファイル１, 　　　　　├固定ファイル２, 　　　　　├ …, 　　　　　└固定ファイルｎ, ----- 整形済 -----]
10:35:48.779 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　適用するテンプレートは以下のとおり決定します。]
10:35:48.813 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　出力フォルダや、固定ファイルのコピー方法などは変換スクリプトにて設定します。, 　変換スクリプトには以下のバインド変数を使用できます。]
10:35:48.821 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [・変換対象のファイルと名前が一致するテンプレート（拡張子は除きます）。, ・変換名と名前が一致するテンプレート（デフォルト）。]
10:35:48.859 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [以上]
10:35:48.908 [ForkJoinPool-54-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 slice#空白行区切り
10:35:48.915 [ForkJoinPool-49-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：対象】, 【－対象】, ymoDocument, 【対象－】, 【－箇条書き：説明】, 【－説明】, YmoDocumentインスタンスです。, 【説明－】, 【箇条書き－】, 【－対象】, engine, 【対象－】, 【－箇条書き：説明】, 【－説明】, ConvertEngineインスタンスです。, 【説明－】, 【箇条書き－】, 【－対象】, assetHandler, 【対象－】, 【－箇条書き：説明】, 【－説明】, AssetHandlerインスタンスです。, 【説明－】, 【箇条書き－】, 【－対象】, conversionName, 【対象－】, 【－箇条書き：説明】, 【－説明】, 変換名です。, 【説明－】, 【箇条書き－】, 【－対象】, targetDir, 【対象－】, 【－箇条書き：説明】, 【－説明】, 変換対象フォルダです。, 【説明－】, 【箇条書き－】, 【－対象】, conversionDir, 【対象－】, 【－箇条書き：説明】, 【－説明】, 設定フォルダです。, 【説明－】, 【箇条書き－】, 【箇条書き－】]
10:35:48.919 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：対象】, 【－対象】, ymoDocument, 【対象－】, 【－箇条書き：説明】, 【－説明】, YmoDocumentインスタンスです。, 【説明－】, 【箇条書き－】, 【－対象】, engine, 【対象－】, 【－箇条書き：説明】, 【－説明】, ConvertEngineインスタンスです。, 【説明－】, 【箇条書き－】, 【－対象】, assetHandler, 【対象－】, 【－箇条書き：説明】, 【－説明】, AssetHandlerインスタンスです。, 【説明－】, 【箇条書き－】, 【－対象】, conversionName, 【対象－】, 【－箇条書き：説明】, 【－説明】, 変換名です。, 【説明－】, 【箇条書き－】, 【－対象】, targetDir, 【対象－】, 【－箇条書き：説明】, 【－説明】, 変換対象フォルダです。, 【説明－】, 【箇条書き－】, 【－対象】, conversionDir, 【対象－】, 【－箇条書き：説明】, 【－説明】, 設定フォルダです。, 【説明－】, 【箇条書き－】, 【箇条書き－】]
10:35:48.940 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　適用するテンプレートは以下のとおり決定します。]
10:35:49.009 [ForkJoinPool-49-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#箇条書き :[【－箇条書き：順序なし】, 【－項目】, 変換対象のファイルと名前が一致するテンプレート（拡張子は除きます）。, 【項目－】, 【－項目】, 変換名と名前が一致するテンプレート（デフォルト）。, 【項目－】, 【箇条書き－】]
10:35:49.009 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【－箇条書き：順序なし】, 【－項目】, 変換対象のファイルと名前が一致するテンプレート（拡張子は除きます）。, 【項目－】, 【－項目】, 変換名と名前が一致するテンプレート（デフォルト）。, 【項目－】, 【箇条書き－】]
10:35:49.033 [ForkJoinPool-49-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#箇条書き
10:35:49.033 [ForkJoinPool-49-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#箇条書き
10:35:49.033 [ForkJoinPool-49-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#箇条書き
10:35:49.033 [ForkJoinPool-49-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[以上]
10:35:49.034 [ForkJoinPool-49-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast reprex#各種置換
10:35:49.034 [ForkJoinPool-49-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate reprex#各種置換
10:35:49.034 [ForkJoinPool-49-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY reprex#各種置換
10:35:49.035 [ForkJoinPool-54-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY slice#空白行区切り
10:35:49.035 [ForkJoinPool-54-worker-2] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#BLエスケープ
10:35:49.035 [ForkJoinPool-50-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast replace#エスケープ
10:35:49.035 [ForkJoinPool-50-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate replace#エスケープ
10:35:49.035 [ForkJoinPool-50-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY replace#エスケープ
10:35:49.036 [ForkJoinPool-54-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#BLエスケープ
10:35:49.036 [ForkJoinPool-54-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#表
10:35:49.037 [ForkJoinPool-51-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#表
10:35:49.037 [ForkJoinPool-51-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#表
10:35:49.037 [ForkJoinPool-51-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#表
10:35:49.037 [ForkJoinPool-54-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#表
10:35:49.038 [ForkJoinPool-54-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#コラム
10:35:49.038 [ForkJoinPool-52-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#コラムを整形
10:35:49.038 [ForkJoinPool-52-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#コラムを整形
10:35:49.038 [ForkJoinPool-52-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#コラムを整形
10:35:49.039 [ForkJoinPool-54-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#コラム
10:35:49.039 [ForkJoinPool-54-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- コード -----, @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/'), @Grab('io.github.longfish801:yakumo:0.1.00'), @GrabExclude('org.codehaus.groovy:groovy-all'), , import io.github.longfish801.yakumo.YmoDocument;, import io.github.longfish801.yakumo.YmoConvertException;, , try {, 	new YmoDocument(new File('..').getCanonicalFile()).run('_html');, } catch (YmoConvertException exc){, 	println "変換に失敗しました。exc=${exc}";, }, ----- コード -----]
10:35:49.040 [ForkJoinPool-54-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- 整形済 -----, 変換対象フォルダ, 　├変換対象テキストファイル１（拡張子txt）, 　├変換対象テキストファイル２（拡張子txt）, 　├ …, 　├変換対象テキストファイルｎ（拡張子txt）, 　└設定フォルダ（変換名）, 　　　├変換スクリプト（ymoscript.groovy）, 　　　├Washスクリプト格納フォルダ（washscr）, 　　　│　├Washスクリプト１（拡張子tpac）, 　　　│　├Washスクリプト２（拡張子tpac）, 　　　│　├ …, 　　　│　└Washスクリプトｎ（拡張子tpac）, 　　　├クロージャマップ格納フォルダ（clmap）, 　　　│　├クロージャマップ１（拡張子tpac）, 　　　│　├クロージャマップ２（拡張子tpac）, 　　　│　├ …, 　　　│　└クロージャマップｎ（拡張子tpac）, 　　　├テンプレート格納フォルダ（template）, 　　　│　├テンプレート１, 　　　│　├テンプレート２, 　　　│　├ …, 　　　│　└テンプレートｎ, 　　　├メタ定義格納フォルダ（meta）, 　　　│　├メタ定義ファイル１（拡張子txt）, 　　　│　├メタ定義ファイル２（拡張子txt）, 　　　│　├ …, 　　　│　└メタ定義ファイルｎ（拡張子txt）, 　　　└固定ファイル格納フォルダ（asset）, 　　　　　├固定ファイル１, 　　　　　├固定ファイル２, 　　　　　├ …, 　　　　　└固定ファイルｎ, ----- 整形済 -----]
10:35:49.040 [ForkJoinPool-54-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#タグ付きコラム
10:35:49.062 [ForkJoinPool-53-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－コード】, @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/'), @Grab('io.github.longfish801:yakumo:0.1.00'), @GrabExclude('org.codehaus.groovy:groovy-all'), , import io.github.longfish801.yakumo.YmoDocument;, import io.github.longfish801.yakumo.YmoConvertException;, , try {, 	new YmoDocument(new File('..').getCanonicalFile()).run('_html');, } catch (YmoConvertException exc){, 	println "変換に失敗しました。exc=${exc}";, }, 【コード－】]
10:35:49.084 [ForkJoinPool-53-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－整形済】, 変換対象フォルダ, 　├変換対象テキストファイル１（拡張子txt）, 　├変換対象テキストファイル２（拡張子txt）, 　├ …, 　├変換対象テキストファイルｎ（拡張子txt）, 　└設定フォルダ（変換名）, 　　　├変換スクリプト（ymoscript.groovy）, 　　　├Washスクリプト格納フォルダ（washscr）, 　　　│　├Washスクリプト１（拡張子tpac）, 　　　│　├Washスクリプト２（拡張子tpac）, 　　　│　├ …, 　　　│　└Washスクリプトｎ（拡張子tpac）, 　　　├クロージャマップ格納フォルダ（clmap）, 　　　│　├クロージャマップ１（拡張子tpac）, 　　　│　├クロージャマップ２（拡張子tpac）, 　　　│　├ …, 　　　│　└クロージャマップｎ（拡張子tpac）, 　　　├テンプレート格納フォルダ（template）, 　　　│　├テンプレート１, 　　　│　├テンプレート２, 　　　│　├ …, 　　　│　└テンプレートｎ, 　　　├メタ定義格納フォルダ（meta）, 　　　│　├メタ定義ファイル１（拡張子txt）, 　　　│　├メタ定義ファイル２（拡張子txt）, 　　　│　├ …, 　　　│　└メタ定義ファイルｎ（拡張子txt）, 　　　└固定ファイル格納フォルダ（asset）, 　　　　　├固定ファイル１, 　　　　　├固定ファイル２, 　　　　　├ …, 　　　　　└固定ファイルｎ, 【整形済－】]
10:35:49.084 [ForkJoinPool-53-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#タグ付きコラムを整形
10:35:49.084 [ForkJoinPool-53-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#タグ付きコラムを整形
10:35:49.084 [ForkJoinPool-53-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#タグ付きコラムを整形
10:35:49.085 [ForkJoinPool-54-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#タグ付きコラム
10:35:49.104 [Thread-113] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行終了 key=washscr#BLtxt文書へ整形
10:35:49.106 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：meta タイトル
10:35:49.107 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.107 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:35:49.107 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.107 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.107 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:35:49.108 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:35:49.108 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.108 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.108 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:35:49.108 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block コード
10:35:49.108 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.109 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.109 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.110 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:35:49.110 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.110 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.110 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.111 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 整形済
10:35:49.111 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.114 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.115 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:49.115 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:35:49.115 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.115 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:49.115 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:35:49.115 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.115 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:35:49.116 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.116 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:49.116 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:35:49.116 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.116 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:35:49.116 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.116 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:49.117 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:35:49.117 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.117 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:35:49.117 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.117 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:49.117 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:35:49.117 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.118 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:35:49.118 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.118 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:49.118 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:35:49.118 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.118 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 対象
10:35:49.118 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.118 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:49.119 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 説明
10:35:49.119 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.119 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.119 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 箇条書き
10:35:49.119 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:35:49.119 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.119 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 項目
10:35:49.119 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.120 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:35:49.285 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:49.340 [main] DEBUG io.github.longfish801 - para call
10:35:49.392 [main] DEBUG io.github.longfish801 - line call
10:35:49.450 [main] DEBUG io.github.longfish801 - text call: YmoDocumentとは
10:35:49.503 [main] DEBUG io.github.longfish801 - para call
10:35:49.555 [main] DEBUG io.github.longfish801 - line call
10:35:49.610 [main] DEBUG io.github.longfish801 - text call: 　
10:35:49.663 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:35:49.720 [main] DEBUG io.github.longfish801 - text call: YmoDocument
10:35:49.776 [main] DEBUG io.github.longfish801 - text call: は、特定のフォルダ直下に存在するテキストファイルの一括変換を実現します。
10:35:49.849 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:49.903 [main] DEBUG io.github.longfish801 - para call
10:35:49.956 [main] DEBUG io.github.longfish801 - line call
10:35:50.014 [main] DEBUG io.github.longfish801 - text call: サンプル
10:35:50.065 [main] DEBUG io.github.longfish801 - para call
10:35:50.117 [main] DEBUG io.github.longfish801 - line call
10:35:50.172 [main] DEBUG io.github.longfish801 - text call: 　本ドキュメントも YmoDocumentで生成しています。
10:35:50.223 [main] DEBUG io.github.longfish801 - line call
10:35:50.278 [main] DEBUG io.github.longfish801 - text call: 　本ドキュメントを生成するサンプルスクリプト（
10:35:50.330 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:35:50.387 [main] DEBUG io.github.longfish801 - text call: ymodocumentSample/sample.groovy
10:35:50.457 [main] DEBUG io.github.longfish801 - text call: ）を以下に示します。
10:35:50.508 [main] DEBUG io.github.longfish801 - block call: block#コード
10:35:50.562 [main] DEBUG io.github.longfish801 - para call
10:35:50.613 [main] DEBUG io.github.longfish801 - line call
10:35:50.671 [main] DEBUG io.github.longfish801 - text call: @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/')
10:35:50.722 [main] DEBUG io.github.longfish801 - line call
10:35:50.780 [main] DEBUG io.github.longfish801 - text call: @Grab('io.github.longfish801:yakumo:0.1.00')
10:35:50.831 [main] DEBUG io.github.longfish801 - line call
10:35:50.888 [main] DEBUG io.github.longfish801 - text call: @GrabExclude('org.codehaus.groovy:groovy-all')
10:35:50.941 [main] DEBUG io.github.longfish801 - para call
10:35:51.008 [main] DEBUG io.github.longfish801 - line call
10:35:51.067 [main] DEBUG io.github.longfish801 - text call: import io.github.longfish801.yakumo.YmoDocument;
10:35:51.119 [main] DEBUG io.github.longfish801 - line call
10:35:51.176 [main] DEBUG io.github.longfish801 - text call: import io.github.longfish801.yakumo.YmoConvertException;
10:35:51.230 [main] DEBUG io.github.longfish801 - para call
10:35:51.282 [main] DEBUG io.github.longfish801 - line call
10:35:51.339 [main] DEBUG io.github.longfish801 - text call: try {
10:35:51.391 [main] DEBUG io.github.longfish801 - line call
10:35:51.447 [main] DEBUG io.github.longfish801 - text call: 	new YmoDocument(new File('..').getCanonicalFile()).run('_html');
10:35:51.499 [main] DEBUG io.github.longfish801 - line call
10:35:51.556 [main] DEBUG io.github.longfish801 - text call: } catch (YmoConvertException exc){
10:35:51.623 [main] DEBUG io.github.longfish801 - line call
10:35:51.681 [main] DEBUG io.github.longfish801 - text call: 	println "変換に失敗しました。exc=${exc}";
10:35:51.733 [main] DEBUG io.github.longfish801 - line call
10:35:51.792 [main] DEBUG io.github.longfish801 - text call: }
10:35:51.858 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:35:51.911 [main] DEBUG io.github.longfish801 - para call
10:35:51.963 [main] DEBUG io.github.longfish801 - line call
10:35:52.021 [main] DEBUG io.github.longfish801 - text call: 変換対象
10:35:52.072 [main] DEBUG io.github.longfish801 - para call
10:35:52.124 [main] DEBUG io.github.longfish801 - line call
10:35:52.181 [main] DEBUG io.github.longfish801 - text call: 　テキストファイル（拡張子txt）を変換対象とします。
10:35:52.247 [main] DEBUG io.github.longfish801 - line call
10:35:52.303 [main] DEBUG io.github.longfish801 - text call: 　複数のファイル、あるいは複数のテキストファイルが格納されたフォルダを指定します。
10:35:52.355 [main] DEBUG io.github.longfish801 - line call
10:35:52.410 [main] DEBUG io.github.longfish801 - text call: 　サブフォルダ内のファイルは変換対象としません。
10:35:52.461 [main] DEBUG io.github.longfish801 - para call
10:35:52.512 [main] DEBUG io.github.longfish801 - line call
10:35:52.566 [main] DEBUG io.github.longfish801 - text call: 　変換対象のファイルに共通する親フォルダを、変換対象フォルダと呼びます。
10:35:52.617 [main] DEBUG io.github.longfish801 - line call
10:35:52.673 [main] DEBUG io.github.longfish801 - text call: 　変換対象フォルダの直下に、変換名と同じ名前のフォルダを作成します。
10:35:52.724 [main] DEBUG io.github.longfish801 - line call
10:35:52.795 [main] DEBUG io.github.longfish801 - text call: 　そこに、以下のように変換に必要なファイルを格納します。
10:35:52.848 [main] DEBUG io.github.longfish801 - block call: block#整形済
10:35:52.902 [main] DEBUG io.github.longfish801 - para call
10:35:52.955 [main] DEBUG io.github.longfish801 - line call
10:35:53.012 [main] DEBUG io.github.longfish801 - text call: 変換対象フォルダ
10:35:53.064 [main] DEBUG io.github.longfish801 - line call
10:35:53.121 [main] DEBUG io.github.longfish801 - text call: 　├変換対象テキストファイル１（拡張子txt）
10:35:53.173 [main] DEBUG io.github.longfish801 - line call
10:35:53.230 [main] DEBUG io.github.longfish801 - text call: 　├変換対象テキストファイル２（拡張子txt）
10:35:53.287 [main] DEBUG io.github.longfish801 - line call
10:35:53.345 [main] DEBUG io.github.longfish801 - text call: 　├ …
10:35:53.413 [main] DEBUG io.github.longfish801 - line call
10:35:53.472 [main] DEBUG io.github.longfish801 - text call: 　├変換対象テキストファイルｎ（拡張子txt）
10:35:53.523 [main] DEBUG io.github.longfish801 - line call
10:35:53.582 [main] DEBUG io.github.longfish801 - text call: 　└設定フォルダ（変換名）
10:35:53.634 [main] DEBUG io.github.longfish801 - line call
10:35:53.692 [main] DEBUG io.github.longfish801 - text call: 　　　├変換スクリプト（ymoscript.groovy）
10:35:53.744 [main] DEBUG io.github.longfish801 - line call
10:35:53.802 [main] DEBUG io.github.longfish801 - text call: 　　　├Washスクリプト格納フォルダ（washscr）
10:35:53.853 [main] DEBUG io.github.longfish801 - line call
10:35:53.910 [main] DEBUG io.github.longfish801 - text call: 　　　│　├Washスクリプト１（拡張子tpac）
10:35:53.961 [main] DEBUG io.github.longfish801 - line call
10:35:54.034 [main] DEBUG io.github.longfish801 - text call: 　　　│　├Washスクリプト２（拡張子tpac）
10:35:54.086 [main] DEBUG io.github.longfish801 - line call
10:35:54.143 [main] DEBUG io.github.longfish801 - text call: 　　　│　├ …
10:35:54.195 [main] DEBUG io.github.longfish801 - line call
10:35:54.252 [main] DEBUG io.github.longfish801 - text call: 　　　│　└Washスクリプトｎ（拡張子tpac）
10:35:54.303 [main] DEBUG io.github.longfish801 - line call
10:35:54.361 [main] DEBUG io.github.longfish801 - text call: 　　　├クロージャマップ格納フォルダ（clmap）
10:35:54.412 [main] DEBUG io.github.longfish801 - line call
10:35:54.470 [main] DEBUG io.github.longfish801 - text call: 　　　│　├クロージャマップ１（拡張子tpac）
10:35:54.522 [main] DEBUG io.github.longfish801 - line call
10:35:54.595 [main] DEBUG io.github.longfish801 - text call: 　　　│　├クロージャマップ２（拡張子tpac）
10:35:54.647 [main] DEBUG io.github.longfish801 - line call
10:35:54.705 [main] DEBUG io.github.longfish801 - text call: 　　　│　├ …
10:35:54.762 [main] DEBUG io.github.longfish801 - line call
10:35:54.821 [main] DEBUG io.github.longfish801 - text call: 　　　│　└クロージャマップｎ（拡張子tpac）
10:35:54.872 [main] DEBUG io.github.longfish801 - line call
10:35:54.929 [main] DEBUG io.github.longfish801 - text call: 　　　├テンプレート格納フォルダ（template）
10:35:54.980 [main] DEBUG io.github.longfish801 - line call
10:35:55.038 [main] DEBUG io.github.longfish801 - text call: 　　　│　├テンプレート１
10:35:55.090 [main] DEBUG io.github.longfish801 - line call
10:35:55.162 [main] DEBUG io.github.longfish801 - text call: 　　　│　├テンプレート２
10:35:55.214 [main] DEBUG io.github.longfish801 - line call
10:35:55.271 [main] DEBUG io.github.longfish801 - text call: 　　　│　├ …
10:35:55.323 [main] DEBUG io.github.longfish801 - line call
10:35:55.380 [main] DEBUG io.github.longfish801 - text call: 　　　│　└テンプレートｎ
10:35:55.432 [main] DEBUG io.github.longfish801 - line call
10:35:55.489 [main] DEBUG io.github.longfish801 - text call: 　　　├メタ定義格納フォルダ（meta）
10:35:55.540 [main] DEBUG io.github.longfish801 - line call
10:35:55.598 [main] DEBUG io.github.longfish801 - text call: 　　　│　├メタ定義ファイル１（拡張子txt）
10:35:55.650 [main] DEBUG io.github.longfish801 - line call
10:35:55.708 [main] DEBUG io.github.longfish801 - text call: 　　　│　├メタ定義ファイル２（拡張子txt）
10:35:55.782 [main] DEBUG io.github.longfish801 - line call
10:35:55.845 [main] DEBUG io.github.longfish801 - text call: 　　　│　├ …
10:35:55.898 [main] DEBUG io.github.longfish801 - line call
10:35:55.955 [main] DEBUG io.github.longfish801 - text call: 　　　│　└メタ定義ファイルｎ（拡張子txt）
10:35:56.008 [main] DEBUG io.github.longfish801 - line call
10:35:56.066 [main] DEBUG io.github.longfish801 - text call: 　　　└固定ファイル格納フォルダ（asset）
10:35:56.119 [main] DEBUG io.github.longfish801 - line call
10:35:56.179 [main] DEBUG io.github.longfish801 - text call: 　　　　　├固定ファイル１
10:35:56.232 [main] DEBUG io.github.longfish801 - line call
10:35:56.290 [main] DEBUG io.github.longfish801 - text call: 　　　　　├固定ファイル２
10:35:56.357 [main] DEBUG io.github.longfish801 - line call
10:35:56.415 [main] DEBUG io.github.longfish801 - text call: 　　　　　├ …
10:35:56.469 [main] DEBUG io.github.longfish801 - line call
10:35:56.529 [main] DEBUG io.github.longfish801 - text call: 　　　　　└固定ファイルｎ
10:35:56.581 [main] DEBUG io.github.longfish801 - para call
10:35:56.632 [main] DEBUG io.github.longfish801 - line call
10:35:56.689 [main] DEBUG io.github.longfish801 - text call: 　出力フォルダや、固定ファイルのコピー方法などは変換スクリプトにて設定します。
10:35:56.740 [main] DEBUG io.github.longfish801 - line call
10:35:56.797 [main] DEBUG io.github.longfish801 - text call: 　変換スクリプトには以下のバインド変数を使用できます。
10:35:56.851 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:56.904 [main] DEBUG io.github.longfish801 - block call: block#対象
10:35:56.975 [main] DEBUG io.github.longfish801 - para call
10:35:57.030 [main] DEBUG io.github.longfish801 - line call
10:35:57.091 [main] DEBUG io.github.longfish801 - text call: ymoDocument
10:35:57.146 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:57.201 [main] DEBUG io.github.longfish801 - block call: block#説明
10:35:57.256 [main] DEBUG io.github.longfish801 - para call
10:35:57.312 [main] DEBUG io.github.longfish801 - line call
10:35:57.374 [main] DEBUG io.github.longfish801 - text call: YmoDocumentインスタンスです。
10:35:57.427 [main] DEBUG io.github.longfish801 - block call: block#対象
10:35:57.485 [main] DEBUG io.github.longfish801 - para call
10:35:57.542 [main] DEBUG io.github.longfish801 - line call
10:35:57.617 [main] DEBUG io.github.longfish801 - text call: engine
10:35:57.673 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:57.729 [main] DEBUG io.github.longfish801 - block call: block#説明
10:35:57.785 [main] DEBUG io.github.longfish801 - para call
10:35:57.843 [main] DEBUG io.github.longfish801 - line call
10:35:57.904 [main] DEBUG io.github.longfish801 - text call: ConvertEngineインスタンスです。
10:35:57.956 [main] DEBUG io.github.longfish801 - block call: block#対象
10:35:58.011 [main] DEBUG io.github.longfish801 - para call
10:35:58.065 [main] DEBUG io.github.longfish801 - line call
10:35:58.125 [main] DEBUG io.github.longfish801 - text call: assetHandler
10:35:58.196 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:58.250 [main] DEBUG io.github.longfish801 - block call: block#説明
10:35:58.308 [main] DEBUG io.github.longfish801 - para call
10:35:58.368 [main] DEBUG io.github.longfish801 - line call
10:35:58.431 [main] DEBUG io.github.longfish801 - text call: AssetHandlerインスタンスです。
10:35:58.482 [main] DEBUG io.github.longfish801 - block call: block#対象
10:35:58.537 [main] DEBUG io.github.longfish801 - para call
10:35:58.591 [main] DEBUG io.github.longfish801 - line call
10:35:58.651 [main] DEBUG io.github.longfish801 - text call: conversionName
10:35:58.707 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:58.764 [main] DEBUG io.github.longfish801 - block call: block#説明
10:35:58.835 [main] DEBUG io.github.longfish801 - para call
10:35:58.892 [main] DEBUG io.github.longfish801 - line call
10:35:58.954 [main] DEBUG io.github.longfish801 - text call: 変換名です。
10:35:59.010 [main] DEBUG io.github.longfish801 - block call: block#対象
10:35:59.066 [main] DEBUG io.github.longfish801 - para call
10:35:59.121 [main] DEBUG io.github.longfish801 - line call
10:35:59.181 [main] DEBUG io.github.longfish801 - text call: targetDir
10:35:59.237 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:59.292 [main] DEBUG io.github.longfish801 - block call: block#説明
10:35:59.349 [main] DEBUG io.github.longfish801 - para call
10:35:59.419 [main] DEBUG io.github.longfish801 - line call
10:35:59.480 [main] DEBUG io.github.longfish801 - text call: 変換対象フォルダです。
10:35:59.533 [main] DEBUG io.github.longfish801 - block call: block#対象
10:35:59.588 [main] DEBUG io.github.longfish801 - para call
10:35:59.642 [main] DEBUG io.github.longfish801 - line call
10:35:59.701 [main] DEBUG io.github.longfish801 - text call: conversionDir
10:35:59.755 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:35:59.810 [main] DEBUG io.github.longfish801 - block call: block#説明
10:36:00.360 [main] DEBUG io.github.longfish801 - para call
10:36:00.417 [main] DEBUG io.github.longfish801 - line call
10:36:00.479 [main] DEBUG io.github.longfish801 - text call: 設定フォルダです。
10:36:00.531 [main] DEBUG io.github.longfish801 - para call
10:36:00.582 [main] DEBUG io.github.longfish801 - line call
10:36:00.637 [main] DEBUG io.github.longfish801 - text call: 　適用するテンプレートは以下のとおり決定します。
10:36:00.690 [main] DEBUG io.github.longfish801 - block call: block#箇条書き
10:36:00.743 [main] DEBUG io.github.longfish801 - block call: block#項目
10:36:00.798 [main] DEBUG io.github.longfish801 - para call
10:36:00.853 [main] DEBUG io.github.longfish801 - line call
10:36:00.913 [main] DEBUG io.github.longfish801 - text call: 変換対象のファイルと名前が一致するテンプレート（拡張子は除きます）。
10:36:00.967 [main] DEBUG io.github.longfish801 - block call: block#項目
10:36:01.024 [main] DEBUG io.github.longfish801 - para call
10:36:01.085 [main] DEBUG io.github.longfish801 - line call
10:36:01.145 [main] DEBUG io.github.longfish801 - text call: 変換名と名前が一致するテンプレート（デフォルト）。
10:36:01.199 [main] DEBUG io.github.longfish801 - para call
10:36:01.253 [main] DEBUG io.github.longfish801 - line call
10:36:01.310 [main] DEBUG io.github.longfish801 - text call: 以上
10:36:01.414 [main] DEBUG io.github.longfish801 - para call
10:36:01.469 [main] DEBUG io.github.longfish801 - line call
10:36:01.530 [main] DEBUG io.github.longfish801 - text call: YmoDocument
10:36:01.647 [main] DEBUG io.github.longfish801 - para call
10:36:01.703 [main] DEBUG io.github.longfish801 - line call
10:36:01.759 [main] DEBUG io.github.longfish801 - text call: YmoDocumentとは
10:36:01.820 [main] DEBUG io.github.longfish801 - para call
10:36:01.875 [main] DEBUG io.github.longfish801 - line call
10:36:01.932 [main] DEBUG io.github.longfish801 - text call: サンプル
10:36:01.984 [main] DEBUG io.github.longfish801 - para call
10:36:02.040 [main] DEBUG io.github.longfish801 - line call
10:36:02.097 [main] DEBUG io.github.longfish801 - text call: 変換対象
10:36:02.155 [Thread-127] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行開始 key=washscr#BLtxt文書へ整形
10:36:02.248 [ForkJoinPool-55-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#箇条書き
10:36:02.248 [ForkJoinPool-55-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY reprex#各種置換
10:36:02.294 [ForkJoinPool-56-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY replace#エスケープ
10:36:02.324 [ForkJoinPool-57-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#表
10:36:02.346 [ForkJoinPool-58-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#コラムを整形
10:36:02.377 [ForkJoinPool-59-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY call#タグ付きコラムを整形
10:36:02.377 [ForkJoinPool-60-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY slice#空白行区切り
10:36:02.377 [ForkJoinPool-60-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#BLエスケープ
10:36:02.378 [ForkJoinPool-60-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#表
10:36:02.378 [ForkJoinPool-60-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#タグ付きコラム
10:36:02.378 [ForkJoinPool-60-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - BGN CONVEY between#コラム
10:36:02.378 [ForkJoinPool-60-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [【＃タイトル】YmoScript]
10:36:02.400 [ForkJoinPool-60-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■YmoScriptとは]
10:36:02.425 [ForkJoinPool-60-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　【リンク：YmoScript：/yakumo/groovydoc/io/github/longfish801/yakumo/YmoScript.html】は、リソース上のファイルに記述された設定と DSLに基づき、テキストを変換します。]
10:36:02.459 [ForkJoinPool-55-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＃タイトル】YmoScript]
10:36:02.478 [ForkJoinPool-60-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■サンプル]
10:36:02.499 [ForkJoinPool-55-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】YmoScriptとは]
10:36:02.519 [ForkJoinPool-60-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　変換対象として文字列、あるいはテキストファイルを指定できます。, 　BLtxt記法で記述されている必要があります。, 　もしくは、Washスクリプトによって BLtxt記法に基づくテキストへ整形される必要があります。]
10:36:02.541 [ForkJoinPool-55-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　【｜リンク：/yakumo/groovydoc/io/github/longfish801/yakumo/YmoScript.html】YmoScript【リンク｜】は、リソース上のファイルに記述された設定と DSLに基づき、テキストを変換します。]
10:36:02.561 [ForkJoinPool-60-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [■設定リソース]
10:36:02.582 [ForkJoinPool-55-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】サンプル]
10:36:02.602 [ForkJoinPool-60-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　リソースから参照可能なフォルダに、変換に必要なファイルを格納します。]
10:36:02.611 [ForkJoinPool-55-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　変換対象として文字列、あるいはテキストファイルを指定できます。, 　BLtxt記法で記述されている必要があります。, 　もしくは、Washスクリプトによって BLtxt記法に基づくテキストへ整形される必要があります。]
10:36:02.643 [ForkJoinPool-60-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [----- 整形済 -----, 設定フォルダ（変換名）, 　├Washスクリプト格納フォルダ（washscr）, 　│　├Washスクリプト１（拡張子tpac）, 　│　├Washスクリプト２（拡張子tpac）, 　│　├ …, 　│　└Washスクリプトｎ（拡張子tpac）, 　├クロージャマップ格納フォルダ（clmap）, 　│　├クロージャマップ１（拡張子tpac）, 　│　├クロージャマップ２（拡張子tpac）, 　│　├ …, 　│　└クロージャマップｎ（拡張子tpac）, 　├テンプレート格納フォルダ（template）, 　│　├テンプレート１, 　│　├テンプレート２, 　│　├ …, 　│　└テンプレートｎ, 　├メタ定義格納フォルダ（meta）, 　│　├メタ定義ファイル１（拡張子txt）, 　│　├メタ定義ファイル２（拡張子txt）, 　│　├ …, 　│　└メタ定義ファイルｎ（拡張子txt）, 　└固定ファイル格納フォルダ（asset）, 　　　├固定ファイル１, 　　　├固定ファイル２, 　　　├ …, 　　　└固定ファイルｎ, ----- 整形済 -----]
10:36:02.652 [ForkJoinPool-55-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[【＝見出し：2】設定リソース]
10:36:02.673 [ForkJoinPool-60-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　メタ定義ファイルは、クロージャマップでバインド変数のマップに変換します。, 　メタ定義ファイルが複数ある場合、マップを上書きします。, 　同じキーのバインド変数があれば上書きされることになります。, 　テンプレートにバインド変数を適用するとき、メタ定義ファイルを変換して得たバインド変数のマップも使用します。, 　変換対象の文字列あるいはテキストから得られたバインド変数のマップに、同じキーがあれば上書きされることになります。]
10:36:02.705 [ForkJoinPool-55-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　リソースから参照可能なフォルダに、変換に必要なファイルを格納します。]
10:36:02.725 [ForkJoinPool-60-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　Washスクリプト、クロージャマップは複数格納することができます。, 　ファイル名の順番で参照、blendメソッドで上書きしていきます。, 　ファイル名の順番とは、ファイル名の文字列での昇順です。]
10:36:02.748 [ForkJoinPool-55-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[----- 整形済 -----, 設定フォルダ（変換名）, 　├Washスクリプト格納フォルダ（washscr）, 　│　├Washスクリプト１（拡張子tpac）, 　│　├Washスクリプト２（拡張子tpac）, 　│　├ …, 　│　└Washスクリプトｎ（拡張子tpac）, 　├クロージャマップ格納フォルダ（clmap）, 　│　├クロージャマップ１（拡張子tpac）, 　│　├クロージャマップ２（拡張子tpac）, 　│　├ …, 　│　└クロージャマップｎ（拡張子tpac）, 　├テンプレート格納フォルダ（template）, 　│　├テンプレート１, 　│　├テンプレート２, 　│　├ …, 　│　└テンプレートｎ, 　├メタ定義格納フォルダ（meta）, 　│　├メタ定義ファイル１（拡張子txt）, 　│　├メタ定義ファイル２（拡張子txt）, 　│　├ …, 　│　└メタ定義ファイルｎ（拡張子txt）, 　└固定ファイル格納フォルダ（asset）, 　　　├固定ファイル１, 　　　├固定ファイル２, 　　　├ …, 　　　└固定ファイルｎ, ----- 整形済 -----]
10:36:02.767 [ForkJoinPool-60-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [　同じ名前のテンプレート、固定ファイルが複数ある場合、後から読んだほうで置き換えます。, 　置き換えられたほうは使用されません。]
10:36:02.777 [ForkJoinPool-55-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　メタ定義ファイルは、クロージャマップでバインド変数のマップに変換します。, 　メタ定義ファイルが複数ある場合、マップを上書きします。, 　同じキーのバインド変数があれば上書きされることになります。, 　テンプレートにバインド変数を適用するとき、メタ定義ファイルを変換して得たバインド変数のマップも使用します。, 　変換対象の文字列あるいはテキストから得られたバインド変数のマップに、同じキーがあれば上書きされることになります。]
10:36:02.809 [ForkJoinPool-60-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 slice#空白行区切り: [以上]
10:36:02.818 [ForkJoinPool-55-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　Washスクリプト、クロージャマップは複数格納することができます。, 　ファイル名の順番で参照、blendメソッドで上書きしていきます。, 　ファイル名の順番とは、ファイル名の文字列での昇順です。]
10:36:02.850 [ForkJoinPool-60-worker-1] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 slice#空白行区切り
10:36:02.857 [ForkJoinPool-55-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[　同じ名前のテンプレート、固定ファイルが複数ある場合、後から読んだほうで置き換えます。, 　置き換えられたほうは使用されません。]
10:36:02.882 [ForkJoinPool-55-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#箇条書き
10:36:02.883 [ForkJoinPool-55-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#箇条書き
10:36:02.883 [ForkJoinPool-55-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#箇条書き
10:36:02.883 [ForkJoinPool-55-worker-2] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 reprex#各種置換 :[以上]
10:36:02.883 [ForkJoinPool-55-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast reprex#各種置換
10:36:02.883 [ForkJoinPool-55-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate reprex#各種置換
10:36:02.883 [ForkJoinPool-55-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY reprex#各種置換
10:36:02.885 [ForkJoinPool-60-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY slice#空白行区切り
10:36:02.885 [ForkJoinPool-60-worker-3] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#BLエスケープ
10:36:02.885 [ForkJoinPool-56-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast replace#エスケープ
10:36:02.885 [ForkJoinPool-56-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate replace#エスケープ
10:36:02.885 [ForkJoinPool-56-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY replace#エスケープ
10:36:02.886 [ForkJoinPool-60-worker-3] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#BLエスケープ
10:36:02.886 [ForkJoinPool-60-worker-2] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#表
10:36:02.886 [ForkJoinPool-57-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#表
10:36:02.886 [ForkJoinPool-57-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#表
10:36:02.886 [ForkJoinPool-57-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#表
10:36:02.886 [ForkJoinPool-60-worker-2] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#表
10:36:02.886 [ForkJoinPool-60-worker-5] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#コラム
10:36:02.887 [ForkJoinPool-58-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#コラムを整形
10:36:02.887 [ForkJoinPool-58-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#コラムを整形
10:36:02.887 [ForkJoinPool-58-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#コラムを整形
10:36:02.887 [ForkJoinPool-60-worker-5] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#コラム
10:36:02.887 [ForkJoinPool-60-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程に格納 between#タグ付きコラム: [----- 整形済 -----, 設定フォルダ（変換名）, 　├Washスクリプト格納フォルダ（washscr）, 　│　├Washスクリプト１（拡張子tpac）, 　│　├Washスクリプト２（拡張子tpac）, 　│　├ …, 　│　└Washスクリプトｎ（拡張子tpac）, 　├クロージャマップ格納フォルダ（clmap）, 　│　├クロージャマップ１（拡張子tpac）, 　│　├クロージャマップ２（拡張子tpac）, 　│　├ …, 　│　└クロージャマップｎ（拡張子tpac）, 　├テンプレート格納フォルダ（template）, 　│　├テンプレート１, 　│　├テンプレート２, 　│　├ …, 　│　└テンプレートｎ, 　├メタ定義格納フォルダ（meta）, 　│　├メタ定義ファイル１（拡張子txt）, 　│　├メタ定義ファイル２（拡張子txt）, 　│　├ …, 　│　└メタ定義ファイルｎ（拡張子txt）, 　└固定ファイル格納フォルダ（asset）, 　　　├固定ファイル１, 　　　├固定ファイル２, 　　　├ …, 　　　└固定ファイルｎ, ----- 整形済 -----]
10:36:02.888 [ForkJoinPool-60-worker-4] DEBUG i.g.l.yakumo.washscr.ParentConveyer - 子工程を完了 between#タグ付きコラム
10:36:02.910 [ForkJoinPool-59-worker-1] DEBUG i.g.l.yakumo.washscr.ChildConveyer - 子工程 call#タグ付きコラムを整形 :[【－整形済】, 設定フォルダ（変換名）, 　├Washスクリプト格納フォルダ（washscr）, 　│　├Washスクリプト１（拡張子tpac）, 　│　├Washスクリプト２（拡張子tpac）, 　│　├ …, 　│　└Washスクリプトｎ（拡張子tpac）, 　├クロージャマップ格納フォルダ（clmap）, 　│　├クロージャマップ１（拡張子tpac）, 　│　├クロージャマップ２（拡張子tpac）, 　│　├ …, 　│　└クロージャマップｎ（拡張子tpac）, 　├テンプレート格納フォルダ（template）, 　│　├テンプレート１, 　│　├テンプレート２, 　│　├ …, 　│　└テンプレートｎ, 　├メタ定義格納フォルダ（meta）, 　│　├メタ定義ファイル１（拡張子txt）, 　│　├メタ定義ファイル２（拡張子txt）, 　│　├ …, 　│　└メタ定義ファイルｎ（拡張子txt）, 　└固定ファイル格納フォルダ（asset）, 　　　├固定ファイル１, 　　　├固定ファイル２, 　　　├ …, 　　　└固定ファイルｎ, 【整形済－】]
10:36:02.910 [ForkJoinPool-59-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - conveyLast call#タグ付きコラムを整形
10:36:02.910 [ForkJoinPool-59-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - terminate call#タグ付きコラムを整形
10:36:02.910 [ForkJoinPool-59-worker-1] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY call#タグ付きコラムを整形
10:36:02.910 [ForkJoinPool-60-worker-4] DEBUG i.g.l.y.washscr.conveyer.Conveyer - END CONVEY between#タグ付きコラム
10:36:02.921 [Thread-127] DEBUG i.g.l.yakumo.washscr.WashScr - washscr実行終了 key=washscr#BLtxt文書へ整形
10:36:02.922 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：meta タイトル
10:36:02.922 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:36:02.922 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:36:02.922 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:36:02.922 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:36:02.923 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：inline リンク
10:36:02.923 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:36:02.923 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:36:02.923 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:36:02.923 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 見出し
10:36:02.924 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:36:02.924 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:36:02.924 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：block 整形済
10:36:02.924 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:36:02.927 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:36:02.927 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:36:02.928 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:36:02.928 [main] DEBUG i.g.l.yakumo.bltxt.node.BLRoot - 索引作成：para 
10:36:03.086 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:36:03.140 [main] DEBUG io.github.longfish801 - para call
10:36:03.194 [main] DEBUG io.github.longfish801 - line call
10:36:03.252 [main] DEBUG io.github.longfish801 - text call: YmoScriptとは
10:36:03.303 [main] DEBUG io.github.longfish801 - para call
10:36:03.356 [main] DEBUG io.github.longfish801 - line call
10:36:03.412 [main] DEBUG io.github.longfish801 - text call: 　
10:36:03.465 [main] DEBUG io.github.longfish801 - inline call: inline#リンク
10:36:03.523 [main] DEBUG io.github.longfish801 - text call: YmoScript
10:36:03.578 [main] DEBUG io.github.longfish801 - text call: は、リソース上のファイルに記述された設定と DSLに基づき、テキストを変換します。
10:36:03.636 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:36:03.702 [main] DEBUG io.github.longfish801 - para call
10:36:03.755 [main] DEBUG io.github.longfish801 - line call
10:36:03.815 [main] DEBUG io.github.longfish801 - text call: サンプル
10:36:03.867 [main] DEBUG io.github.longfish801 - para call
10:36:03.920 [main] DEBUG io.github.longfish801 - line call
10:36:03.974 [main] DEBUG io.github.longfish801 - text call: 　変換対象として文字列、あるいはテキストファイルを指定できます。
10:36:04.026 [main] DEBUG io.github.longfish801 - line call
10:36:04.082 [main] DEBUG io.github.longfish801 - text call: 　BLtxt記法で記述されている必要があります。
10:36:04.133 [main] DEBUG io.github.longfish801 - line call
10:36:04.189 [main] DEBUG io.github.longfish801 - text call: 　もしくは、Washスクリプトによって BLtxt記法に基づくテキストへ整形される必要があります。
10:36:04.248 [main] DEBUG io.github.longfish801 - block call: block#見出し
10:36:04.303 [main] DEBUG io.github.longfish801 - para call
10:36:04.356 [main] DEBUG io.github.longfish801 - line call
10:36:04.425 [main] DEBUG io.github.longfish801 - text call: 設定リソース
10:36:04.477 [main] DEBUG io.github.longfish801 - para call
10:36:04.529 [main] DEBUG io.github.longfish801 - line call
10:36:04.584 [main] DEBUG io.github.longfish801 - text call: 　リソースから参照可能なフォルダに、変換に必要なファイルを格納します。
10:36:04.637 [main] DEBUG io.github.longfish801 - block call: block#整形済
10:36:04.691 [main] DEBUG io.github.longfish801 - para call
10:36:04.744 [main] DEBUG io.github.longfish801 - line call
10:36:04.802 [main] DEBUG io.github.longfish801 - text call: 設定フォルダ（変換名）
10:36:04.854 [main] DEBUG io.github.longfish801 - line call
10:36:04.912 [main] DEBUG io.github.longfish801 - text call: 　├Washスクリプト格納フォルダ（washscr）
10:36:04.964 [main] DEBUG io.github.longfish801 - line call
10:36:05.023 [main] DEBUG io.github.longfish801 - text call: 　│　├Washスクリプト１（拡張子tpac）
10:36:05.075 [main] DEBUG io.github.longfish801 - line call
10:36:05.145 [main] DEBUG io.github.longfish801 - text call: 　│　├Washスクリプト２（拡張子tpac）
10:36:05.197 [main] DEBUG io.github.longfish801 - line call
10:36:05.255 [main] DEBUG io.github.longfish801 - text call: 　│　├ …
10:36:05.308 [main] DEBUG io.github.longfish801 - line call
10:36:05.366 [main] DEBUG io.github.longfish801 - text call: 　│　└Washスクリプトｎ（拡張子tpac）
10:36:05.417 [main] DEBUG io.github.longfish801 - line call
10:36:05.474 [main] DEBUG io.github.longfish801 - text call: 　├クロージャマップ格納フォルダ（clmap）
10:36:05.528 [main] DEBUG io.github.longfish801 - line call
10:36:05.586 [main] DEBUG io.github.longfish801 - text call: 　│　├クロージャマップ１（拡張子tpac）
10:36:05.638 [main] DEBUG io.github.longfish801 - line call
10:36:05.706 [main] DEBUG io.github.longfish801 - text call: 　│　├クロージャマップ２（拡張子tpac）
10:36:05.760 [main] DEBUG io.github.longfish801 - line call
10:36:05.830 [main] DEBUG io.github.longfish801 - text call: 　│　├ …
10:36:05.882 [main] DEBUG io.github.longfish801 - line call
10:36:05.941 [main] DEBUG io.github.longfish801 - text call: 　│　└クロージャマップｎ（拡張子tpac）
10:36:05.993 [main] DEBUG io.github.longfish801 - line call
10:36:06.053 [main] DEBUG io.github.longfish801 - text call: 　├テンプレート格納フォルダ（template）
10:36:06.105 [main] DEBUG io.github.longfish801 - line call
10:36:06.162 [main] DEBUG io.github.longfish801 - text call: 　│　├テンプレート１
10:36:06.214 [main] DEBUG io.github.longfish801 - line call
10:36:06.272 [main] DEBUG io.github.longfish801 - text call: 　│　├テンプレート２
10:36:06.324 [main] DEBUG io.github.longfish801 - line call
10:36:06.382 [main] DEBUG io.github.longfish801 - text call: 　│　├ …
10:36:06.434 [main] DEBUG io.github.longfish801 - line call
10:36:06.492 [main] DEBUG io.github.longfish801 - text call: 　│　└テンプレートｎ
10:36:06.556 [main] DEBUG io.github.longfish801 - line call
10:36:06.613 [main] DEBUG io.github.longfish801 - text call: 　├メタ定義格納フォルダ（meta）
10:36:06.670 [main] DEBUG io.github.longfish801 - line call
10:36:06.729 [main] DEBUG io.github.longfish801 - text call: 　│　├メタ定義ファイル１（拡張子txt）
10:36:06.780 [main] DEBUG io.github.longfish801 - line call
10:36:06.838 [main] DEBUG io.github.longfish801 - text call: 　│　├メタ定義ファイル２（拡張子txt）
10:36:06.889 [main] DEBUG io.github.longfish801 - line call
10:36:06.947 [main] DEBUG io.github.longfish801 - text call: 　│　├ …
10:36:06.998 [main] DEBUG io.github.longfish801 - line call
10:36:07.056 [main] DEBUG io.github.longfish801 - text call: 　│　└メタ定義ファイルｎ（拡張子txt）
10:36:07.108 [main] DEBUG io.github.longfish801 - line call
10:36:07.165 [main] DEBUG io.github.longfish801 - text call: 　└固定ファイル格納フォルダ（asset）
10:36:07.230 [main] DEBUG io.github.longfish801 - line call
10:36:07.289 [main] DEBUG io.github.longfish801 - text call: 　　　├固定ファイル１
10:36:07.344 [main] DEBUG io.github.longfish801 - line call
10:36:07.408 [main] DEBUG io.github.longfish801 - text call: 　　　├固定ファイル２
10:36:07.463 [main] DEBUG io.github.longfish801 - line call
10:36:07.523 [main] DEBUG io.github.longfish801 - text call: 　　　├ …
10:36:07.577 [main] DEBUG io.github.longfish801 - line call
10:36:07.638 [main] DEBUG io.github.longfish801 - text call: 　　　└固定ファイルｎ
10:36:07.694 [main] DEBUG io.github.longfish801 - para call
10:36:07.748 [main] DEBUG io.github.longfish801 - line call
10:36:07.805 [main] DEBUG io.github.longfish801 - text call: 　メタ定義ファイルは、クロージャマップでバインド変数のマップに変換します。
10:36:07.859 [main] DEBUG io.github.longfish801 - line call
10:36:07.915 [main] DEBUG io.github.longfish801 - text call: 　メタ定義ファイルが複数ある場合、マップを上書きします。
10:36:07.980 [main] DEBUG io.github.longfish801 - line call
10:36:08.037 [main] DEBUG io.github.longfish801 - text call: 　同じキーのバインド変数があれば上書きされることになります。
10:36:08.090 [main] DEBUG io.github.longfish801 - line call
10:36:08.150 [main] DEBUG io.github.longfish801 - text call: 　テンプレートにバインド変数を適用するとき、メタ定義ファイルを変換して得たバインド変数のマップも使用します。
10:36:08.206 [main] DEBUG io.github.longfish801 - line call
10:36:08.262 [main] DEBUG io.github.longfish801 - text call: 　変換対象の文字列あるいはテキストから得られたバインド変数のマップに、同じキーがあれば上書きされることになります。
10:36:08.317 [main] DEBUG io.github.longfish801 - para call
10:36:08.369 [main] DEBUG io.github.longfish801 - line call
10:36:08.425 [main] DEBUG io.github.longfish801 - text call: 　Washスクリプト、クロージャマップは複数格納することができます。
10:36:08.477 [main] DEBUG io.github.longfish801 - line call
10:36:08.531 [main] DEBUG io.github.longfish801 - text call: 　ファイル名の順番で参照、blendメソッドで上書きしていきます。
10:36:08.583 [main] DEBUG io.github.longfish801 - line call
10:36:08.640 [main] DEBUG io.github.longfish801 - text call: 　ファイル名の順番とは、ファイル名の文字列での昇順です。
10:36:08.722 [main] DEBUG io.github.longfish801 - para call
10:36:08.775 [main] DEBUG io.github.longfish801 - line call
10:36:08.832 [main] DEBUG io.github.longfish801 - text call: 　同じ名前のテンプレート、固定ファイルが複数ある場合、後から読んだほうで置き換えます。
10:36:08.883 [main] DEBUG io.github.longfish801 - line call
10:36:08.940 [main] DEBUG io.github.longfish801 - text call: 　置き換えられたほうは使用されません。
10:36:08.994 [main] DEBUG io.github.longfish801 - para call
10:36:09.047 [main] DEBUG io.github.longfish801 - line call
10:36:09.104 [main] DEBUG io.github.longfish801 - text call: 以上
10:36:09.209 [main] DEBUG io.github.longfish801 - para call
10:36:09.265 [main] DEBUG io.github.longfish801 - line call
10:36:09.322 [main] DEBUG io.github.longfish801 - text call: YmoScript
10:36:09.450 [main] DEBUG io.github.longfish801 - para call
10:36:09.509 [main] DEBUG io.github.longfish801 - line call
10:36:09.566 [main] DEBUG io.github.longfish801 - text call: YmoScriptとは
10:36:09.620 [main] DEBUG io.github.longfish801 - para call
10:36:09.675 [main] DEBUG io.github.longfish801 - line call
10:36:09.732 [main] DEBUG io.github.longfish801 - text call: サンプル
10:36:09.784 [main] DEBUG io.github.longfish801 - para call
10:36:09.838 [main] DEBUG io.github.longfish801 - line call
10:36:09.895 [main] DEBUG io.github.longfish801 - text call: 設定リソース
10:36:09.954 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets outDir=C:\own\_01.under\_gstart\longfish801\yakumo\txt\..\..\longfish801.github.io\yakumo
10:36:09.956 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=bltxtSample/sample.groovy
10:36:09.964 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=bltxtSample/sample.txt
10:36:09.964 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=bltxtSample/sample.xml
10:36:09.965 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=clmapSample/sample.groovy
10:36:09.965 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=clmapSample/sample.tpac
10:36:09.966 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=htmlSample/sample.groovy
10:36:09.967 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=htmlSample/sample.html
10:36:09.968 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=htmlSample/sample.txt
10:36:09.968 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=htmlSample/yakumo/_asset/css/sim2ruby.css
10:36:09.971 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=htmlSample/yakumo/_asset/honoka/css/bootstrap.min.css
10:36:09.974 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=htmlSample/yakumo/_asset/honoka/fonts/glyphicons-halflings-regular.eot
10:36:09.976 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=htmlSample/yakumo/_asset/honoka/fonts/glyphicons-halflings-regular.svg
10:36:09.978 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=htmlSample/yakumo/_asset/honoka/fonts/glyphicons-halflings-regular.ttf
10:36:09.979 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=htmlSample/yakumo/_asset/honoka/fonts/glyphicons-halflings-regular.woff
10:36:09.981 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=htmlSample/yakumo/_asset/honoka/fonts/glyphicons-halflings-regular.woff2
10:36:09.984 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=htmlSample/yakumo/_asset/honoka/js/bootstrap.min.js
10:36:09.986 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=htmlSample/yakumo/_asset/js/jquery-1.12.4.min.js
10:36:09.988 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=htmlSample/yakumo/_asset/script.js
10:36:09.989 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=htmlSample/yakumo/_asset/style.css
10:36:09.989 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=tpacSample/sample.groovy
10:36:09.990 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=tpacSample/sample.tpac
10:36:09.991 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=tpacSample/sample.xml
10:36:09.991 [main] DEBUG i.g.longfish801.yakumo.AssetHandler - copy assets path=ymodocumentSample/result.log
