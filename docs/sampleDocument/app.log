2019/05/04 08:26:39.236 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.YmoScript, name=YmoScript.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.2.00.jar!/io/github/longfish801/yakumo/YmoScript.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:26:39.431 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.YmoDocument, name=YmoDocument.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.2.00.jar!/io/github/longfish801/yakumo/YmoDocument.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:26:39.464 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.ConvertEngine, name=ConvertEngine.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.2.00.jar!/io/github/longfish801/yakumo/ConvertEngine.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:26:39.495 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.tpac.parser.TeaParty, name=TeaParty.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/parser/TeaParty.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:26:39.609 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.TemplateHandler, name=TemplateHandler.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.2.00.jar!/io/github/longfish801/yakumo/TemplateHandler.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:26:39.646 INFO  ログフォルダを作成しました。path=C:\Users\longfish\AppData\Local\Temp\yakumo (main - ConvertEngine.groovy,io.github.longfish801.yakumo.ConvertEngine#getDefaultLogDir,68)
2019/05/04 08:26:39.703 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.YmoScript, name=_bltxt/ymoSetting.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.2.00.jar!/io/github/longfish801/yakumo/_bltxt/ymoSetting.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:26:39.945 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.washsh.WashMaker, name=WashMaker.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/washsh/jars/washsh-0.2.00.jar!/io/github/longfish801/washsh/WashMaker.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:26:39.997 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:26:40.095 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:26:40.157 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:26:40.237 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:26:40.309 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:26:40.398 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:26:40.493 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:26:40.567 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:26:40.655 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:26:41.314 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.YmoScript, name=_html/ymoSetting.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.2.00.jar!/io/github/longfish801/yakumo/_html/ymoSetting.groovy (main - null,sun.reflect.GeneratedMethodAccessor49#invoke,-1)
2019/05/04 08:26:41.383 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.clmap.ClmapMaker, name=ClmapMaker.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/clmap/jars/clmap-0.2.00.jar!/io/github/longfish801/clmap/ClmapMaker.groovy (main - null,sun.reflect.GeneratedMethodAccessor49#invoke,-1)
2019/05/04 08:26:41.411 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - null,sun.reflect.GeneratedMethodAccessor49#invoke,-1)
2019/05/04 08:26:41.470 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.clmap.Clinfo, name=Clinfo.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/clmap/jars/clmap-0.2.00.jar!/io/github/longfish801/clmap/Clinfo.groovy (main - null,sun.reflect.GeneratedMethodAccessor49#invoke,-1)
2019/05/04 08:26:41.482 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - null,sun.reflect.GeneratedMethodAccessor49#invoke,-1)
2019/05/04 08:26:41.930 DEBUG washsh実行開始 key=washsh:_bltxt (Thread-4 - Washsh.groovy,io.github.longfish801.washsh.Washsh#wash,70)
2019/05/04 08:26:41.930 DEBUG washsh実行開始 key=washsh:_bltxt (Thread-1 - Washsh.groovy,io.github.longfish801.washsh.Washsh#wash,70)
2019/05/04 08:26:41.930 DEBUG washsh実行開始 key=washsh:_bltxt (Thread-2 - Washsh.groovy,io.github.longfish801.washsh.Washsh#wash,70)
2019/05/04 08:26:41.930 DEBUG washsh実行開始 key=washsh:_bltxt (Thread-3 - Washsh.groovy,io.github.longfish801.washsh.Washsh#wash,70)
2019/05/04 08:26:41.936 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.bltxt.BLtxt, name=BLtxt.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/bltxt/jars/bltxt-0.2.00.jar!/io/github/longfish801/bltxt/BLtxt.groovy (ForkJoinPool-1-worker-1 - null,sun.reflect.GeneratedMethodAccessor49#invoke,-1)
2019/05/04 08:26:42.060 DEBUG washsh実行終了 key=washsh:_bltxt (Thread-4 - Washsh.groovy,io.github.longfish801.washsh.Washsh#wash,89)
2019/05/04 08:26:42.158 DEBUG 索引作成：meta タイトル (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.160 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.184 DEBUG washsh実行終了 key=washsh:_bltxt (Thread-2 - Washsh.groovy,io.github.longfish801.washsh.Washsh#wash,89)
2019/05/04 08:26:42.198 DEBUG 索引作成：meta タイトル (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.199 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.229 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.229 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.230 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.230 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.231 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.232 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.233 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.233 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.234 DEBUG 索引作成：block 箇条書き (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.234 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.235 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.235 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.236 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.238 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.238 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.238 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.239 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.239 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.239 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.240 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.240 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.240 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.241 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.241 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.242 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.242 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.242 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.243 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.243 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.243 DEBUG 索引作成：block 箇条書き (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.243 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.244 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.244 DEBUG 索引作成：block コード (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.244 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.244 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.245 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.245 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.246 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.246 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.247 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.249 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.250 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.251 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.252 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.253 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.254 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.256 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.257 DEBUG 索引作成：block コード (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.258 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.260 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.261 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.262 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.264 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.265 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.267 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.268 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.269 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.270 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.271 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.273 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.274 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.275 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.277 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.277 DEBUG 索引作成：block 箇条書き (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.278 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.279 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.280 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.281 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.283 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.284 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.285 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.286 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.287 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.288 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.289 DEBUG 索引作成：block 項目説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.290 DEBUG 索引作成：block 対象 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.291 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.292 DEBUG 索引作成：block 説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.293 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.294 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.295 DEBUG 索引作成：block 対象 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.296 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.298 DEBUG 索引作成：block 説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.298 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.300 DEBUG 索引作成：block 対象 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.301 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.302 DEBUG 索引作成：block 説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.303 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.304 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.305 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.306 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.307 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.308 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.309 DEBUG 索引作成：block コード (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.310 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.311 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.315 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.316 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.317 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.317 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.318 DEBUG 索引作成：block コード (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.319 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.321 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.322 DEBUG 索引作成：block 項目説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.323 DEBUG 索引作成：block 対象 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.324 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.325 DEBUG 索引作成：block 説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.326 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.327 DEBUG 索引作成：block 対象 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.328 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.329 DEBUG 索引作成：block 説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.330 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.331 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.332 DEBUG 索引作成：block 対象 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.333 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.334 DEBUG 索引作成：block 説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.335 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.335 DEBUG washsh実行終了 key=washsh:_bltxt (Thread-1 - Washsh.groovy,io.github.longfish801.washsh.Washsh#wash,89)
2019/05/04 08:26:42.336 DEBUG 索引作成：block 対象 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.337 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.338 DEBUG 索引作成：block 説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.339 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.351 DEBUG 索引作成：meta タイトル (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.353 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.354 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.354 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.355 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.357 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.358 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.359 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.360 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.361 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.361 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.362 DEBUG washsh実行終了 key=washsh:_bltxt (Thread-3 - Washsh.groovy,io.github.longfish801.washsh.Washsh#wash,89)
2019/05/04 08:26:42.362 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.364 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.364 DEBUG 索引作成：meta タイトル (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.364 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.364 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.365 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.365 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.365 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.365 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.366 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.366 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.367 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.367 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.368 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.368 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.368 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.368 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.369 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.369 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.369 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.370 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.371 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.371 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.372 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.372 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.372 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.372 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.373 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.373 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.374 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.374 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.374 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.374 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.375 DEBUG 索引作成：block 箇条書き (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.375 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.376 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.376 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.377 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.377 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.377 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.377 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.378 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.378 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.378 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.379 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.379 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.379 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.380 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.380 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.381 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.381 DEBUG 索引作成：block 箇条書き (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.382 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.382 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.382 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.383 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.383 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.383 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.384 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.384 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.384 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.385 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.385 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.385 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.386 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.386 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.386 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.386 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.387 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.387 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.387 DEBUG 索引作成：meta タイトル (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.388 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.388 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.389 DEBUG 索引作成：meta サブタイトル (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.389 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.389 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.389 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.390 DEBUG 索引作成：meta 著者名 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.390 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.390 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.391 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.391 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.391 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.391 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.392 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.392 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.393 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.393 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.394 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.394 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.395 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.395 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.396 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.396 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.396 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.396 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.397 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.397 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.397 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.398 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.398 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.398 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.399 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.399 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.400 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.401 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.401 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.402 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.402 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.402 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.403 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.403 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.403 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.404 DEBUG 索引作成：block 挿入図 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.404 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.404 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.405 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.405 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.406 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.406 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.407 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.407 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.407 DEBUG 索引作成：block 挿入図 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.408 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.408 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.408 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.409 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.409 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.409 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.409 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.410 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.410 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.411 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.411 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.411 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.412 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.412 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.412 DEBUG 索引作成：inline 註 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.413 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.413 DEBUG 索引作成：inline 註 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.414 DEBUG 索引作成：meta 註記 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.414 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.414 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.415 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.415 DEBUG 索引作成：meta 註記 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.415 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.415 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.416 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.416 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.416 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.417 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.417 DEBUG 索引作成：block 引用元 (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.417 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.417 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.418 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.418 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.419 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.419 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.419 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.419 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.420 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.421 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.421 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.421 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.421 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.422 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.422 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.422 DEBUG 索引作成：block 箇条書き (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.423 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.423 DEBUG 索引作成：inline 引用 (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.423 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.424 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.424 DEBUG 索引作成：inline 引用 (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.424 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.424 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.425 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.425 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.426 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.426 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.426 DEBUG 索引作成：block 箇条書き (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.427 DEBUG 索引作成：block 説明 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.427 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.427 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.427 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.428 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.428 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.429 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.429 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.430 DEBUG 索引作成：block 箇条書き (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.430 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.430 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.430 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.430 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.430 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.431 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.431 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.431 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.432 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.432 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.432 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.433 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.434 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.434 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.434 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.435 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.435 DEBUG 索引作成：block 項目説明 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.435 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.436 DEBUG 索引作成：block 対象 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.436 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.436 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.437 DEBUG 索引作成：block 説明 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.437 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.437 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.437 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.438 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.438 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.438 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.439 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.439 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.440 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.440 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.440 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.440 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.441 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.441 DEBUG 索引作成：block 表 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.441 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.442 DEBUG 索引作成：block 行 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.442 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.442 DEBUG 索引作成：block 見出しセル (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.443 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.443 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.443 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.444 DEBUG 索引作成：block 見出しセル (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.444 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.444 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.445 DEBUG 索引作成：block 見出しセル (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.445 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.445 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.446 DEBUG 索引作成：block 行 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.446 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.447 DEBUG 索引作成：block セル (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.447 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.447 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.447 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.448 DEBUG 索引作成：block セル (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.448 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.449 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.449 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.449 DEBUG 索引作成：block セル (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.450 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.450 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.450 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.451 DEBUG 索引作成：block 行 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.451 DEBUG 索引作成：block セル (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.451 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.452 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.452 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.452 DEBUG 索引作成：block セル (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.453 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.453 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.453 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.453 DEBUG 索引作成：block セル (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.454 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.454 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.455 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.455 DEBUG 索引作成：inline 強調 (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.455 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.456 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.456 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.456 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.457 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.457 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.457 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.458 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.458 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.458 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.458 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.459 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.459 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.459 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.460 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.460 DEBUG 索引作成：inline 最強調 (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.461 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.461 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.461 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.461 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.462 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.462 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.462 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.462 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.463 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.463 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.463 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.464 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.464 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.464 DEBUG 索引作成：inline ぼかし (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.465 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.465 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.466 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.466 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.466 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.467 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.467 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.467 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.467 DEBUG 索引作成：block 注意 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.468 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.468 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.468 DEBUG 索引作成：inline 削除 (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.469 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.469 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.469 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.469 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.470 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.470 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.471 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.471 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.471 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.471 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.472 DEBUG 索引作成：inline 傍点 (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.472 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.472 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.473 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.473 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.474 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.474 DEBUG 索引作成：block 引用 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.474 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.474 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.475 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.475 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.475 DEBUG 索引作成：block 引用元 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.476 DEBUG 索引作成：inline 縦中横 (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.476 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.476 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.477 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.477 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.477 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.478 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.478 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.478 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.479 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.479 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.479 DEBUG 索引作成：inline ルビ (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.480 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.480 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.480 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.481 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.481 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.482 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.482 DEBUG 索引作成：block コード (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.483 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.484 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.485 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.486 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.487 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.488 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.489 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.489 DEBUG 索引作成：block 整形済 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.490 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.491 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.492 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.493 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.493 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.494 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.494 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.495 DEBUG 索引作成：block 生データ (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.495 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.496 DEBUG 索引作成：inline 強調 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.496 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.497 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.497 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.498 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.498 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.499 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.499 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.499 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.500 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.500 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.501 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.501 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.502 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.502 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.503 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.503 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.504 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.504 DEBUG 索引作成：inline 強調 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.505 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.505 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.506 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.506 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.507 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.507 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.507 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.508 DEBUG 索引作成：inline 最強調 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.509 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.509 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.509 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.510 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.510 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.511 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.511 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.512 DEBUG 索引作成：inline 傍点 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.512 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.513 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.513 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.514 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.514 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.515 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.515 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.515 DEBUG 索引作成：inline ぼかし (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.516 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.516 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.517 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.517 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.518 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.518 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.519 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.519 DEBUG 索引作成：inline 訂正 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.520 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.520 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.521 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.521 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.522 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.522 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.522 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.523 DEBUG 索引作成：inline 縦中横 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.524 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.524 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.525 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.525 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.526 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.526 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.527 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.527 DEBUG 索引作成：inline ルビ (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.528 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.528 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.528 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:26:42.578 DEBUG --- closure code: combiKey= ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey, def out ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	Map binds = [:];
	binds['title'] = clmap.cl('bind#title').call(outKey);
	binds['fulltitle'] = clmap.cl('bind#fulltitle').call(outKey);
	binds['author'] = clmap.cl('bind#author').call(outKey);
	binds['index'] = clmap.cl('bind#index').call(outKey);
	binds['body'] = clmap.cl('bind#body').call(outKey);
	binds['backlink'] = clmap.cl('bind#backlink').call(outKey);
	return engine.templateHandler.apply(outKey, out, outKey, binds);

}--- (ForkJoinPool-2-worker-5 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:42.578 DEBUG --- closure code: combiKey= ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey, def out ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	Map binds = [:];
	binds['title'] = clmap.cl('bind#title').call(outKey);
	binds['fulltitle'] = clmap.cl('bind#fulltitle').call(outKey);
	binds['author'] = clmap.cl('bind#author').call(outKey);
	binds['index'] = clmap.cl('bind#index').call(outKey);
	binds['body'] = clmap.cl('bind#body').call(outKey);
	binds['backlink'] = clmap.cl('bind#backlink').call(outKey);
	return engine.templateHandler.apply(outKey, out, outKey, binds);

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:42.578 DEBUG --- closure code: combiKey= ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey, def out ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	Map binds = [:];
	binds['title'] = clmap.cl('bind#title').call(outKey);
	binds['fulltitle'] = clmap.cl('bind#fulltitle').call(outKey);
	binds['author'] = clmap.cl('bind#author').call(outKey);
	binds['index'] = clmap.cl('bind#index').call(outKey);
	binds['body'] = clmap.cl('bind#body').call(outKey);
	binds['backlink'] = clmap.cl('bind#backlink').call(outKey);
	return engine.templateHandler.apply(outKey, out, outKey, binds);

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:42.578 DEBUG --- closure code: combiKey= ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey, def out ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	Map binds = [:];
	binds['title'] = clmap.cl('bind#title').call(outKey);
	binds['fulltitle'] = clmap.cl('bind#fulltitle').call(outKey);
	binds['author'] = clmap.cl('bind#author').call(outKey);
	binds['index'] = clmap.cl('bind#index').call(outKey);
	binds['body'] = clmap.cl('bind#body').call(outKey);
	binds['backlink'] = clmap.cl('bind#backlink').call(outKey);
	return engine.templateHandler.apply(outKey, out, outKey, binds);

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:42.668 DEBUG --- closure code: combiKey=bind#title ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	BLtxt bltxt = engine.bltxtMap[outKey];
	Map head = clmap.cl('bltxt#head').call(bltxt);
	return (head.containsKey('タイトル'))? head['タイトル'].replaceAll(/\<[^\<]+?\>/, '') : '';

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:43.005 DEBUG --- closure code: combiKey=bltxt#head ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLtxt bltxt ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	// ルート要素直下のメタ要素についてマップを生成します
	Map map = [:];
	bltxt.root.nodes.findAll { it.xmlTag == 'meta' }.each { BLNode node ->
		map[node.tag] = node.nodes.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) }.join(lsep);
	}
	return map;

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:43.323 DEBUG --- closure code: combiKey=para ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('para call');

	List lowers = node.nodes.collect { clmap.cl('line').call(it) };
	String result = '';
	switch (node.parent.xmlTag){
		case 'bltxt':
			// 最上位にあるならば pタグを付与します
			result = '<p>' + lowers.join("<br/>" + lsep) + '</p>';
			break;
		case 'block':	// 上位がブロック要素の場合
			switch (node.parent.tag){
				case '見出し':
				case '小見出し':
				case '挿入図':
				case '項目':
				case '対象':
				case '説明':
				case '見出しセル':
				case 'セル':
				case '引用元':
					result = lowers.join("<br/>" + lsep);
					break;
				case '生データ':
				case '整形済':
				case 'コード':
					result = lowers.join(lsep);
					break;
				default:
					result = '<p>' + lowers.join("<br/>" + lsep) + '</p>';
			}
			break;
		case 'meta':
			if (node.parent.isSingle()){	// 単一の場合
				result = lowers.join("<br/>" + lsep);
			} else {
				result = '<p>' + lowers.join("<br/>" + lsep) + '</p>';
			}
			break;
		default:
			result = lowers.join("<br/>" + lsep);
			break;
	}
	return result;

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:43.638 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:43.639 DEBUG --- closure code: combiKey=line ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('line call');
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };
	return lowers.join();

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:43.707 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:43.771 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:43.832 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:43.897 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:43.898 DEBUG --- closure code: combiKey=text ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
	import org.apache.commons.text.StringEscapeUtils;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('text call: {}', node.text);
	return StringEscapeUtils.escapeHtml4(node.text);

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:43.960 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:44.023 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:44.093 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:44.278 DEBUG text call: HTML変換 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:44.309 DEBUG --- closure code: combiKey=bind#fulltitle ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	BLtxt bltxt = engine.bltxtMap[outKey];
	Map head = clmap.cl('bltxt#head').call(bltxt);
	String subtitle = (head.containsKey('サブタイトル'))? """ <small>${head['サブタイトル']}</small>""" : '';
	return (head.containsKey('タイトル'))? """<h1>${head['タイトル']}${subtitle}</h1>""" : '';

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:44.370 DEBUG text call: yakumo (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:44.452 DEBUG text call: BLtxt変換 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:44.535 DEBUG text call: yakumoの使い方 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:44.602 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:44.602 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:44.603 DEBUG text call: HTML変換 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:44.604 DEBUG --- closure code: combiKey=bind#author ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	BLtxt bltxt = engine.bltxtMap[outKey];
	Map head = clmap.cl('bltxt#head').call(bltxt);
	return (head.containsKey('著者名'))? """<div class="author">${head['著者名']}</div>""" : '';

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:44.663 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:44.663 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:44.664 DEBUG text call: yakumo (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:44.725 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:44.726 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:44.726 DEBUG text call: BLtxt変換 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:44.786 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:44.786 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:44.787 DEBUG text call: yakumoの使い方 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:44.846 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:44.846 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:44.846 DEBUG text call: HTML変換 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:44.848 DEBUG --- closure code: combiKey=bind#index ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	BLtxt bltxt = engine.bltxtMap[outKey];
	Map head = clmap.cl('bltxt#head').call(bltxt);
	return clmap.cl('bltxt#index').call(bltxt).collect { Map map ->
		"""<a href="${map['href']}" class="list-group-item">${'　' * (map['level'] - 2)}${map['title']}</a>"""
	}.join(lsep);

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:44.907 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:44.908 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:44.908 DEBUG text call: yakumo (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:44.965 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:44.965 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:44.965 DEBUG text call: BLtxt変換 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.023 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.023 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.024 DEBUG text call: yakumoの使い方 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.083 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.084 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.084 DEBUG text call: HTML変換 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.086 DEBUG --- closure code: combiKey=bltxt#index ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLtxt bltxt ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	// 目次を生成します
	List list = [];
	bltxt.grepNodes('block', '見出し').each { BLNode node ->
		int level;
		try {
			level = (node.attrs.size() > 0)? Integer.parseInt(node.attrs[0]) + 1 : 2;
		} catch (NumberFormatException exc){
			throw new Exception('見出しレベルの型変換に失敗しました。見出しレベルは半角数字を指定してください。', exc);
		}
		Map map = [:];
		map['level'] = level;
		map['href'] = """#id${level}_${node.serialNo}""";
		map['title'] = """${node.nodes.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) }.join()}""";
		list << map;
	}
	return list;

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:45.145 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.145 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.146 DEBUG text call: yakumo (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.205 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.205 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.205 DEBUG text call: BLtxt変換 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.265 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.266 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.266 DEBUG text call: yakumoの使い方 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.348 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.349 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.349 DEBUG text call: 概要 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.350 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.351 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.351 DEBUG text call: ブロック要素 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.353 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.354 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.358 DEBUG text call: 改行と段落 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.359 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.359 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.360 DEBUG text call: タイトル、サブタイトル、著者名 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.361 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.361 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.361 DEBUG text call: 見出しと目次 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.362 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.362 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.363 DEBUG text call: カレーの作り方 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.364 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.364 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.365 DEBUG text call: 材料の準備 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.365 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.366 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.366 DEBUG text call: 挿入図 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.367 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.367 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.367 DEBUG text call: 註、註記 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.368 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.368 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.369 DEBUG text call: 箇条書き (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.369 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.370 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.370 DEBUG text call: 表 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.371 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.371 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.371 DEBUG text call: コラム (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.372 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.372 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.373 DEBUG text call: 注意 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.373 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.374 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.374 DEBUG text call: 引用、引用元 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.375 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.375 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.375 DEBUG text call: コード (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.379 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.379 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.379 DEBUG text call: 整形済 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.380 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.380 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.380 DEBUG text call: 生データ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.381 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.381 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.382 DEBUG text call: インライン要素 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.382 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.382 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.383 DEBUG text call: リンク (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.383 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.384 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.384 DEBUG text call: 強調 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.384 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.385 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.385 DEBUG text call: 最強調 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.385 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.385 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.386 DEBUG text call: 傍点 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.386 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.387 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.387 DEBUG text call: ぼかし (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.388 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.388 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.388 DEBUG text call: 訂正 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.389 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.389 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.390 DEBUG text call: 縦中横 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.390 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.391 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.391 DEBUG text call: ルビ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.396 DEBUG --- closure code: combiKey=bind#body ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	BLtxt bltxt = engine.bltxtMap[outKey];
	Map head = clmap.cl('bltxt#head').call(bltxt);
	List body = clmap.cl('bltxt#body').call(bltxt);
	String note = clmap.cl('bltxt#note').call(bltxt);
	if (!note.empty) note = lsep + lsep + note;
	return body.join(lsep + lsep) + note;

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:45.426 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.427 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.427 DEBUG text call: 概要 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.427 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.428 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.428 DEBUG text call: 行タグ／行範囲タグへ整形 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.428 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.429 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.429 DEBUG text call: 見出し (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.429 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.429 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.430 DEBUG text call: 箇条書き (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.430 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.430 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.431 DEBUG text call: 項目説明 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.431 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.431 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.431 DEBUG text call: 表 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.432 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.432 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.432 DEBUG text call: コード (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.432 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.433 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.433 DEBUG text call: 整形済 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.433 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.434 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.434 DEBUG text call: 行範囲タグの汎用的な記法 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.434 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.434 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.435 DEBUG text call: マスキング (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.435 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.435 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.436 DEBUG text call: BLエスケープ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.436 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.436 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.436 DEBUG text call: 文中タグ／文範囲タグへ整形 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.437 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.437 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.437 DEBUG text call: リンク (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.438 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.438 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.438 DEBUG text call: 強調 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.438 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.439 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.439 DEBUG text call: 最強調 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.440 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.440 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.440 DEBUG text call: ぼかし (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.440 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.441 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.441 DEBUG text call: 削除 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.441 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.441 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.442 DEBUG text call: 傍点 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.442 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.442 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.443 DEBUG text call: 縦中横 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.443 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.443 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.444 DEBUG text call: ルビ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.505 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.505 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.506 DEBUG text call: yakumoとは (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.507 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.507 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.507 DEBUG text call: サンプル (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.508 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.509 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.509 DEBUG text call: YmoScript (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.510 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.510 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.511 DEBUG text call: YmoDocument (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.511 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.511 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.512 DEBUG text call: 変換の基本的な考え方 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.512 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.512 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.513 DEBUG text call: 変換資材 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.513 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.513 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.514 DEBUG text call: YmoScript (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.514 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.514 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.514 DEBUG text call: YmoDocument (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.579 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.579 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.579 DEBUG text call: 概要 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.580 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.580 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.580 DEBUG text call: ドキュメント (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.581 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.581 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.581 DEBUG text call: API仕様書 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.641 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.642 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.642 DEBUG text call: HTML変換 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.643 DEBUG --- closure code: combiKey=bltxt#body ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLtxt bltxt ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	return bltxt.root.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:45.701 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.702 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.702 DEBUG text call: BLtxt変換 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.763 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.763 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.764 DEBUG text call: yakumoの使い方 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.822 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:45.822 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:45.823 DEBUG text call: yakumo (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:45.884 DEBUG --- closure code: combiKey=block#見出し ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	int level;
	try {
		level = (node.attrs.size() > 0)? Integer.parseInt(node.attrs[0]) + 1 : 2;
	} catch (NumberFormatException exc){
		throw new Exception('見出しレベルの型変換に失敗しました。見出しレベルは半角数字を指定してください。', exc);
	}
	return """<h${level}><a name="id${level}_${node.serialNo}"></a>${lowers.join()}</h${level}>""";

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:46.120 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.122 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.122 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.122 DEBUG text call: 概要 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.123 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.123 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.124 DEBUG text call: 　yakumoは変換名「_html」（HTML変換）を用意しています。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.124 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.124 DEBUG text call: 　HTML変換は、BLtxt文書を HTML5形式へ変換するための設定です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.125 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.125 DEBUG text call: 　変換に利用しているクロージャマップの処理内容について、以下に説明します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.125 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.125 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.126 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.126 DEBUG text call: ブロック要素 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.126 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.126 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.127 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.127 DEBUG text call: 改行と段落 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.127 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.127 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.128 DEBUG text call: 　改行は brタグを挿入します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.128 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.128 DEBUG text call: 　段落は pタグで囲みます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.129 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.129 DEBUG text call: 　なお、空行が二行以上あっても、変換結果には反映されません。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.129 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.129 DEBUG text call: 　HTML文法上の特殊文字があるときはエスケープします。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.130 DEBUG --- closure code: combiKey=block#コラム ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	List list = [];
	list << """<aside class="panel panel-primary">""";
	if (node.attrs.size() > 0) list << """<header class="panel-heading">${node.attrs[0]}</header>""";
	list << """<div class="panel-body">""";
	list << lowers.join(lsep);
	list << """</div>""";
	list << """</aside>""";
	return list.join(lsep);

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:46.186 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.188 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.188 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.189 DEBUG text call: 概要 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.190 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.190 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.190 DEBUG text call: 　yakumoは変換名「_bltxt」（BLtxt変換）を用意しています。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.191 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.191 DEBUG text call: 　BLtxt変換は、yakumo記法で記述されたテキストを BLtxt文書に変換します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.191 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.191 DEBUG text call: 　washshスクリプトによる処理内容について、以下に説明します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.192 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.192 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.192 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.193 DEBUG text call: 行タグ／行範囲タグへ整形 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.193 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.193 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.193 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.194 DEBUG text call: 見出し (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.194 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.194 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.195 DEBUG text call: 　行頭に■、□、▼があれば、見出しとみなします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.253 DEBUG block call: block#見出し (ForkJoinPool-2-worker-5 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.255 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.255 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.255 DEBUG text call: yakumoとは (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.256 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.256 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.256 DEBUG text call: 　yakumoは、特定の記法に従うテキストを他の形式へ変換するためのライブラリです。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.257 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.257 DEBUG text call: 　名称は、主に約物で書式を実現することに由来しています。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.257 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.257 DEBUG text call: 　あらかじめ yakumo記法に沿ったテキストを HTMLへ変換するための資材が準備されています。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.258 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.258 DEBUG text call: 　記法や変換方法を拡張／改変することもできます。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.258 DEBUG block call: block#見出し (ForkJoinPool-2-worker-5 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.259 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.259 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.259 DEBUG text call: サンプル (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.260 DEBUG block call: block#見出し (ForkJoinPool-2-worker-5 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.260 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.260 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.260 DEBUG text call: YmoScript (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.261 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.261 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.261 DEBUG text call: 　 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.262 DEBUG --- closure code: combiKey=inline#リンク ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<a href="${node.attrs[0]}">${lowers.join()}</a>""";

}--- (ForkJoinPool-2-worker-5 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:46.324 DEBUG block call: block#見出し (ForkJoinPool-2-worker-2 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.326 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.327 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.328 DEBUG text call: 概要 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.329 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.329 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.330 DEBUG text call: 　yakumoは、特定の書式に従うテキストを構造化、変換するためのライブラリです。 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.330 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.331 DEBUG text call: 　Markdownに似ていますが、書式や変換の仕方をカスタマイズすることができます。 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.331 DEBUG block call: block#見出し (ForkJoinPool-2-worker-2 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.332 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.332 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.332 DEBUG text call: ドキュメント (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.333 DEBUG --- closure code: combiKey=block#箇条書き ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	String result = '';
	switch (node.attrs[0]){
		case '順序なし':
			result = """<ul>${lsep}${lowers.join(lsep)}${lsep}</ul>""";
			break;
		case '順序あり':
			result = """<ol>${lsep}${lowers.join(lsep)}${lsep}</ol>""";
			break;
		default:
			warnings << "未対応の箇条書きです。tag=${node.tag}, node=${node.toString()}";
			break;
	}
	return result;

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:46.390 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.391 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.392 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.392 DEBUG text call: 　おいしいカレーを作るには"隠し味"が大切です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.393 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.393 DEBUG text call: 　隠し味にもいろいろなものがあります。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.394 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.394 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.395 DEBUG text call: 　一般家庭で良く使われる<隠し味>を試してみましょう。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.396 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.396 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.396 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.397 DEBUG text call: <p>　おいしいカレーを作るには&quot;隠し味&quot;が大切です。<br/> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.397 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.398 DEBUG text call: 　隠し味にもいろいろなものがあります。</p> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.398 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.399 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.399 DEBUG text call: <p>　一般家庭で良く使われる&lt;隠し味&gt;を試してみましょう。</p> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.400 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.400 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.401 DEBUG text call: 　以下の行タグ、行範囲タグ内では、brタグのみ挿入します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.455 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.456 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.456 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.457 DEBUG text call: ■カレーの作り方 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.457 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.457 DEBUG text call: □そもそもカレーとは (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.458 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.458 DEBUG text call: ▼宇宙開闢 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.458 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.459 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.459 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.459 DEBUG text call: 【＝見出し】カレーの作り方 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.459 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.460 DEBUG text call: 【＝見出し：2】そもそもカレーとは (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.460 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.460 DEBUG text call: 【＝見出し：3】宇宙開闢 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.460 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.461 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.461 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.461 DEBUG text call: 箇条書き (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.461 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.462 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.462 DEBUG text call: 　一文字目に中黒（・）があれば、箇条書きとみなします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.462 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.462 DEBUG text call: 　半角空白でインデントすることで、複数行を記述できます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.463 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.463 DEBUG text call: 　項目の間に空行があっても無視します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.463 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.463 DEBUG text call: 　箇条書きを終了するには、空行の後に中黒で開始しない行を始めてください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.464 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.464 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.464 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.464 DEBUG text call: ・じゃがいも (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.465 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.465 DEBUG text call: ・ニンジンを、 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.465 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.466 DEBUG text call:   二本。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.466 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.466 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.466 DEBUG text call: ・玉ねぎ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.467 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.467 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.467 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.467 DEBUG text call: 【－箇条書き：順序なし】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.468 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.468 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.468 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.468 DEBUG text call: じゃがいも (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.469 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.469 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.469 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.470 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.470 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.470 DEBUG text call: ニンジンを、 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.470 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.471 DEBUG text call: 二本。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.471 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.471 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.472 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.472 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.472 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.472 DEBUG text call: 玉ねぎ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.473 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.473 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.473 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.473 DEBUG text call: 【箇条書き－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.474 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.474 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.474 DEBUG text call: 　一文字目に波線（～）があれば、順序ありの箇条書きとみなします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.475 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.475 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.475 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.476 DEBUG text call: ～お湯を沸かします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.476 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.476 DEBUG text call: ～野菜を切って煮こみます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.476 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.477 DEBUG text call: ～カレー粉を入れて、 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.477 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.477 DEBUG text call:   できあがり。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.478 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.478 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.478 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.478 DEBUG text call: 【－箇条書き：順序あり】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.479 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.479 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.480 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.480 DEBUG text call: お湯を沸かします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.480 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.480 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.481 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.481 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.481 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.482 DEBUG text call: 野菜を切って煮こみます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.482 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.482 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.483 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.483 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.483 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.484 DEBUG text call: カレー粉を入れて、 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.484 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.484 DEBUG text call: できあがり。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.485 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.485 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.485 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.485 DEBUG text call: 【箇条書き－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.486 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.486 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.486 DEBUG text call: 　タブによるインデントで、入れ子にすることができます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.487 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.487 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.488 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.488 DEBUG text call: ・じゃがいも (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.489 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.489 DEBUG text call: ・ニンジン (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.490 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.490 DEBUG text call: ・玉ねぎ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.491 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.491 DEBUG text call: 	・刻むときは注意。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.491 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.491 DEBUG text call: 	  涙がでます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.492 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.492 DEBUG text call: ・カレー粉 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.492 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.493 DEBUG text call: 	～ジャワカレー (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.493 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.494 DEBUG text call: 	～バーモンドカレー (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.494 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.494 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.494 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.495 DEBUG text call: 【－箇条書き：順序なし】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.495 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.495 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.496 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.496 DEBUG text call: じゃがいも (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.496 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.496 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.497 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.497 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.497 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.497 DEBUG text call: ニンジン (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.498 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.498 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.498 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.499 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.499 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.499 DEBUG text call: 玉ねぎ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.499 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.500 DEBUG text call: 【－箇条書き：順序なし】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.500 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.500 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.501 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.501 DEBUG text call: 刻むときは注意。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.502 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.502 DEBUG text call: 涙がでます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.503 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.503 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.504 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.504 DEBUG text call: 【箇条書き－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.505 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.505 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.506 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.506 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.507 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.507 DEBUG text call: カレー粉 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.508 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.508 DEBUG text call: 【－箇条書き：順序あり】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.509 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.509 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.510 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.510 DEBUG text call: ジャワカレー (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.510 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.511 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.511 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.512 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.512 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.513 DEBUG text call: バーモンドカレー (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.513 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.514 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.514 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.515 DEBUG text call: 【箇条書き－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.515 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.515 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.515 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.516 DEBUG text call: 【箇条書き－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.516 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.516 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.517 DEBUG text call: 　順序なし/ありを同じインデントレベルで混在させることはできません。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.517 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.517 DEBUG text call: 　先頭行の一文字目の記号（・、～）によって順序なし/ありを判断します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.517 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.518 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.518 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.518 DEBUG text call: 項目説明 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.519 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.519 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.519 DEBUG text call: 　一文字目に全角コロン（：）があれば、項目説明とみなします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.520 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.520 DEBUG text call: 　対象には行頭に全角コロン（：）を、その説明は行頭に全角ハイフン（－）を記述します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.520 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.521 DEBUG text call: 　説明は半角空白でインデントしても構いません。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.521 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.521 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.521 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.522 DEBUG text call: ：ターメリック (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.522 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.522 DEBUG text call: －香辛料の一種です。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.522 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.522 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.523 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.523 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.523 DEBUG text call: 【－項目説明】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.523 DEBUG text call: YmoScript (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.524 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.524 DEBUG text call: 【－対象】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.524 DEBUG text call: クラスは、DSLを実行することで変換を実現します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.525 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.524 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.525 DEBUG text call: 　ファイルを変換して結果ファイルを出力する DSLを実行するためのメソッドが準備してあります。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.525 DEBUG text call: ターメリック (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.525 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.525 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.525 DEBUG text call: sample.groovy (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.525 DEBUG text call: 【対象－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.526 DEBUG text call: は yakumo記法のテキストファイルを HTML形式に変換します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.526 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.526 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.526 DEBUG text call: 【－説明】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.526 DEBUG text call: sample.txt (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.526 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.527 DEBUG text call: から (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.527 DEBUG text call: 香辛料の一種です。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.527 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.527 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.527 DEBUG text call: sample.html (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.527 DEBUG text call: 【説明－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.527 DEBUG text call: を生成します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.527 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.528 DEBUG text call: 【項目説明－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.528 DEBUG --- closure code: combiKey=block#コード ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	String title = (node.attrs.size() == 0)? '' : """<h1>${node.attrs[0]}</h1>${lsep}""";
	return """<pre class="code">${lsep}${title}${lowers.join(lsep)}${lsep}</pre>""";

}--- (ForkJoinPool-2-worker-5 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:46.528 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.528 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.528 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.529 DEBUG text call: 表 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.529 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.529 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.529 DEBUG text call: 　半角ハイフン３文字で文字列「表」を挟んだ区切り行で囲まれた範囲を、表とみなします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.530 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.530 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.530 DEBUG text call: 　セル区切りに半角スペースやタブを使います。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.530 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.531 DEBUG text call: 　半角スペースやタブの連続はすべて取り除きます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.531 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.531 DEBUG text call: 　見出しには先頭に半角アスタリスク(*)を付与してください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.531 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.532 DEBUG text call: 　セルの内容を空文字にしたり、改行を含む文字列にすることはできません。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.532 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.532 DEBUG text call: 　セルの結合や分割には対応していません。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.532 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.533 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.533 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.533 DEBUG text call: ---表--- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.533 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.534 DEBUG text call: *No.	*産物	*産地 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.534 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.534 DEBUG text call: 1	みかん	愛媛 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.534 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.535 DEBUG text call: 2	茶	静岡 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.535 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.535 DEBUG text call: ---表--- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.535 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.536 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.536 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.536 DEBUG text call: 【－表】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.536 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.537 DEBUG text call: 【－行】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.537 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.537 DEBUG text call: 【＝見出しセル】No. (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.538 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.538 DEBUG text call: 【＝見出しセル】産物 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.538 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.538 DEBUG text call: 【＝見出しセル】産地 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.539 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.539 DEBUG text call: 【行－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.539 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.539 DEBUG text call: 【－行】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.540 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.540 DEBUG text call: 【＝セル】1 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.540 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.540 DEBUG text call: 【＝セル】みかん (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.541 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.541 DEBUG text call: 【＝セル】愛媛 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.541 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.541 DEBUG text call: 【行－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.542 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.542 DEBUG text call: 【－行】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.542 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.543 DEBUG text call: 【＝セル】2 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.543 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.543 DEBUG text call: 【＝セル】茶 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.543 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.544 DEBUG text call: 【＝セル】静岡 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.544 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.544 DEBUG text call: 【行－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.544 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.545 DEBUG text call: 【表－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.545 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.545 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.545 DEBUG text call: 　セル区切りに半角パイプ（|）を使うこともできます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.546 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.546 DEBUG text call: 　必ず行頭、行末に半角パイプを記述してください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.546 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.546 DEBUG text call: 　こちらはセルの内容を空文字にすることができます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.547 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.547 DEBUG text call: 　セルの結合や分割には対応していません。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.547 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.547 DEBUG text call: 　値の前後に半角スペースやタブの連続があれば取り除きます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.548 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.548 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.548 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.549 DEBUG text call: ---表--- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.549 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.549 DEBUG text call: |*名前		|ミケ	|ボギー		| (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.550 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.550 DEBUG text call: |*種類		|三毛猫	|コーギー	| (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.550 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.550 DEBUG text call: |*首輪の色	|		|赤			| (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.551 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.551 DEBUG text call: ---表--- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.551 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.551 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.552 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.552 DEBUG text call: 【－表】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.552 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.552 DEBUG text call: 【－行】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.553 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.553 DEBUG text call: 【＝見出しセル】名前 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.553 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.554 DEBUG text call: 【＝セル】ミケ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.554 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.554 DEBUG text call: 【＝セル】ボギー (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.554 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.555 DEBUG text call: 【行－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.555 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.555 DEBUG text call: 【－行】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.556 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.556 DEBUG text call: 【＝見出しセル】種類 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.556 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.556 DEBUG text call: 【＝セル】三毛猫 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.557 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.557 DEBUG text call: 【＝セル】コーギー (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.557 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.558 DEBUG text call: 【行－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.558 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.558 DEBUG text call: 【－行】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.558 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.559 DEBUG text call: 【＝見出しセル】首輪の色 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.559 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.559 DEBUG text call: 【＝セル】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.559 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.560 DEBUG text call: 【＝セル】赤 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.560 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.560 DEBUG text call: 【行－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.560 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.561 DEBUG text call: 【表－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.561 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.561 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.562 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.562 DEBUG text call: コード (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.562 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.562 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.563 DEBUG text call: 　５つの半角ハイフンを区切り行として、コードとすることができます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.563 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.564 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.564 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.564 DEBUG text call: ----- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.565 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.565 DEBUG text call: println "Hello, World!"; (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.565 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.566 DEBUG text call: println "This is sample code of how to hello to all of the world, which is executed " + Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ"); (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.566 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.566 DEBUG text call: ----- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.567 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.567 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.567 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.567 DEBUG text call: 【－コード】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.568 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.568 DEBUG text call: println "Hello, World!"; (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.568 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.569 DEBUG text call: println "This is sample code of how to hello to all of the world, which is executed " + Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ"); (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.569 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.569 DEBUG text call: 【コード－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.570 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.570 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.570 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.570 DEBUG text call: 整形済 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.571 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.571 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.571 DEBUG text call: 　５つの半角イコールを区切り行として、整形済とすることができます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.571 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.571 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.572 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.572 DEBUG text call: ===== (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.572 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.572 DEBUG text call: ルートフォルダ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.573 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.573 DEBUG text call: 　├ binフォルダ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.573 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.573 DEBUG text call: 　│　└ 実行ファイル (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.574 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.574 DEBUG text call: 　└ confフォルダ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.574 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.574 DEBUG text call: ===== (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.575 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.575 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.575 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.575 DEBUG text call: 【－整形済】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.576 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.576 DEBUG text call: ルートフォルダ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.576 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.576 DEBUG text call: 　├ binフォルダ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.577 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.577 DEBUG text call: 　│　└ 実行ファイル (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.577 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.577 DEBUG text call: 　└ confフォルダ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.578 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.578 DEBUG text call: 【整形済－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.578 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.579 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.579 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.579 DEBUG text call: 行範囲タグの汎用的な記法 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.579 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.579 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.580 DEBUG text call: 　半角ハイフン３つで囲んだ文字列を、行範囲タグのタグ名にします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.580 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.580 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.580 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.581 DEBUG text call: ---引用--- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.581 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.581 DEBUG text call: 　吾輩は猫である。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.582 DEBUG --- closure code: combiKey=block#引用元 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<footer>${lowers.join()}</footer>""";

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:46.586 DEBUG block call: block#箇条書き (ForkJoinPool-2-worker-2 - cl_block#箇条書き.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.587 DEBUG --- closure code: combiKey=block#項目 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<li>${lowers.join("<br/>${lsep}")}</li>""";

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:46.651 DEBUG block call: block#箇条書き (ForkJoinPool-2-worker-3 - cl_block#箇条書き.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.711 DEBUG block call: block#コード (ForkJoinPool-2-worker-5 - cl_block#コード.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.712 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.712 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.713 DEBUG text call: @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/') (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.713 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.713 DEBUG text call: @Grab('io.github.longfish801:yakumo:0.2.00') (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.714 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.714 DEBUG text call: @GrabExclude('org.codehaus.groovy:groovy-all') (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.714 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.714 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.715 DEBUG text call: import io.github.longfish801.yakumo.YmoScript; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.715 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.715 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.715 DEBUG text call: try { (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.716 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.716 DEBUG text call: 	new YmoScript().convert('_bltxt', '_html', new File('sample.txt'), new File('sample.html')); (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.716 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.717 DEBUG text call: } catch (exc){ (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.717 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.717 DEBUG text call: 	println "HTMLへの変換に失敗しました。exc=${exc}"; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.717 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.718 DEBUG text call: } (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.718 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.718 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.718 DEBUG text call: 　convertメソッドの第一引数および第二引数に、変換資材の名前をリストで指定しています。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.719 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.719 DEBUG text call: 　"_bltxt"は yakumo記法に沿ったテキストを bltxt記法へ変換するための変換資材名です。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.719 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.719 DEBUG text call: 　"_html"は bltxt記法によって構造化されたテキストを HTMLへ変換するための変換資材名です。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.720 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.720 DEBUG text call: 　詳しくは (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.720 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.720 DEBUG text call: BLtxt変換 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.721 DEBUG text call: 、 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.721 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.721 DEBUG text call: HTML変換 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.721 DEBUG text call: を参照してください。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.722 DEBUG block call: block#見出し (ForkJoinPool-2-worker-5 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.722 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.722 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.722 DEBUG text call: YmoDocument (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.723 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.723 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.723 DEBUG text call: 　 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.723 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.724 DEBUG text call: YmoDocument (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.724 DEBUG text call: クラスは特定のフォルダ内に格納されたテキストファイルを一括変換することを想定しています。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.724 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.724 DEBUG text call: 　本ドキュメントは YmoDocumentクラスで生成しています。本ドキュメントを生成するサンプルスクリプト（ (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.725 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.725 DEBUG text call: sampleDocument/sample.groovy (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.725 DEBUG text call: ）を以下に示します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.726 DEBUG block call: block#コード (ForkJoinPool-2-worker-5 - cl_block#コード.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.726 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.726 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.726 DEBUG text call: @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/') (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.727 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.727 DEBUG text call: @Grab('io.github.longfish801:yakumo:0.2.00') (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.727 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.727 DEBUG text call: @Grab('org.slf4j:slf4j-api:1.7.25') (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.728 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.728 DEBUG text call: @Grab('ch.qos.logback:logback-classic:1.2.3') (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.728 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.728 DEBUG text call: @GrabExclude('org.codehaus.groovy:groovy-all') (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.729 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.729 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.729 DEBUG text call: import io.github.longfish801.yakumo.YmoDocument; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.729 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.730 DEBUG text call: import org.slf4j.LoggerFactory; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.730 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.730 DEBUG text call: import org.slf4j.Logger; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.730 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.731 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.731 DEBUG text call: Logger LOG = LoggerFactory.getLogger("sample"); (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.731 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.731 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.732 DEBUG text call: try { (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.732 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.732 DEBUG text call: 	new YmoDocument(new File('..')).run(new File('../_html')); (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.732 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.733 DEBUG text call: } catch (exc){ (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.733 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.733 DEBUG text call: 	LOG.error('HTMLへの変換に失敗しました', exc); (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.733 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.734 DEBUG text call: } (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.734 DEBUG block call: block#見出し (ForkJoinPool-2-worker-5 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.734 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.735 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.735 DEBUG text call: 変換の基本的な考え方 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.735 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.735 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.736 DEBUG text call: 　yakumoによる変換は、解析（parse）と適用（apply）の工程から成ります。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.736 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.736 DEBUG text call: 　解析工程は入力に相当します。変換対象のテキストを読みこんで整形し、XMLのような階層関係に構造化された形でメモリ上に保持します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.736 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.736 DEBUG text call: 　適用工程は出力に相当します。メモリ上に保持した内容を目的の形式に加工し、出力します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.737 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.737 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.737 DEBUG text call: 　テキストの整形には washshを利用します。washsh記法で記述されたスクリプトにより、テキストに対して置換処理などを施します。これによりテキストを bltxt文書へ整形します。詳細は (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.737 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.738 DEBUG text call: washsh記法 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.738 DEBUG text call: を参照してください。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.738 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.738 DEBUG text call: 　bltxt記法で記述された文書は、XMLのように階層関係のある構造を持たせることができます。bltxt文書を読みこんで、BLtxtインスタンスへ変換します。詳細は (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.739 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.739 DEBUG text call: BLtxt記法 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.739 DEBUG text call: を参照してください。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.739 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.740 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.740 DEBUG text call: 　BLtxtインスタンスからクロージャで目的の形式に沿ったテキストを生成します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.740 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.740 DEBUG text call: 　clmap記法により、複数のクロージャをまとめたクロージャマップを定義できます。詳細は (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.741 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.741 DEBUG text call: clmap記法 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.741 DEBUG text call: を参照してください。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.741 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.742 DEBUG text call: 　テキストの生成にはテンプレートを利用することもできます。テンプレートの適用には groovy.text.SimpleTemplateEngineを利用します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.742 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.742 DEBUG text call: 　必要に応じて固定ファイルをコピーします。固定ファイルは、変換結果に併せて出力が必要なファイルです。たとえば HTMLへの変換であれば CSSファイルや JavaScriptファイルなどが相当します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.742 DEBUG block call: block#見出し (ForkJoinPool-2-worker-5 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.742 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.743 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.743 DEBUG text call: 変換資材 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.743 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.744 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.744 DEBUG text call: 　変換に必要な各種資材をまとめたものが変換資材です。以下の最低ひとつから構成されます。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.744 DEBUG block call: block#箇条書き (ForkJoinPool-2-worker-5 - cl_block#箇条書き.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.772 DEBUG block call: block#引用元 (ForkJoinPool-2-worker-1 - cl_block#引用元.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.774 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.775 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.775 DEBUG text call: 夏目漱石『吾輩は猫である』 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.775 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.776 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.776 DEBUG text call: ---引用--- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.776 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.776 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.777 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.777 DEBUG text call: 【－引用】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.777 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.777 DEBUG text call: 　吾輩は猫である。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.778 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.778 DEBUG text call: 【＝引用元】夏目漱石『吾輩は猫である』 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.778 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.779 DEBUG text call: 【引用－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.779 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.779 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.779 DEBUG text call: 　もしくは次の書き方も可能です。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.780 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.780 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.780 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.780 DEBUG --- closure code: combiKey=inline ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	warnings << "未対応のインライン要素です。tag=${node.tag}, node=${node.toString()}";
	return (node.nodes.size() == 0)? "【${node.tag}${node.attrs.toString()}】" : "【｜${node.tag}${node.attrs.toString()}】${lowers.join()}【${node.tag}｜】";

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:46.836 DEBUG block call: block#項目 (ForkJoinPool-2-worker-2 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.837 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.838 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.838 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-2 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.838 DEBUG text call: yakumoの使い方 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.839 DEBUG block call: block#項目 (ForkJoinPool-2-worker-2 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.840 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.840 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.840 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-2 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.841 DEBUG text call: BLtxt変換 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.841 DEBUG block call: block#項目 (ForkJoinPool-2-worker-2 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.841 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.841 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.842 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-2 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.842 DEBUG text call: HTML変換 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.844 DEBUG block call: block#見出し (ForkJoinPool-2-worker-2 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.844 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.844 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.845 DEBUG text call: API仕様書 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.845 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.845 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.845 DEBUG text call: 　API仕様書(Groovydoc)は以下を参照してください。 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.846 DEBUG block call: block#箇条書き (ForkJoinPool-2-worker-2 - cl_block#箇条書き.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.846 DEBUG block call: block#項目 (ForkJoinPool-2-worker-2 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.846 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.846 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.847 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-2 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.847 DEBUG text call: Groovydoc (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.849 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.849 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.849 DEBUG text call: 以上 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.850 DEBUG --- closure code: combiKey=bltxt#note ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLtxt bltxt ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	// 註のノードと、そのキーを収集します
	List noteList = bltxt.grepNodes('inline', '註');
	List noteKeys = [];
	noteList.each { noteKeys << it.attrs[0] }
	if (noteKeys.size() == 0) return '';
	
	// 註記のノードと、そのキーを収集します
	List cmntList = bltxt.grepNodes('meta', '註記');
	List cmntKeys = [];
	Map cmntMap = [:];
	cmntList.each {
		cmntKeys << it.attrs[0];
		cmntMap[it.attrs[0]] = it;
	}
	
	// キーをチェックします
	if (noteKeys.unique(false).size() < noteKeys.size()){
		Map map = [:];
		noteKeys.each { map[it] = (map.containsKey(it))? ++ map[it] : 1 }
		warnings << "註のキーに重複があります。：重複キー=${map.findAll { it.value > 1 }.keySet()}";
		return '';
	}
	List diff1 = noteKeys - cmntKeys;
	if (diff1.size() > 0){
		warnings << "註に対する註記の記述漏れがあります。：diff=${diff1}";
		return '';
	}
	List diff2 = cmntKeys - noteKeys;
	if (diff2.size() > 0){
		warnings << "不要な註記あるいは註の記述漏れがあります。：diff=${diff2}";
		return '';
	}
	
	// 註記を返します
	List list = [];
	list << """<aside>""";
	list << """<dl class="note">""";
	int counter = 0;
	noteKeys.each { String noteKey ->
		counter ++;
		List lowers = cmntMap[noteKey].nodes.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };
		list << """<dt><a name="t${counter}" href="#f${counter}">[*${counter}]</a></dt>""";
		list << """<dd>${lowers.join(lsep)}</dd>""";
	}
	list << """</dl>""";
	list << """</aside>""";
	return list.join(lsep);

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:46.910 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.911 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.911 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.912 DEBUG text call: 見出し、小見出し (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.912 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.912 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.912 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.913 DEBUG text call: 挿入図 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.913 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.913 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.914 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.914 DEBUG text call: 箇条書き：項目、対象、説明 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.914 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.914 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.915 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.915 DEBUG text call: 表：見出しセル、セル (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.915 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.916 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.916 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.916 DEBUG text call: 引用元 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.916 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.917 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.917 DEBUG text call: 　以下の行範囲タグ内では brタグ、pタグを付与しません。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.917 DEBUG block call: block#箇条書き (ForkJoinPool-2-worker-3 - cl_block#箇条書き.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.917 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.918 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.918 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.918 DEBUG text call: 生データ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.918 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.919 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.919 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.919 DEBUG text call: 整形済 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.919 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.920 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.920 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.920 DEBUG text call: コード (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.921 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.921 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.921 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.921 DEBUG text call: タイトル、サブタイトル、著者名 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.921 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.922 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.922 DEBUG text call: 　タイトル、サブタイトル、著者名は、含意タグで指定します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.922 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.922 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.923 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.923 DEBUG text call: 　含意タグはマップ headに変換します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.923 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.923 DEBUG text call: 　テンプレートでは、タイトル、サブタイトル、著者名が記述されていれば出力します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.924 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.924 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.924 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.924 DEBUG text call: <head> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.925 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.925 DEBUG text call:  ... 中略 ... (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.925 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.925 DEBUG text call: <% if (head.containsKey('タイトル')){ %><title><%= head['タイトル'].replaceAll(/<.+?>/, '') %></title><% } %> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.926 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.926 DEBUG text call: </head> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.926 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.926 DEBUG text call:  ... 中略 ... (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.927 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.927 DEBUG text call: <header class="container"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.927 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.927 DEBUG text call: <% if (head.containsKey('タイトル')){ %><h1><%= head['タイトル'] %><% if (head.containsKey('サブタイトル')){ %> <small><%= head['サブタイトル'] %></small><% } %></h1><% } %> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.928 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.928 DEBUG text call: <% if (head.containsKey('著者名')){ %><div class="author"><%= head['著者名'] %></div><% } %> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.928 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.929 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.929 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.929 DEBUG text call: 見出しと目次 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.929 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.929 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.930 DEBUG text call: 　hタグを生成します。一番目の属性値が見出しのレベルとなります。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.930 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.930 DEBUG text call: 　省略時はレベル１扱いとなります。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.930 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.931 DEBUG text call: 　タイトルを h1とする関係上、レベル1が h2、レベル2が h3……となります。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.931 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.931 DEBUG text call: 　目次からページ内リンクで移動できるよう、aタグを挿入します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.931 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.932 DEBUG text call: 　name属性には、BLtxt文書を XML化したときの snum属性を利用します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.932 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.932 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.932 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.932 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.933 DEBUG text call: カレーの作り方 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.935 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.936 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.936 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.936 DEBUG text call: 材料の準備 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.936 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.937 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.937 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.937 DEBUG text call: <h2><a name="1">カレーの作り方</a></h2> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.937 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.938 DEBUG text call: <h3><a name="2">材料の準備</a></h3> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.938 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.938 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.938 DEBUG text call: 　見出しから目次を生成し、バインド変数のリスト indexに格納します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.939 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.939 DEBUG text call: 　リスト indexの要素はマップになっており、キー levelに見出しレベルを、キー hrefにリンク先アドレスを、キーtitleにリンク対象文字列を格納しています。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.939 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.939 DEBUG text call: 　テンプレートでは以下のようにして出力しています。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.940 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.940 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.940 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.940 DEBUG text call: <% if (index.size() > 0){ %><nav class="list-group"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.940 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.941 DEBUG text call: <% index.each { Map map -> %><a href="<%= map['href'] %>" class="list-group-item"><%= '　' * (map['level'] - 2) %><%= map['title'] %></a> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.941 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.941 DEBUG text call: <% } %></nav><% } %> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.942 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.942 DEBUG text call: </header> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.942 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.942 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.942 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.943 DEBUG text call: 挿入図 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.943 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.943 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.943 DEBUG text call: 　figureタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.944 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.944 DEBUG text call: 　行タグの属性に画像の説明、画像ファイルへのパスを指定してください。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.944 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.945 DEBUG --- closure code: combiKey=block#挿入図 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	String legend = (lowers.join().empty)? '' : """<figcaption>${lowers.join()}</figcaption>""";
	return """<figure><img src="${node.attrs[1]}" alt="${node.attrs[0]}" class="img-responsive center-block">${legend}</figure>""";

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:46.975 DEBUG inline call: inline#引用 (ForkJoinPool-2-worker-1 - cl_inline.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.993 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.993 DEBUG text call: 　山道を登りながらこう考えた。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.994 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.994 DEBUG inline call: inline#引用 (ForkJoinPool-2-worker-1 - cl_inline.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:46.995 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:46.996 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.996 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.996 DEBUG text call: 【－引用】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.997 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.997 DEBUG text call: 　山道を登りながらこう考えた。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.998 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:46.998 DEBUG text call: 【引用－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:46.999 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:46.999 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.000 DEBUG text call: 　全角コロン（：）で区切ることで、一番目の属性値を指定できます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.000 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.000 DEBUG text call: 　全角コロンの前に行範囲タグ名を、全角コロンの後に属性値を記述します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.001 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.001 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.001 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.002 DEBUG text call: ---注意：中火とは--- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.002 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.003 DEBUG text call: 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.003 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.004 DEBUG text call: ---注意：中火とは--- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.004 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.005 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.005 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.005 DEBUG text call: 【－注意：中火とは】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.006 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.006 DEBUG text call: 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.007 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.007 DEBUG text call: 【注意－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.008 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.008 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.008 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.008 DEBUG text call: マスキング (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.009 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.009 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.009 DEBUG text call: 　washshスクリプトによる整形の対象外とします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.009 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.010 DEBUG text call: 　//***～***//を区切り行として、マスキング対象を囲みます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.010 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.010 DEBUG text call: 　変換後に区切り行は削除します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.010 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.010 DEBUG text call: 　以下のサンプルでは、本来なら箇条書きとして整形されるはずですが、エスケープしているため処理の対象外となっています。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.011 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.011 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.011 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.012 DEBUG text call: //*** (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.012 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.012 DEBUG text call: ・帰りに綿棒を買ってくること。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.012 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.013 DEBUG text call: ***// (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.013 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.013 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.013 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.014 DEBUG text call: ・帰りに綿棒を買ってくること。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.014 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.014 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.014 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.015 DEBUG text call: BLエスケープ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.015 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.015 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.015 DEBUG text call: 　BLtxt記法上の特殊文字をエスケープします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.016 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.016 DEBUG text call: 　半角シャープ５つを区切り行として、エスケープ対象を囲みます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.016 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.016 DEBUG text call: 　変換後に区切り行は削除します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.017 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.017 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.017 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.017 DEBUG text call: ##### (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.018 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.018 DEBUG text call: 墨付きカッコが【強調：そのまま】表示されます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.018 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.018 DEBUG text call: ##### (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.019 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.019 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.019 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.019 DEBUG text call: 墨付きカッコが【強調：そのまま】表示されます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.020 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.020 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.020 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.020 DEBUG text call: 文中タグ／文範囲タグへ整形 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.021 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.021 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.021 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.021 DEBUG text call: リンク (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.022 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.022 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.022 DEBUG text call: 　一番目の属性にリンクとして表示する文字列を、二番目の属性にリンク先アドレスを指定してください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.022 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.023 DEBUG text call: 　一番目の属性のみ指定した場合は、表示する文字列とリンク先アドレスを同じ値とみなします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.023 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.023 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.023 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.024 DEBUG text call: 　詳しくは (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.024 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-1 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:47.024 DEBUG text call: してください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.025 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.025 DEBUG text call: 　 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.025 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-1 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:47.026 DEBUG text call: でネット検索できます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.026 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.027 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.027 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.027 DEBUG text call: 　詳しくは【｜リンク：https://www.google.co.jp/】ネット検索【リンク｜】してください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.028 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.028 DEBUG text call: 　【｜リンク：https://www.google.co.jp/】https://www.google.co.jp/【リンク｜】でネット検索できます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.028 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.028 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.029 DEBUG text call: 　URLのみが記述された行や、全角括弧で囲まれた箇所に URLが記述された場合にも変換します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.029 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.029 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.029 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.030 DEBUG text call: https://www.google.com/ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.030 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.030 DEBUG text call: Google（https://www.google.com/） (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.030 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.031 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.031 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.031 DEBUG text call: 【｜リンク：https://www.google.co.jp/】https://www.google.co.jp/【リンク｜】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.031 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.032 DEBUG text call: Google（【｜リンク：https://www.google.co.jp/】https://www.google.co.jp/【リンク｜】） (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.032 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.032 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.032 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.033 DEBUG text call: 強調 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.033 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.033 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.033 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.034 DEBUG text call: 　必ず最後に (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.034 DEBUG --- closure code: combiKey=inline#強調 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<em>${lowers.join()}</em>""";

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:47.072 DEBUG --- closure code: combiKey=bind#backlink ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	BLtxt bltxt = engine.bltxtMap[outKey];
	Map head = clmap.cl('bltxt#head').call(bltxt);
	String backTo = (outKey == 'index')? '..' : 'index.html';
	return """<a href="${backTo}">戻る</a>""";

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:47.136 DEBUG block call: block#項目 (ForkJoinPool-2-worker-5 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.138 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.138 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.139 DEBUG text call: washshスクリプト (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.139 DEBUG block call: block#項目 (ForkJoinPool-2-worker-5 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.139 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.140 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.140 DEBUG text call: clmapスクリプト (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.140 DEBUG block call: block#項目 (ForkJoinPool-2-worker-5 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.140 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.141 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.141 DEBUG text call: テンプレート (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.141 DEBUG block call: block#項目 (ForkJoinPool-2-worker-5 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.142 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.142 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.142 DEBUG text call: 固定ファイル (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.142 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.143 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.143 DEBUG text call: 　変換資材は、クラスパスにリソースとして作成する場合と、ファイルシステム上にフォルダとして作る場合との二種類あります。どちらも、上記の資材を指定するための変換設定スクリプト ymoSetting.groovyを格納します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.143 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.143 DEBUG text call: 　変換資材がリソースの場合は設定スクリプトを格納したフォルダのリソース名を、変換資材がフォルダの場合は設定スクリプトを格納したフォルダを変換資材として指定します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.144 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.144 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.144 DEBUG text call: 　変換設定スクリプトには以下の変数があらかじめバインドされています。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.145 DEBUG --- closure code: combiKey=block#項目説明 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<dl>${lsep}${lowers.join(lsep)}${lsep}</dl>""";

}--- (ForkJoinPool-2-worker-5 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:47.203 DEBUG block call: block#挿入図 (ForkJoinPool-2-worker-3 - cl_block#挿入図.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.205 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.205 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.206 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.206 DEBUG text call: <div class="img"><img src="img.png" alt="サンプル"></div> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.206 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.206 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.207 DEBUG text call: 　画像にキャプションを付与することもできます。figcaptionタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.207 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.207 DEBUG block call: block#挿入図 (ForkJoinPool-2-worker-3 - cl_block#挿入図.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.207 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.208 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.208 DEBUG text call: これはイメージです。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.208 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.209 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.209 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.209 DEBUG text call: <figure><img src="img.png" alt="サンプル" class="img-responsive center-block"><figcaption>これはイメージです。</figcaption></figure> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.209 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.210 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.210 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.210 DEBUG text call: 註、註記 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.210 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.210 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.211 DEBUG text call: 　註は文中タグで、注記は含意範囲タグで記述します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.211 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.211 DEBUG text call: 　一番目の属性に、紐付けのため共通する文字列を指定してください。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.211 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.212 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.212 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.212 DEBUG text call: 　XML (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.213 DEBUG --- closure code: combiKey=inline#註 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<sup><a id="f${node.serialNo}" href="#t${node.serialNo}">*${node.serialNo}</a></sup>""";

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:47.270 DEBUG inline call: inline#強調 (ForkJoinPool-2-worker-1 - cl_inline#強調.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:47.271 DEBUG text call: をクリックしてください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.271 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.272 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.272 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.272 DEBUG text call: 　必ず最後に【｜強調】確認ボタン【強調｜】をクリックしてください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.272 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.272 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.273 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.273 DEBUG text call: 最強調 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.273 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.273 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.274 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.274 DEBUG text call: 　間違えて (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.274 DEBUG --- closure code: combiKey=inline#最強調 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<strong>${lowers.join()}</strong>""";

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:47.333 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.333 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.334 DEBUG text call: yakumo (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.395 DEBUG block call: block#項目説明 (ForkJoinPool-2-worker-5 - cl_block#項目説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.396 DEBUG --- closure code: combiKey=block#対象 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<dt>${lowers.join("<br/>${lsep}")}</dt>""";

}--- (ForkJoinPool-2-worker-5 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:47.455 DEBUG inline call: inline#註 (ForkJoinPool-2-worker-3 - cl_inline#註.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:47.456 DEBUG text call: をHTML (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.457 DEBUG inline call: inline#註 (ForkJoinPool-2-worker-3 - cl_inline#註.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:47.457 DEBUG text call: に変換します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.457 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.458 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.458 DEBUG text call: 　HTML変換時に通番をふります。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.458 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.458 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.459 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.459 DEBUG text call: <p>　XML<sup><a id="f1" href="#t1">*1</a></sup>をHTML<sup><a id="f2" href="#t2">*2</a></sup>に変換します。</p> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.459 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.459 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.460 DEBUG text call: <dl class="note"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.460 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.460 DEBUG text call: <dt><a name="t1" href="#f1">[*1]</a></dt> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.460 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.461 DEBUG text call: <dd>　eXtensible Markup Languageの略です。</dd> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.461 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.461 DEBUG text call: <dt><a name="t2" href="#f2">[*2]</a></dt> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.462 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.462 DEBUG text call: <dd>　Hyper Text Markup Languageの略です。</dd> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.462 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.462 DEBUG text call: </dl> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.463 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.463 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.463 DEBUG text call: 　生成した註記は、バインド変数 noteに格納します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.463 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.464 DEBUG text call: 　テンプレートでは以下のとおり出力しています。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.464 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.464 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.464 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.465 DEBUG text call: <% if (!note.empty){ %><aside> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.465 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.465 DEBUG text call: <%= note %> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.465 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.466 DEBUG text call: </aside><% } %> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.466 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.466 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.466 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.467 DEBUG text call: 箇条書き (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.467 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.467 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.467 DEBUG text call: 　箇条書きには順序あり、順序なしがあります。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.468 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.468 DEBUG text call: 　それぞれ ul, olタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.468 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.468 DEBUG text call: 　順序あり、順序なしの項目は liタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.468 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.469 DEBUG block call: block#箇条書き (ForkJoinPool-2-worker-3 - cl_block#箇条書き.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.469 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.469 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.470 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.470 DEBUG text call: じゃがいも (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.470 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.471 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.471 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.471 DEBUG text call: ニンジン (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.472 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.472 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.472 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.473 DEBUG text call: 玉ねぎ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.473 DEBUG block call: block#箇条書き (ForkJoinPool-2-worker-3 - cl_block#箇条書き.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.474 DEBUG --- closure code: combiKey=block#説明 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<dd>${lowers.join("<br/>${lsep}")}</dd>""";

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:47.525 DEBUG inline call: inline#最強調 (ForkJoinPool-2-worker-1 - cl_inline#最強調.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:47.527 DEBUG text call: を押さないでください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.527 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.527 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.528 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.528 DEBUG text call: 　間違えて【｜最強調】自爆スイッチ【最強調｜】を押さないでください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.528 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.529 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.529 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.529 DEBUG text call: ぼかし (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.529 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.530 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.530 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.530 DEBUG text call: 　もちろん本当 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.531 DEBUG --- closure code: combiKey=inline#ぼかし ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<span class="small">${lowers.join()}</span>""";

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:47.585 DEBUG block call: block#対象 (ForkJoinPool-2-worker-5 - cl_block#対象.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.587 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.587 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.587 DEBUG text call: yakumo (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.648 DEBUG block call: block#説明 (ForkJoinPool-2-worker-3 - cl_block#説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.649 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.650 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.650 DEBUG text call: 刻むときは注意。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.651 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.651 DEBUG text call: 涙がでます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.659 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.659 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.660 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.660 DEBUG text call: カレー粉 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.660 DEBUG block call: block#箇条書き (ForkJoinPool-2-worker-3 - cl_block#箇条書き.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.661 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.661 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.661 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.662 DEBUG text call: ジャワカレー (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.662 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.663 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.663 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.663 DEBUG text call: バーモンドカレー (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.664 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.665 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.665 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.665 DEBUG text call: <ul> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.665 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.666 DEBUG text call: <li>じゃがいも</li> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.666 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.666 DEBUG text call: <li>ニンジン</li> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.666 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.667 DEBUG text call: <li>玉ねぎ<br/> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.667 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.667 DEBUG text call: <ul> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.667 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.668 DEBUG text call: <li class="dd">→刻むときは注意。<br/> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.668 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.668 DEBUG text call: 　涙がでます。</li> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.669 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.669 DEBUG text call: </ul></li> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.669 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.669 DEBUG text call: <li>カレー粉<br/> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.670 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.670 DEBUG text call: <ol> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.670 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.671 DEBUG text call: <li>ジャワカレー</li> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.671 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.671 DEBUG text call: <li>バーモンドカレー</li> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.672 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.672 DEBUG text call: </ol></li> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.672 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.672 DEBUG text call: </ul> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.673 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.673 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.673 DEBUG text call: 　項目説明の箇条書きは以下となります。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.673 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.674 DEBUG text call: 　項目説明の対象と説明は、それぞれ dt, ddタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.674 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.674 DEBUG block call: block#項目説明 (ForkJoinPool-2-worker-3 - cl_block#項目説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.675 DEBUG block call: block#対象 (ForkJoinPool-2-worker-3 - cl_block#対象.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.675 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.675 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.675 DEBUG text call: ターメリック (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.676 DEBUG block call: block#説明 (ForkJoinPool-2-worker-3 - cl_block#説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.676 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.676 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.677 DEBUG text call: 香辛料の一種です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.677 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.678 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.678 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.678 DEBUG text call: <dl> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.678 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.679 DEBUG text call: <dt>ターメリック</dt> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.679 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.679 DEBUG text call: <dd>香辛料の一種です。</dd> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.679 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.680 DEBUG text call: </dl> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.680 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.680 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.680 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.681 DEBUG text call: 表 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.681 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.681 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.681 DEBUG text call: 　tableタグ（class属性値は"table"）を生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.682 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.682 DEBUG text call: 　第一属性に小見出しを指定することもできます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.682 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.683 DEBUG --- closure code: combiKey=block#表 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	List list = [];
	list << '<aside class="panel panel-default">'
	if (node.attrs.size() > 0) list << """<header class="panel-heading">${node.attrs[0]}</header>""";
	list << """<table class="table">""";
	list << lowers.join(lsep);
	list << """</table>""";
	list << """</aside>""";
	return list.join(lsep);

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:47.716 DEBUG inline call: inline#ぼかし (ForkJoinPool-2-worker-1 - cl_inline#ぼかし.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:47.717 DEBUG text call: ですよ。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.718 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.719 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.719 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.720 DEBUG text call: 　もちろん本当【｜ぼかし】かもしれない【ぼかし｜】ですよ。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.721 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.721 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.721 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.722 DEBUG text call: 削除 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.723 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.723 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.723 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.724 DEBUG text call: 　富士山の標高は (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.724 DEBUG inline call: inline#削除 (ForkJoinPool-2-worker-1 - cl_inline.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:47.725 DEBUG text call: ３７７６メートルです。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.726 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.726 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.726 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.727 DEBUG text call: 　富士山の標高は【｜削除】３７７７メートル【削除｜】３７７６メートルです。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.728 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.728 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.728 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.729 DEBUG text call: 傍点 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.730 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.730 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.731 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.731 DEBUG text call: 　まだ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.732 DEBUG --- closure code: combiKey=inline#傍点 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<span class="dot">${lowers.join()}</span>""";

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:47.785 DEBUG block call: block#説明 (ForkJoinPool-2-worker-5 - cl_block#説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.787 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.787 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.787 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:47.788 DEBUG text call: YmoScriptクラス (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.788 DEBUG block call: block#対象 (ForkJoinPool-2-worker-5 - cl_block#対象.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.789 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.789 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.789 DEBUG text call: convName (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.790 DEBUG block call: block#説明 (ForkJoinPool-2-worker-5 - cl_block#説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.790 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.790 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.790 DEBUG text call: 変換名（変換設定スクリプトの格納フォルダ名）、変換資材がリソースの場合のみ (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.791 DEBUG block call: block#対象 (ForkJoinPool-2-worker-5 - cl_block#対象.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.791 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.791 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.791 DEBUG text call: convDir (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.792 DEBUG block call: block#説明 (ForkJoinPool-2-worker-5 - cl_block#説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.792 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.792 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.793 DEBUG text call: 変換設定スクリプトの格納フォルダ（java.io.File）、変換資材がフォルダの場合のみ (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.793 DEBUG block call: block#見出し (ForkJoinPool-2-worker-5 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.793 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.793 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.794 DEBUG text call: YmoScript (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.794 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.794 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.794 DEBUG text call: 　 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.794 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:47.795 DEBUG text call: YmoScriptクラス (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.795 DEBUG text call: は、テキストの変換のための DSLを実行するためのクラスです。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.795 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.795 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.796 DEBUG text call: 　たとえば上述のサンプルは、以下の DSLを実行することと等価です。詳細は groovydocを参照してください。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.796 DEBUG block call: block#コード (ForkJoinPool-2-worker-5 - cl_block#コード.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.796 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.796 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.797 DEBUG text call: import io.github.longfish801.yakumo.YmoScript; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.797 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.797 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.797 DEBUG text call: List convNames = ['_bltxt', '_html']; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.798 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.798 DEBUG text call: File inFile = new File('sample.txt'),  (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.798 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.798 DEBUG text call: File outFile = new File('sample.html')); (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.799 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.799 DEBUG text call: String sourceKey = FilenameUtils.getBaseName(inFile.name); (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.799 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.799 DEBUG text call: new YmoScript().script { (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.800 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.800 DEBUG text call: 	convNames.each { configure(it) } (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.800 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.800 DEBUG text call: 	engine.sourceMap[sourceKey] = inFile; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.801 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.801 DEBUG text call: 	engine.outMap[sourceKey] = outFile; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.801 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.801 DEBUG text call: 	assetHandler.setup(outFile.canonicalFile.parentFile, 'overwrite'); (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.802 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.802 DEBUG text call: 	doLast { (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.802 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.802 DEBUG text call: 		assetHandler.copy(); (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.803 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.803 DEBUG text call: 	} (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.803 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.803 DEBUG text call: } (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.804 DEBUG block call: block#見出し (ForkJoinPool-2-worker-5 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.804 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.804 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.804 DEBUG text call: YmoDocument (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.805 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.805 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.805 DEBUG text call: 　 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.805 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:47.805 DEBUG text call: YmoDocument (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.806 DEBUG text call: は、特定のフォルダ直下に存在するテキストファイルの一括変換を実現します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.806 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.806 DEBUG text call: 　以下のように、変換対象のファイルが格納されたフォルダの直下に、サブフォルダとして変換資材が格納されていることを前提としています。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.806 DEBUG block call: block#コード (ForkJoinPool-2-worker-5 - cl_block#コード.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.807 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.807 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.807 DEBUG text call: 変換対象フォルダ/ (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.807 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.807 DEBUG text call: ├変換資材格納フォルダ/ (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.808 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.808 DEBUG text call: │　├変換スクリプト ymoScript.groovy (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.808 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.808 DEBUG text call: │　├変換設定スクリプト ymoSetting.groovy (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.809 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.809 DEBUG text call: │　└変換資材のファイル（washshスクリプトなど） (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.809 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.809 DEBUG text call: ├変換対象ファイル１.txt (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.810 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.810 DEBUG text call: │　… (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.810 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.811 DEBUG text call: └変換対象ファイルｎ.txt (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.811 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.811 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.811 DEBUG text call: 　変換スクリプトは以下の変数があらかじめバインドされています。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.811 DEBUG block call: block#項目説明 (ForkJoinPool-2-worker-5 - cl_block#項目説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.812 DEBUG block call: block#対象 (ForkJoinPool-2-worker-5 - cl_block#対象.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.813 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.813 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.813 DEBUG text call: scriptFile (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.813 DEBUG block call: block#説明 (ForkJoinPool-2-worker-5 - cl_block#説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.814 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.814 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.814 DEBUG text call: 変換スクリプト（java.io.File） (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.815 DEBUG block call: block#対象 (ForkJoinPool-2-worker-5 - cl_block#対象.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.815 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.815 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.815 DEBUG text call: yakumo (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.816 DEBUG block call: block#説明 (ForkJoinPool-2-worker-5 - cl_block#説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.816 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.816 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.817 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:47.817 DEBUG text call: YmoDocumentクラス (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.817 DEBUG block call: block#対象 (ForkJoinPool-2-worker-5 - cl_block#対象.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.817 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.818 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.818 DEBUG text call: convDir (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.818 DEBUG block call: block#説明 (ForkJoinPool-2-worker-5 - cl_block#説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.818 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.819 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.819 DEBUG text call: 変換設定スクリプトの格納フォルダ（java.io.File） (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.819 DEBUG block call: block#対象 (ForkJoinPool-2-worker-5 - cl_block#対象.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.819 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.820 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.820 DEBUG text call: targetDir (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.821 DEBUG block call: block#説明 (ForkJoinPool-2-worker-5 - cl_block#説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.821 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.821 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.821 DEBUG text call: 変換対象フォルダ（java.io.File） (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.824 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.824 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.824 DEBUG text call: yakumoの使い方 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.850 DEBUG block call: block#表 (ForkJoinPool-2-worker-3 - cl_block#表.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.852 DEBUG --- closure code: combiKey=block#行 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<tr>${lowers.join()}</tr>""";

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:47.916 DEBUG inline call: inline#傍点 (ForkJoinPool-2-worker-1 - cl_inline#傍点.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:47.917 DEBUG text call: じゃないか。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.918 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.918 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.918 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.919 DEBUG text call: 　まだ【｜傍点】午前三時【傍点｜】じゃないか。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.919 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.919 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.920 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.920 DEBUG text call: 縦中横 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.920 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.920 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:47.921 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:47.921 DEBUG text call: 　シェイクスピア全集の第 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:47.921 DEBUG --- closure code: combiKey=inline#縦中横 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return lowers.join();

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:47.976 DEBUG block call: block#行 (ForkJoinPool-2-worker-3 - cl_block#行.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:47.978 DEBUG --- closure code: combiKey=block#見出しセル ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<th>${lowers.join(lsep)}</th>""";

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:48.039 DEBUG inline call: inline#縦中横 (ForkJoinPool-2-worker-1 - cl_inline#縦中横.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:48.041 DEBUG text call: 巻に記述されています。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.042 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.042 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.043 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.043 DEBUG text call: 　シェイクスピア全集の第【｜縦中横】10【縦中横｜】巻に記述されています。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.044 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.044 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.044 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.044 DEBUG text call: ルビ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.045 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.045 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.045 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.045 DEBUG text call: 　 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.046 DEBUG --- closure code: combiKey=inline#ルビ ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return "<ruby>${lowers.join()}<rp>［</rp><rt>${node.attrs[0]}</rt><rp>］</rp></ruby>";

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:48.100 DEBUG block call: block#見出しセル (ForkJoinPool-2-worker-3 - cl_block#見出しセル.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.102 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.103 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.103 DEBUG text call: No. (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.104 DEBUG block call: block#見出しセル (ForkJoinPool-2-worker-3 - cl_block#見出しセル.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.104 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.104 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.105 DEBUG text call: 産物 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.105 DEBUG block call: block#見出しセル (ForkJoinPool-2-worker-3 - cl_block#見出しセル.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.105 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.106 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.106 DEBUG text call: 産地 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.108 DEBUG block call: block#行 (ForkJoinPool-2-worker-3 - cl_block#行.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.108 DEBUG --- closure code: combiKey=block#セル ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<td>${lowers.join(lsep)}</td>""";

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:48.161 DEBUG inline call: inline#ルビ (ForkJoinPool-2-worker-1 - cl_inline#ルビ.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:48.162 DEBUG text call: 係は言った。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.163 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.163 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.164 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.164 DEBUG text call: 　【｜ルビ：すいとう】出納【ルビ｜】係は言った。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.164 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.165 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.165 DEBUG text call: 以上 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.166 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.166 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.166 DEBUG text call: BLtxt変換 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.222 DEBUG block call: block#セル (ForkJoinPool-2-worker-3 - cl_block#セル.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.224 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.224 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.224 DEBUG text call: 1 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.225 DEBUG block call: block#セル (ForkJoinPool-2-worker-3 - cl_block#セル.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.225 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.225 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.226 DEBUG text call: みかん (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.226 DEBUG block call: block#セル (ForkJoinPool-2-worker-3 - cl_block#セル.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.226 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.227 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.227 DEBUG text call: 愛媛 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.227 DEBUG block call: block#行 (ForkJoinPool-2-worker-3 - cl_block#行.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.228 DEBUG block call: block#セル (ForkJoinPool-2-worker-3 - cl_block#セル.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.228 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.228 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.228 DEBUG text call: 2 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.229 DEBUG block call: block#セル (ForkJoinPool-2-worker-3 - cl_block#セル.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.229 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.229 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.230 DEBUG text call: 茶 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.230 DEBUG block call: block#セル (ForkJoinPool-2-worker-3 - cl_block#セル.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.230 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.231 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.231 DEBUG text call: 静岡 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.232 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.232 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.232 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.232 DEBUG text call: <aside class="panel panel-default"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.232 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.233 DEBUG text call: <header class="panel-heading">各県の名産</header> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.233 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.233 DEBUG text call: <table class="table"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.233 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.234 DEBUG text call: <tr><th>No.</th><th>産物</th><th>産地</th></tr> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.234 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.234 DEBUG text call: <tr><td>1</td><td>みかん</td><td>愛媛</td></tr> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.234 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.235 DEBUG text call: <tr><td>2</td><td>茶</td><td>静岡</td></tr> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.235 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.235 DEBUG text call: </table> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.236 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.236 DEBUG text call: </aside> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.236 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.236 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.237 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.237 DEBUG text call: コラム (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.237 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.237 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.237 DEBUG text call: 　asideタグ（class属性値は"column"）を生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.238 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.238 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.238 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.238 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.239 DEBUG text call: 　日本人の四割は血液型がＯ型です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.239 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.239 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.239 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.239 DEBUG text call: <aside class="panel panel-primary"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.240 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.240 DEBUG text call: <div class="panel-body"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.240 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.240 DEBUG text call: <p>　日本人の四割は血液型がＯ型です。</p> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.241 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.241 DEBUG text call: </div> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.241 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.241 DEBUG text call: </aside> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.242 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.242 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.242 DEBUG text call: 　第一属性に小見出しを指定することもできます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.242 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.243 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.243 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.243 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.243 DEBUG text call: 　８月３１日は野菜の日です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.244 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.244 DEBUG text call: 　野菜を食べましょう。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.244 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.244 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.245 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.245 DEBUG text call: <aside class="panel panel-primary"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.245 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.245 DEBUG text call: <header class="panel-heading">８月３１日は</header> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.246 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.246 DEBUG text call: <div class="panel-body"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.246 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.246 DEBUG text call: <p>　８月３１日は野菜の日です。<br/> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.246 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.247 DEBUG text call: 　野菜を食べましょう。</p> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.247 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.247 DEBUG text call: </div> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.247 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.248 DEBUG text call: </aside> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.248 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.248 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.248 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.249 DEBUG text call: 注意 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.249 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.249 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.249 DEBUG text call: 　asideタグ（class属性値は"attention"）を生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.249 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.250 DEBUG text call: 　第一属性に小見出しを指定することもできます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.250 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.250 DEBUG --- closure code: combiKey=block#注意 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	List list = [];
	list << """<aside class="panel panel-warning">""";
	if (node.attrs.size() > 0) list << """<header class="panel-heading">${node.attrs[0]}</header>""";
	list << """<div class="panel-body">""";
	list << lowers.join(lsep);
	list << """</div>""";
	list << """</aside>""";
	return list.join(lsep);

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:48.312 DEBUG block call: block#注意 (ForkJoinPool-2-worker-3 - cl_block#注意.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.313 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.314 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.314 DEBUG text call: 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.314 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.314 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.315 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.315 DEBUG text call: <aside class="panel panel-warning"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.315 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.315 DEBUG text call: <header class="panel-heading">中火とは</header> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.316 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.316 DEBUG text call: <div class="panel-body"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.316 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.316 DEBUG text call: <p>　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。</p> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.317 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.317 DEBUG text call: </div> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.317 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.317 DEBUG text call: </aside> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.318 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.318 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.318 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.318 DEBUG text call: 引用、引用元 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.319 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.319 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.319 DEBUG text call: 　blockquoteタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.319 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.320 DEBUG text call: 　第一属性に小見出しを指定することもできます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.320 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.320 DEBUG text call: 　行タグで引用元を指定することもできます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.320 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.321 DEBUG --- closure code: combiKey=block#引用 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	String title = (node.attrs.size() == 0)? '' : """<h1>${node.attrs[0]}</h1>${lsep}""";
	return """<blockquote>${lsep}${title}${lowers.join(lsep)}${lsep}</blockquote>""";

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:48.382 DEBUG block call: block#引用 (ForkJoinPool-2-worker-3 - cl_block#引用.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.383 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.383 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.384 DEBUG text call: 　山路を登りながら、こう考えた。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.384 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.384 DEBUG text call: 　智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.385 DEBUG block call: block#引用元 (ForkJoinPool-2-worker-3 - cl_block#引用元.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.385 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.385 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.386 DEBUG text call: 夏目漱石『草枕』 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.386 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.386 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.386 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.387 DEBUG text call: <blockquote> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.387 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.387 DEBUG text call: <p>　山路を登りながら、こう考えた。<br/> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.388 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.388 DEBUG text call: 　智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。</p> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.388 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.388 DEBUG text call: <footer>夏目漱石『草枕』</footer> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.389 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.389 DEBUG text call: </blockquote> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.389 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.389 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.390 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.390 DEBUG text call: コード (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.390 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.390 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.391 DEBUG text call: 　preタグ（class属性値は"code"）を生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.391 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.391 DEBUG text call: 　第一属性に小見出しを指定することもできます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.391 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.392 DEBUG block call: block#コード (ForkJoinPool-2-worker-3 - cl_block#コード.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.392 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.392 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.392 DEBUG text call: println "Hello, World!"; (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.393 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.393 DEBUG text call: println "This is sample code of how to hello to all of the world, which is executed " + Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ"); (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.393 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.393 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.394 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.394 DEBUG text call: <pre class="code"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.394 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.394 DEBUG text call: println &quot;Hello, World!&quot;; (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.395 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.395 DEBUG text call: println &quot;This is sample code of how to hello to all of the world, which is executed &quot; + Date().format(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSZ&quot;); (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.395 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.395 DEBUG text call: </pre> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.396 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.396 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.396 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.396 DEBUG text call: 整形済 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.397 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.397 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.397 DEBUG text call: 　preタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.397 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.397 DEBUG text call: 　第一属性に小見出しを指定することもできます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.398 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.398 DEBUG --- closure code: combiKey=block#整形済 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	String title = (node.attrs.size() == 0)? '' : """<h1>${node.attrs[0]}</h1>${lsep}""";
	return """<pre>${title}${lowers.join(lsep)}</pre>""";

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:48.460 DEBUG block call: block#整形済 (ForkJoinPool-2-worker-3 - cl_block#整形済.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.461 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.461 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.462 DEBUG text call: ルートフォルダ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.462 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.462 DEBUG text call: 　├ binフォルダ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.463 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.463 DEBUG text call: 　│　└ 実行ファイル (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.463 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.464 DEBUG text call: 　└ confフォルダ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.464 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.464 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.465 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.465 DEBUG text call: <pre>ルートフォルダ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.465 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.465 DEBUG text call: 　├ binフォルダ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.466 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.466 DEBUG text call: 　│　└ 実行ファイル (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.466 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.466 DEBUG text call: 　└ confフォルダ</pre> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.467 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.467 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.467 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.467 DEBUG text call: 生データ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.467 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.468 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.468 DEBUG text call: 　記述内容をそのまま変換結果に反映したいときに使用します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.468 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.468 DEBUG text call: 　BLtxt記法上の特殊文字はエスケープします。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.469 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.469 DEBUG text call: 　HTMLタグのエスケープをしません。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.469 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.469 DEBUG --- closure code: combiKey=block#生データ ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """${node.nodes.collect { clmap.cl('raw#para').call(it) }.join(lsep)}""";

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:48.535 DEBUG block call: block#生データ (ForkJoinPool-2-worker-3 - cl_block#生データ.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.536 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.537 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.537 DEBUG text call: 墨付きカッコが (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.537 DEBUG inline call: inline#強調 (ForkJoinPool-2-worker-3 - cl_inline#強調.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:48.538 DEBUG text call: 表示されます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.538 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.538 DEBUG text call: <strong>HTMLタグのエスケープもしません。</strong> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.539 DEBUG --- closure code: combiKey=raw#para ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	if (node.xmlTag != 'para') warnings << "生データに不適切なタグが格納されています。tag=${node.tag}, node=${node.toString()}";
	return node.nodes.collect { clmap.cl('raw#line').call(it) }.join(lsep);
}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:48.601 DEBUG --- closure code: combiKey=raw#line ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	if (node.xmlTag != 'line') warnings << "生データに不適切なタグが格納されています。tag=${node.tag}, node=${node.toString()}";
	return node.nodes.collect { clmap.cl("raw#${it.xmlTag}").call(it) }.join();
}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:48.664 DEBUG --- closure code: combiKey=raw#text ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	if (node.xmlTag != 'text') warnings << "生データに不適切なタグが格納されています。tag=${node.tag}, node=${node.toString()}";
	return node.text;

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:48.725 DEBUG --- closure code: combiKey=raw#inline ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	if (node.xmlTag != 'inline') warnings << "生データに不適切なタグが格納されています。tag=${node.tag}, node=${node.toString()}";
	return node.nodes.collect { clmap.cl('raw#text').call(it) }.join();
}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:48.788 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.788 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.788 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.789 DEBUG text call: 墨付きカッコが【重要：そのまま】表示されます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.789 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.789 DEBUG text call: &lt;strong&gt;HTMLタグのエスケープもしません。&lt;/strong&gt; (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.790 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.790 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.790 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.790 DEBUG text call: インライン要素 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.790 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.791 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.791 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.791 DEBUG text call: リンク (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.791 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.792 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.792 DEBUG text call: 　aタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.792 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.792 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.792 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.793 DEBUG text call: 　詳しくは (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.793 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-3 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:48.793 DEBUG text call: ネット検索 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.794 DEBUG text call: してください。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.794 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.794 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.794 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.795 DEBUG text call: 　詳しくは<a href="https://www.google.co.jp/">ネット検索</a>してください。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.795 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.795 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.795 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.795 DEBUG text call: 強調 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.796 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.796 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.796 DEBUG text call: 　emタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.796 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.797 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.797 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.797 DEBUG text call: 　必ず最後に (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.797 DEBUG inline call: inline#強調 (ForkJoinPool-2-worker-3 - cl_inline#強調.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:48.798 DEBUG text call: 確認ボタン (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.798 DEBUG text call: をクリックしてください。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.798 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.798 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.799 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.799 DEBUG text call: 　必ず最後に<em>確認ボタン</em>をクリックしてください。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.799 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.799 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.799 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.800 DEBUG text call: 最強調 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.800 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.800 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.800 DEBUG text call: 　strongタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.801 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.801 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.801 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.801 DEBUG text call: 　間違えて (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.802 DEBUG inline call: inline#最強調 (ForkJoinPool-2-worker-3 - cl_inline#最強調.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:48.802 DEBUG text call: 自爆スイッチ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.802 DEBUG text call: を押さないでください。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.802 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.803 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.803 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.803 DEBUG text call: 　間違えて<strong>自爆スイッチ</strong>を押さないでください。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.803 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.804 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.804 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.804 DEBUG text call: 傍点 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.804 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.804 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.805 DEBUG text call: 　spanタグ（class属性値は"dot"）を生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.805 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.805 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.805 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.806 DEBUG text call: 　ここが (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.806 DEBUG inline call: inline#傍点 (ForkJoinPool-2-worker-3 - cl_inline#傍点.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:48.806 DEBUG text call: 重要 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.806 DEBUG text call: です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.807 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.807 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.807 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.807 DEBUG text call: 　ここが<span class="dot">重要</span>です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.808 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.808 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.808 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.808 DEBUG text call: ぼかし (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.809 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.809 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.809 DEBUG text call: 　spanタグ（class属性値は"small"）を生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.809 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.809 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.810 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.810 DEBUG text call: 　もちろん本当 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.810 DEBUG inline call: inline#ぼかし (ForkJoinPool-2-worker-3 - cl_inline#ぼかし.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:48.810 DEBUG text call: かもしれない (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.811 DEBUG text call: ですよ。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.811 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.811 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.811 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.812 DEBUG text call: 　もちろん本当<span class="small">かもしれない</span>ですよ。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.812 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.812 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.812 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.813 DEBUG text call: 訂正 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.813 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.813 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.813 DEBUG text call: 　sタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.813 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.814 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.814 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.814 DEBUG text call: 　富士山の標高は (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.815 DEBUG --- closure code: combiKey=inline#訂正 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<s>${lowers.join()}</s>""";

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:26:48.877 DEBUG inline call: inline#訂正 (ForkJoinPool-2-worker-3 - cl_inline#訂正.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:48.878 DEBUG text call: ３７７７メートル (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.878 DEBUG text call: ３７７６メートルです。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.879 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.879 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.879 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.879 DEBUG text call: 　富士山の標高は<s>３７７７メートル</s>３７７６メートルです。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.880 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.880 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.880 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.880 DEBUG text call: 縦中横 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.881 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.881 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.881 DEBUG text call: 　縦中横には対応していないため、特に加工しません。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.881 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.881 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.882 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.882 DEBUG text call: 　シェイクスピア全集の第 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.882 DEBUG inline call: inline#縦中横 (ForkJoinPool-2-worker-3 - cl_inline#縦中横.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:48.883 DEBUG text call: 10 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.883 DEBUG text call: 巻に記述されています。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.883 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.883 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.883 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.884 DEBUG text call: 　シェイクスピア全集の第10巻に記述されています。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.884 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.884 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.884 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.885 DEBUG text call: ルビ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.885 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.885 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.885 DEBUG text call: 　rubyタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.886 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.886 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.886 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.886 DEBUG text call: 　 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.886 DEBUG inline call: inline#ルビ (ForkJoinPool-2-worker-3 - cl_inline#ルビ.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:26:48.887 DEBUG text call: 出納 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.887 DEBUG text call: 係は言った。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.887 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:26:48.888 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.888 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.888 DEBUG text call: 　<ruby>出納<rp>［</rp><rt>すいとう</rt><rp>］</rp></ruby>係は言った。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.888 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.888 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.889 DEBUG text call: 以上 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.892 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.892 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.892 DEBUG text call: 　eXtensible Markup Languageの略です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.893 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.893 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.893 DEBUG text call: 　Hyper Text Markup Languageの略です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.894 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:26:48.894 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:26:48.894 DEBUG text call: HTML変換 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:26:48.897 DEBUG copy assets outDir=..\..\docs (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler#copy,109)
2019/05/04 08:26:48.899 DEBUG copy assets setName=asset path=sampleDocument/app.log (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:26:48.906 DEBUG copy assets setName=asset path=sampleDocument/logback.xml (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:26:48.908 DEBUG copy assets setName=asset path=sampleDocument/sample.groovy (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:26:48.912 DEBUG copy assets setName=asset path=sampleScript/sample.groovy (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:26:48.914 DEBUG copy assets setName=asset path=sampleScript/sample.html (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:26:48.915 DEBUG copy assets setName=asset path=sampleScript/sample.txt (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:26:48.919 DEBUG copy assets setName=asset path=sampleScript/_asset/css/sim2ruby.css (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:26:48.923 DEBUG copy assets setName=asset path=sampleScript/_asset/honoka/css/bootstrap.min.css (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:26:48.929 DEBUG copy assets setName=asset path=sampleScript/_asset/honoka/fonts/glyphicons-halflings-regular.eot (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:26:48.940 DEBUG copy assets setName=asset path=sampleScript/_asset/honoka/fonts/glyphicons-halflings-regular.svg (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:26:48.946 DEBUG copy assets setName=asset path=sampleScript/_asset/honoka/fonts/glyphicons-halflings-regular.ttf (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:26:48.951 DEBUG copy assets setName=asset path=sampleScript/_asset/honoka/fonts/glyphicons-halflings-regular.woff (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:26:48.956 DEBUG copy assets setName=asset path=sampleScript/_asset/honoka/fonts/glyphicons-halflings-regular.woff2 (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:26:48.961 DEBUG copy assets setName=asset path=sampleScript/_asset/honoka/js/bootstrap.min.js (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:26:48.978 DEBUG copy assets setName=asset path=sampleScript/_asset/js/jquery-1.12.4.min.js (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:26:49.013 DEBUG copy assets setName=asset path=sampleScript/_asset/script.js (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:26:49.024 DEBUG copy assets setName=asset path=sampleScript/_asset/style.css (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
2019/05/04 08:43:12.629 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.YmoScript, name=YmoScript.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.2.00.jar!/io/github/longfish801/yakumo/YmoScript.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:43:12.832 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.YmoDocument, name=YmoDocument.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.2.00.jar!/io/github/longfish801/yakumo/YmoDocument.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:43:12.869 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.ConvertEngine, name=ConvertEngine.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.2.00.jar!/io/github/longfish801/yakumo/ConvertEngine.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:43:12.905 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.tpac.parser.TeaParty, name=TeaParty.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/parser/TeaParty.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:43:13.020 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.TemplateHandler, name=TemplateHandler.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.2.00.jar!/io/github/longfish801/yakumo/TemplateHandler.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:43:13.055 INFO  ログフォルダを作成しました。path=C:\Users\longfish\AppData\Local\Temp\yakumo (main - ConvertEngine.groovy,io.github.longfish801.yakumo.ConvertEngine#getDefaultLogDir,68)
2019/05/04 08:43:13.107 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.YmoScript, name=_bltxt/ymoSetting.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.2.00.jar!/io/github/longfish801/yakumo/_bltxt/ymoSetting.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:43:13.345 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.washsh.WashMaker, name=WashMaker.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/washsh/jars/washsh-0.2.00.jar!/io/github/longfish801/washsh/WashMaker.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:43:13.384 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:43:13.481 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:43:13.541 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:43:13.610 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:43:13.690 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:43:13.763 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:43:13.856 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:43:13.939 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:43:14.027 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - NativeMethodAccessorImpl.java,sun.reflect.NativeMethodAccessorImpl#invoke0,-2)
2019/05/04 08:43:14.611 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.yakumo.YmoScript, name=_html/ymoSetting.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/yakumo/jars/yakumo-0.2.00.jar!/io/github/longfish801/yakumo/_html/ymoSetting.groovy (main - null,sun.reflect.GeneratedMethodAccessor49#invoke,-1)
2019/05/04 08:43:14.679 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.clmap.ClmapMaker, name=ClmapMaker.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/clmap/jars/clmap-0.2.00.jar!/io/github/longfish801/clmap/ClmapMaker.groovy (main - null,sun.reflect.GeneratedMethodAccessor49#invoke,-1)
2019/05/04 08:43:14.701 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - null,sun.reflect.GeneratedMethodAccessor49#invoke,-1)
2019/05/04 08:43:14.769 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.clmap.Clinfo, name=Clinfo.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/clmap/jars/clmap-0.2.00.jar!/io/github/longfish801/clmap/Clinfo.groovy (main - null,sun.reflect.GeneratedMethodAccessor49#invoke,-1)
2019/05/04 08:43:14.783 DEBUG パッケージからリソースを参照しました。clazz=interface io.github.longfish801.tpac.element.TeaHandle, name=TeaHandle.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/tpac/jars/tpac-0.2.00.jar!/io/github/longfish801/tpac/element/TeaHandle.groovy (main - null,sun.reflect.GeneratedMethodAccessor49#invoke,-1)
2019/05/04 08:43:15.171 DEBUG washsh実行開始 key=washsh:_bltxt (Thread-3 - Washsh.groovy,io.github.longfish801.washsh.Washsh#wash,70)
2019/05/04 08:43:15.171 DEBUG washsh実行開始 key=washsh:_bltxt (Thread-4 - Washsh.groovy,io.github.longfish801.washsh.Washsh#wash,70)
2019/05/04 08:43:15.171 DEBUG washsh実行開始 key=washsh:_bltxt (Thread-2 - Washsh.groovy,io.github.longfish801.washsh.Washsh#wash,70)
2019/05/04 08:43:15.171 DEBUG washsh実行開始 key=washsh:_bltxt (Thread-1 - Washsh.groovy,io.github.longfish801.washsh.Washsh#wash,70)
2019/05/04 08:43:15.177 DEBUG パッケージからリソースを参照しました。clazz=class io.github.longfish801.bltxt.BLtxt, name=BLtxt.groovy, url=jar:file:/C:/Users/longfish/.groovy/grapes/io.github.longfish801/bltxt/jars/bltxt-0.2.00.jar!/io/github/longfish801/bltxt/BLtxt.groovy (ForkJoinPool-1-worker-3 - null,sun.reflect.GeneratedMethodAccessor49#invoke,-1)
2019/05/04 08:43:15.293 DEBUG washsh実行終了 key=washsh:_bltxt (Thread-4 - Washsh.groovy,io.github.longfish801.washsh.Washsh#wash,89)
2019/05/04 08:43:15.366 DEBUG 索引作成：meta タイトル (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.369 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.400 DEBUG washsh実行終了 key=washsh:_bltxt (Thread-3 - Washsh.groovy,io.github.longfish801.washsh.Washsh#wash,89)
2019/05/04 08:43:15.414 DEBUG 索引作成：meta タイトル (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.415 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.426 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.426 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.427 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.427 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.429 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.429 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.430 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.430 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.430 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.430 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.431 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.431 DEBUG 索引作成：block 箇条書き (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.431 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.432 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.432 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.432 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.432 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.433 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.433 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.434 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.434 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.434 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.435 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.435 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.436 DEBUG 索引作成：block コード (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.435 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.436 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.436 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.436 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.437 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.437 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.437 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.438 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.438 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.439 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.439 DEBUG 索引作成：block 箇条書き (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.440 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.440 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.440 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.440 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.441 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.441 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.442 DEBUG 索引作成：para  (ForkJoinPool-1-worker-2 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.442 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.443 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.443 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.445 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.446 DEBUG 索引作成：block コード (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.447 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.448 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.450 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.451 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.453 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.453 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.454 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.456 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.456 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.458 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.459 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.460 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.461 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.462 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.463 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.464 DEBUG 索引作成：block 箇条書き (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.465 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.466 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.467 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.468 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.468 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.469 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.470 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.470 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.471 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.471 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.472 DEBUG 索引作成：block 項目説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.472 DEBUG 索引作成：block 対象 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.473 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.474 DEBUG 索引作成：block 説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.474 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.475 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.475 DEBUG 索引作成：block 対象 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.476 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.477 DEBUG 索引作成：block 説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.477 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.478 DEBUG 索引作成：block 対象 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.478 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.479 DEBUG 索引作成：block 説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.480 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.481 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.481 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.482 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.482 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.483 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.484 DEBUG 索引作成：block コード (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.484 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.485 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.488 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.488 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.489 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.489 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.490 DEBUG 索引作成：block コード (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.491 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.492 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.493 DEBUG 索引作成：block 項目説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.494 DEBUG 索引作成：block 対象 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.495 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.496 DEBUG 索引作成：block 説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.496 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.497 DEBUG 索引作成：block 対象 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.498 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.499 DEBUG 索引作成：block 説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.500 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.501 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.502 DEBUG 索引作成：block 対象 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.503 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.504 DEBUG 索引作成：block 説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.504 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.505 DEBUG 索引作成：block 対象 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.506 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.508 DEBUG 索引作成：block 説明 (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.508 DEBUG 索引作成：para  (ForkJoinPool-1-worker-4 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.524 DEBUG washsh実行終了 key=washsh:_bltxt (Thread-2 - Washsh.groovy,io.github.longfish801.washsh.Washsh#wash,89)
2019/05/04 08:43:15.537 DEBUG 索引作成：meta タイトル (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.538 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.538 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.539 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.540 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.541 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.542 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.542 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.543 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.544 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.545 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.545 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.546 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.547 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.548 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.549 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.549 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.551 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.551 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.553 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.554 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.554 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.556 DEBUG washsh実行終了 key=washsh:_bltxt (Thread-1 - Washsh.groovy,io.github.longfish801.washsh.Washsh#wash,89)
2019/05/04 08:43:15.557 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.558 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.558 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.559 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.559 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.560 DEBUG 索引作成：meta タイトル (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.560 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.561 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.562 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.561 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.562 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.562 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.563 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.564 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.564 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.564 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.564 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.565 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.566 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.567 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.568 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.568 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.568 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.568 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.569 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.569 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.569 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.570 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.570 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.570 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.570 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.571 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.571 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.571 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.572 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.573 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.573 DEBUG 索引作成：block 箇条書き (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.573 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.573 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.574 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.574 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.574 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.575 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.575 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.576 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.576 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.576 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.577 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.577 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.578 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.578 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.580 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.581 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.582 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.583 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.584 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.584 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.584 DEBUG 索引作成：block 箇条書き (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.585 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.585 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.586 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.586 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.587 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.587 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.588 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.590 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.590 DEBUG 索引作成：block 項目 (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.590 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.590 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.591 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.591 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.591 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.592 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.592 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.593 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.593 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.594 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.595 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.595 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.596 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.597 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.597 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.598 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.598 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.599 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.599 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.600 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.601 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.601 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.601 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.601 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.602 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.602 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.602 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.603 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.603 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.603 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.603 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.604 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.604 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.604 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.605 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.605 DEBUG 索引作成：block 引用元 (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.605 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.605 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.606 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.606 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.606 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.607 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.607 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.608 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.608 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.608 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.609 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.609 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.609 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.609 DEBUG 索引作成：inline 引用 (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.610 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.610 DEBUG 索引作成：inline 引用 (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.610 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.610 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.611 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.611 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.611 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.612 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.612 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.612 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.613 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.613 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.613 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.613 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.614 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.614 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.614 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.615 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.615 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.615 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.616 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.616 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.616 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.617 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.617 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.618 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.618 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.618 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.619 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.619 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.620 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.620 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.620 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.621 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.621 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.621 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.622 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.622 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.622 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.623 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.623 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.623 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.623 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.624 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.624 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.625 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.626 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.626 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.626 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.627 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.627 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.628 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.628 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.629 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.629 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.629 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.629 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.630 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.630 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.630 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.631 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.631 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.631 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.631 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.632 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.632 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.632 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.633 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.633 DEBUG 索引作成：inline リンク (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.634 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.635 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.635 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.635 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.636 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.636 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.636 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.637 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.637 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.638 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.638 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.638 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.638 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.639 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.639 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.640 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.640 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.640 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.641 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.642 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.642 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.643 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.643 DEBUG 索引作成：inline 強調 (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.643 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.644 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.644 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.644 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.645 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.645 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.646 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.647 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.647 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.647 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.647 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.648 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.648 DEBUG 索引作成：inline 最強調 (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.649 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.649 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.650 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.650 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.650 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.651 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.651 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.651 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.652 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.653 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.653 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.653 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.654 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.653 DEBUG 索引作成：inline ぼかし (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.654 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.654 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.655 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.655 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.656 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.656 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.656 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.656 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.657 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.657 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.658 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.658 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.658 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.659 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.658 DEBUG 索引作成：inline 削除 (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.659 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.659 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.660 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.660 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.660 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.661 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.661 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.661 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.661 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.662 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.662 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.662 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.663 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.663 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.664 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.663 DEBUG 索引作成：inline 傍点 (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.664 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.664 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.665 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.665 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.665 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.666 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.666 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.666 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.666 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.666 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.667 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.667 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.668 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.668 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.668 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.669 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.668 DEBUG 索引作成：inline 縦中横 (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.669 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.669 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.669 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.670 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.670 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.670 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.671 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.671 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.671 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.671 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.672 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.672 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.672 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.673 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.673 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.673 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.674 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.673 DEBUG 索引作成：inline ルビ (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.674 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.674 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.675 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.675 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.675 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.676 DEBUG 索引作成：para  (ForkJoinPool-1-worker-1 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.676 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.677 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.677 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.678 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.678 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.679 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.679 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.680 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.680 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.681 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.682 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.682 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.683 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.683 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.684 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.684 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.685 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.685 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.685 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.686 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.686 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.687 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.687 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.688 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.688 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.689 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.690 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.690 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.691 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.691 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.692 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.692 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.693 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.693 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.694 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.694 DEBUG 索引作成：block 見出し (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.695 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.695 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.696 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.696 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.696 DEBUG 索引作成：block コラム (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.697 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.697 DEBUG 索引作成：para  (ForkJoinPool-1-worker-3 - BLRoot.groovy,io.github.longfish801.bltxt.node.BLRoot$_refreshIndex_closure2#doCall,52)
2019/05/04 08:43:15.747 DEBUG --- closure code: combiKey= ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey, def out ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	Map binds = [:];
	binds['title'] = clmap.cl('bind#title').call(outKey);
	binds['fulltitle'] = clmap.cl('bind#fulltitle').call(outKey);
	binds['author'] = clmap.cl('bind#author').call(outKey);
	binds['index'] = clmap.cl('bind#index').call(outKey);
	binds['body'] = clmap.cl('bind#body').call(outKey);
	binds['backlink'] = clmap.cl('bind#backlink').call(outKey);
	return engine.templateHandler.apply(outKey, out, outKey, binds);

}--- (ForkJoinPool-2-worker-5 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:15.747 DEBUG --- closure code: combiKey= ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey, def out ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	Map binds = [:];
	binds['title'] = clmap.cl('bind#title').call(outKey);
	binds['fulltitle'] = clmap.cl('bind#fulltitle').call(outKey);
	binds['author'] = clmap.cl('bind#author').call(outKey);
	binds['index'] = clmap.cl('bind#index').call(outKey);
	binds['body'] = clmap.cl('bind#body').call(outKey);
	binds['backlink'] = clmap.cl('bind#backlink').call(outKey);
	return engine.templateHandler.apply(outKey, out, outKey, binds);

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:15.747 DEBUG --- closure code: combiKey= ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey, def out ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	Map binds = [:];
	binds['title'] = clmap.cl('bind#title').call(outKey);
	binds['fulltitle'] = clmap.cl('bind#fulltitle').call(outKey);
	binds['author'] = clmap.cl('bind#author').call(outKey);
	binds['index'] = clmap.cl('bind#index').call(outKey);
	binds['body'] = clmap.cl('bind#body').call(outKey);
	binds['backlink'] = clmap.cl('bind#backlink').call(outKey);
	return engine.templateHandler.apply(outKey, out, outKey, binds);

}--- (ForkJoinPool-2-worker-3 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:15.747 DEBUG --- closure code: combiKey= ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey, def out ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	Map binds = [:];
	binds['title'] = clmap.cl('bind#title').call(outKey);
	binds['fulltitle'] = clmap.cl('bind#fulltitle').call(outKey);
	binds['author'] = clmap.cl('bind#author').call(outKey);
	binds['index'] = clmap.cl('bind#index').call(outKey);
	binds['body'] = clmap.cl('bind#body').call(outKey);
	binds['backlink'] = clmap.cl('bind#backlink').call(outKey);
	return engine.templateHandler.apply(outKey, out, outKey, binds);

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:15.841 DEBUG --- closure code: combiKey=bind#title ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	BLtxt bltxt = engine.bltxtMap[outKey];
	Map head = clmap.cl('bltxt#head').call(bltxt);
	return (head.containsKey('タイトル'))? head['タイトル'].replaceAll(/\<[^\<]+?\>/, '') : '';

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:16.170 DEBUG --- closure code: combiKey=bltxt#head ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLtxt bltxt ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	// ルート要素直下のメタ要素についてマップを生成します
	Map map = [:];
	bltxt.root.nodes.findAll { it.xmlTag == 'meta' }.each { BLNode node ->
		map[node.tag] = node.nodes.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) }.join(lsep);
	}
	return map;

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:16.445 DEBUG --- closure code: combiKey=para ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('para call');

	List lowers = node.nodes.collect { clmap.cl('line').call(it) };
	String result = '';
	switch (node.parent.xmlTag){
		case 'bltxt':
			// 最上位にあるならば pタグを付与します
			result = '<p>' + lowers.join("<br/>" + lsep) + '</p>';
			break;
		case 'block':	// 上位がブロック要素の場合
			switch (node.parent.tag){
				case '見出し':
				case '小見出し':
				case '挿入図':
				case '項目':
				case '対象':
				case '説明':
				case '見出しセル':
				case 'セル':
				case '引用元':
					result = lowers.join("<br/>" + lsep);
					break;
				case '生データ':
				case '整形済':
				case 'コード':
					result = lowers.join(lsep);
					break;
				default:
					result = '<p>' + lowers.join("<br/>" + lsep) + '</p>';
			}
			break;
		case 'meta':
			if (node.parent.isSingle()){	// 単一の場合
				result = lowers.join("<br/>" + lsep);
			} else {
				result = '<p>' + lowers.join("<br/>" + lsep) + '</p>';
			}
			break;
		default:
			result = lowers.join("<br/>" + lsep);
			break;
	}
	return result;

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:16.731 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:16.732 DEBUG --- closure code: combiKey=line ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('line call');
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };
	return lowers.join();

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:16.800 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:16.870 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:16.944 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:17.088 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:17.091 DEBUG --- closure code: combiKey=text ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
	import org.apache.commons.text.StringEscapeUtils;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('text call: {}', node.text);
	return StringEscapeUtils.escapeHtml4(node.text);

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:17.158 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:17.233 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:17.304 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:17.397 DEBUG text call: yakumo (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:17.437 DEBUG --- closure code: combiKey=bind#fulltitle ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	BLtxt bltxt = engine.bltxtMap[outKey];
	Map head = clmap.cl('bltxt#head').call(bltxt);
	String subtitle = (head.containsKey('サブタイトル'))? """ <small>${head['サブタイトル']}</small>""" : '';
	return (head.containsKey('タイトル'))? """<h1>${head['タイトル']}${subtitle}</h1>""" : '';

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:17.501 DEBUG text call: yakumoの使い方 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:17.582 DEBUG text call: BLtxt変換 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:17.671 DEBUG text call: HTML変換 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:17.753 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:17.754 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:17.754 DEBUG text call: yakumo (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:17.755 DEBUG --- closure code: combiKey=bind#author ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	BLtxt bltxt = engine.bltxtMap[outKey];
	Map head = clmap.cl('bltxt#head').call(bltxt);
	return (head.containsKey('著者名'))? """<div class="author">${head['著者名']}</div>""" : '';

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:17.814 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:17.814 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:17.814 DEBUG text call: yakumoの使い方 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:17.885 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:17.885 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:17.886 DEBUG text call: BLtxt変換 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:17.943 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:17.943 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:17.943 DEBUG text call: HTML変換 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.012 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.012 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.013 DEBUG text call: yakumo (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.014 DEBUG --- closure code: combiKey=bind#index ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	BLtxt bltxt = engine.bltxtMap[outKey];
	Map head = clmap.cl('bltxt#head').call(bltxt);
	return clmap.cl('bltxt#index').call(bltxt).collect { Map map ->
		"""<a href="${map['href']}" class="list-group-item">${'　' * (map['level'] - 2)}${map['title']}</a>"""
	}.join(lsep);

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:18.073 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.073 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.073 DEBUG text call: yakumoの使い方 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.130 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.131 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.131 DEBUG text call: BLtxt変換 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.188 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.188 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.189 DEBUG text call: HTML変換 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.256 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.256 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.256 DEBUG text call: yakumo (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.257 DEBUG --- closure code: combiKey=bltxt#index ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLtxt bltxt ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	// 目次を生成します
	List list = [];
	bltxt.grepNodes('block', '見出し').each { BLNode node ->
		int level;
		try {
			level = (node.attrs.size() > 0)? Integer.parseInt(node.attrs[0]) + 1 : 2;
		} catch (NumberFormatException exc){
			throw new Exception('見出しレベルの型変換に失敗しました。見出しレベルは半角数字を指定してください。', exc);
		}
		Map map = [:];
		map['level'] = level;
		map['href'] = """#id${level}_${node.serialNo}""";
		map['title'] = """${node.nodes.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) }.join()}""";
		list << map;
	}
	return list;

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:18.319 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.320 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.320 DEBUG text call: yakumoの使い方 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.379 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.380 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.380 DEBUG text call: BLtxt変換 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.440 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.441 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.441 DEBUG text call: HTML変換 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.514 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.515 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.515 DEBUG text call: 概要 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.516 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.516 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.516 DEBUG text call: ドキュメント (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.517 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.518 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.518 DEBUG text call: API仕様書 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.523 DEBUG --- closure code: combiKey=bind#body ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	BLtxt bltxt = engine.bltxtMap[outKey];
	Map head = clmap.cl('bltxt#head').call(bltxt);
	List body = clmap.cl('bltxt#body').call(bltxt);
	String note = clmap.cl('bltxt#note').call(bltxt);
	if (!note.empty) note = lsep + lsep + note;
	return body.join(lsep + lsep) + note;

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:18.588 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.588 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.589 DEBUG text call: yakumoとは (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.590 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.590 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.591 DEBUG text call: サンプル (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.592 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.593 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.593 DEBUG text call: YmoScript (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.594 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.595 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.595 DEBUG text call: YmoDocument (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.596 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.597 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.597 DEBUG text call: 変換の基本的な考え方 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.598 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.598 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.599 DEBUG text call: 変換資材 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.599 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.600 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.600 DEBUG text call: YmoScript (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.601 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.601 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.602 DEBUG text call: YmoDocument (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.657 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.657 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.658 DEBUG text call: 概要 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.658 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.658 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.659 DEBUG text call: 行タグ／行範囲タグへ整形 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.659 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.660 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.660 DEBUG text call: 見出し (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.660 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.660 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.661 DEBUG text call: 箇条書き (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.661 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.662 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.662 DEBUG text call: 項目説明 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.662 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.662 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.663 DEBUG text call: 表 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.664 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.664 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.665 DEBUG text call: コード (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.665 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.666 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.666 DEBUG text call: 整形済 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.667 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.667 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.667 DEBUG text call: 行範囲タグの汎用的な記法 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.668 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.668 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.669 DEBUG text call: マスキング (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.669 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.669 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.670 DEBUG text call: BLエスケープ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.670 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.670 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.670 DEBUG text call: 文中タグ／文範囲タグへ整形 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.671 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.671 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.672 DEBUG text call: リンク (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.672 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.672 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.673 DEBUG text call: 強調 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.673 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.673 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.674 DEBUG text call: 最強調 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.675 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.675 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.675 DEBUG text call: ぼかし (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.676 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.676 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.677 DEBUG text call: 削除 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.677 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.677 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.678 DEBUG text call: 傍点 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.678 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.678 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.679 DEBUG text call: 縦中横 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.679 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.679 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.679 DEBUG text call: ルビ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.729 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.729 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.729 DEBUG text call: 概要 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.730 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.730 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.731 DEBUG text call: ブロック要素 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.731 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.732 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.732 DEBUG text call: 改行と段落 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.733 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.734 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.734 DEBUG text call: タイトル、サブタイトル、著者名 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.734 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.735 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.735 DEBUG text call: 見出しと目次 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.735 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.735 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.736 DEBUG text call: 挿入図 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.736 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.736 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.737 DEBUG text call: 註、註記 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.737 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.737 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.737 DEBUG text call: 箇条書き (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.738 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.738 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.738 DEBUG text call: 表 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.739 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.739 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.739 DEBUG text call: コラム (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.739 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.740 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.740 DEBUG text call: 注意 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.740 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.740 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.741 DEBUG text call: 引用、引用元 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.741 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.741 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.741 DEBUG text call: コード (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.742 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.742 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.743 DEBUG text call: 整形済 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.743 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.744 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.744 DEBUG text call: 生データ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.745 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.745 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.746 DEBUG text call: インライン要素 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.746 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.747 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.747 DEBUG text call: リンク (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.747 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.748 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.748 DEBUG text call: 強調 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.748 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.748 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.749 DEBUG text call: 最強調 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.749 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.749 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.750 DEBUG text call: 傍点 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.750 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.750 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.750 DEBUG text call: ぼかし (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.751 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.751 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.751 DEBUG text call: 訂正 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.751 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.752 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.752 DEBUG text call: 縦中横 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.752 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.752 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.753 DEBUG text call: ルビ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.790 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.790 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.790 DEBUG text call: yakumo (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.792 DEBUG --- closure code: combiKey=bltxt#body ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLtxt bltxt ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	return bltxt.root.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:18.860 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.860 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.860 DEBUG text call: yakumoの使い方 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.919 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.919 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.919 DEBUG text call: BLtxt変換 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:18.979 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:18.979 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:18.980 DEBUG text call: HTML変換 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.039 DEBUG --- closure code: combiKey=block#見出し ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	int level;
	try {
		level = (node.attrs.size() > 0)? Integer.parseInt(node.attrs[0]) + 1 : 2;
	} catch (NumberFormatException exc){
		throw new Exception('見出しレベルの型変換に失敗しました。見出しレベルは半角数字を指定してください。', exc);
	}
	return """<h${level}><a name="id${level}_${node.serialNo}"></a>${lowers.join()}</h${level}>""";

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:19.277 DEBUG block call: block#見出し (ForkJoinPool-2-worker-2 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.278 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.279 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.279 DEBUG text call: 概要 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.280 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.280 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.280 DEBUG text call: 　yakumoは、特定の書式に従うテキストを構造化、変換するためのライブラリです。 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.280 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.280 DEBUG text call: 　Markdownに似ていますが、書式や変換の仕方をカスタマイズすることができます。 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.281 DEBUG block call: block#見出し (ForkJoinPool-2-worker-2 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.281 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.281 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.282 DEBUG text call: ドキュメント (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.282 DEBUG --- closure code: combiKey=block#箇条書き ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	String result = '';
	switch (node.attrs[0]){
		case '順序なし':
			result = """<ul>${lsep}${lowers.join(lsep)}${lsep}</ul>""";
			break;
		case '順序あり':
			result = """<ol>${lsep}${lowers.join(lsep)}${lsep}</ol>""";
			break;
		default:
			warnings << "未対応の箇条書きです。tag=${node.tag}, node=${node.toString()}";
			break;
	}
	return result;

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:19.346 DEBUG block call: block#見出し (ForkJoinPool-2-worker-5 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.347 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.348 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.348 DEBUG text call: yakumoとは (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.349 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.349 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.350 DEBUG text call: 　yakumoは、特定の記法に従うテキストを他の形式へ変換するためのライブラリです。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.350 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.351 DEBUG text call: 　名称は、主に約物で書式を実現することに由来しています。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.351 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.351 DEBUG text call: 　あらかじめ yakumo記法に沿ったテキストを HTMLへ変換するための資材が準備されています。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.352 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.352 DEBUG text call: 　記法や変換方法を拡張／改変することもできます。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.353 DEBUG block call: block#見出し (ForkJoinPool-2-worker-5 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.353 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.354 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.354 DEBUG text call: サンプル (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.355 DEBUG block call: block#見出し (ForkJoinPool-2-worker-5 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.355 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.355 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.356 DEBUG text call: YmoScript (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.356 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.357 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.357 DEBUG text call: 　 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.358 DEBUG --- closure code: combiKey=inline#リンク ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<a href="${node.attrs[0]}">${lowers.join()}</a>""";

}--- (ForkJoinPool-2-worker-5 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:19.410 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.411 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.411 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.412 DEBUG text call: 概要 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.412 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.412 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.412 DEBUG text call: 　yakumoは変換名「_bltxt」（BLtxt変換）を用意しています。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.413 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.413 DEBUG text call: 　BLtxt変換は、yakumo記法で記述されたテキストを BLtxt文書に変換します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.413 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.413 DEBUG text call: 　washshスクリプトによる処理内容について、以下に説明します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.414 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.414 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.414 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.414 DEBUG text call: 行タグ／行範囲タグへ整形 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.415 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.415 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.415 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.415 DEBUG text call: 見出し (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.416 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.416 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.416 DEBUG text call: 　行頭に■、□、▼があれば、見出しとみなします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.417 DEBUG --- closure code: combiKey=block#コラム ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	List list = [];
	list << """<aside class="panel panel-primary">""";
	if (node.attrs.size() > 0) list << """<header class="panel-heading">${node.attrs[0]}</header>""";
	list << """<div class="panel-body">""";
	list << lowers.join(lsep);
	list << """</div>""";
	list << """</aside>""";
	return list.join(lsep);

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:19.476 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.477 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.477 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.477 DEBUG text call: 概要 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.478 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.478 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.478 DEBUG text call: 　yakumoは変換名「_html」（HTML変換）を用意しています。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.479 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.479 DEBUG text call: 　HTML変換は、BLtxt文書を HTML5形式へ変換するための設定です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.479 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.479 DEBUG text call: 　変換に利用しているクロージャマップの処理内容について、以下に説明します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.480 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.480 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.480 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.480 DEBUG text call: ブロック要素 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.481 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.481 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.481 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.481 DEBUG text call: 改行と段落 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.482 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.482 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.482 DEBUG text call: 　改行は brタグを挿入します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.482 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.483 DEBUG text call: 　段落は pタグで囲みます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.483 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.483 DEBUG text call: 　なお、空行が二行以上あっても、変換結果には反映されません。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.483 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.484 DEBUG text call: 　HTML文法上の特殊文字があるときはエスケープします。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.542 DEBUG block call: block#箇条書き (ForkJoinPool-2-worker-2 - cl_block#箇条書き.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.543 DEBUG --- closure code: combiKey=block#項目 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<li>${lowers.join("<br/>${lsep}")}</li>""";

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:19.604 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:19.605 DEBUG text call: YmoScript (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.605 DEBUG text call: クラスは、DSLを実行することで変換を実現します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.606 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.606 DEBUG text call: 　ファイルを変換して結果ファイルを出力する DSLを実行するためのメソッドが準備してあります。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.606 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:19.606 DEBUG text call: sample.groovy (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.607 DEBUG text call: は yakumo記法のテキストファイルを HTML形式に変換します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.607 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:19.607 DEBUG text call: sample.txt (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.607 DEBUG text call: から (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.608 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:19.608 DEBUG text call: sample.html (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.608 DEBUG text call: を生成します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.609 DEBUG --- closure code: combiKey=block#コード ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	String title = (node.attrs.size() == 0)? '' : """<h1>${node.attrs[0]}</h1>${lsep}""";
	return """<pre class="code">${lsep}${title}${lowers.join(lsep)}${lsep}</pre>""";

}--- (ForkJoinPool-2-worker-5 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:19.665 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.667 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.667 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.667 DEBUG text call: ■カレーの作り方 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.667 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.668 DEBUG text call: □そもそもカレーとは (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.668 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.668 DEBUG text call: ▼宇宙開闢 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.669 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.669 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.669 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.670 DEBUG text call: 【＝見出し】カレーの作り方 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.670 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.670 DEBUG text call: 【＝見出し：2】そもそもカレーとは (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.670 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.671 DEBUG text call: 【＝見出し：3】宇宙開闢 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.671 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.671 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.671 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.672 DEBUG text call: 箇条書き (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.672 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.672 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.672 DEBUG text call: 　一文字目に中黒（・）があれば、箇条書きとみなします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.673 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.673 DEBUG text call: 　半角空白でインデントすることで、複数行を記述できます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.673 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.673 DEBUG text call: 　項目の間に空行があっても無視します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.674 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.674 DEBUG text call: 　箇条書きを終了するには、空行の後に中黒で開始しない行を始めてください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.674 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.674 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.675 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.675 DEBUG text call: ・じゃがいも (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.675 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.675 DEBUG text call: ・ニンジンを、 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.676 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.676 DEBUG text call:   二本。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.676 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.677 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.677 DEBUG text call: ・玉ねぎ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.677 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.677 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.678 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.678 DEBUG text call: 【－箇条書き：順序なし】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.678 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.679 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.679 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.679 DEBUG text call: じゃがいも (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.679 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.680 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.680 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.680 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.680 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.681 DEBUG text call: ニンジンを、 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.681 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.681 DEBUG text call: 二本。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.681 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.682 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.682 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.682 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.683 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.683 DEBUG text call: 玉ねぎ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.683 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.684 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.684 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.684 DEBUG text call: 【箇条書き－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.684 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.685 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.685 DEBUG text call: 　一文字目に波線（～）があれば、順序ありの箇条書きとみなします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.685 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.685 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.686 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.686 DEBUG text call: ～お湯を沸かします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.686 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.686 DEBUG text call: ～野菜を切って煮こみます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.687 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.687 DEBUG text call: ～カレー粉を入れて、 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.687 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.688 DEBUG text call:   できあがり。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.688 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.689 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.689 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.689 DEBUG text call: 【－箇条書き：順序あり】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.690 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.690 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.690 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.690 DEBUG text call: お湯を沸かします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.691 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.691 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.691 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.692 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.692 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.692 DEBUG text call: 野菜を切って煮こみます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.692 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.693 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.693 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.693 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.693 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.694 DEBUG text call: カレー粉を入れて、 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.694 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.694 DEBUG text call: できあがり。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.695 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.695 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.695 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.695 DEBUG text call: 【箇条書き－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.696 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.696 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.696 DEBUG text call: 　タブによるインデントで、入れ子にすることができます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.697 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.697 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.697 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.697 DEBUG text call: ・じゃがいも (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.698 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.698 DEBUG text call: ・ニンジン (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.698 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.699 DEBUG text call: ・玉ねぎ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.699 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.699 DEBUG text call: 	・刻むときは注意。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.699 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.700 DEBUG text call: 	  涙がでます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.700 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.700 DEBUG text call: ・カレー粉 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.701 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.701 DEBUG text call: 	～ジャワカレー (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.701 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.702 DEBUG text call: 	～バーモンドカレー (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.702 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.702 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.703 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.703 DEBUG text call: 【－箇条書き：順序なし】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.703 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.704 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.704 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.704 DEBUG text call: じゃがいも (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.704 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.705 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.705 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.705 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.706 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.706 DEBUG text call: ニンジン (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.706 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.706 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.707 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.707 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.707 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.707 DEBUG text call: 玉ねぎ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.708 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.708 DEBUG text call: 【－箇条書き：順序なし】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.708 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.709 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.709 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.710 DEBUG text call: 刻むときは注意。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.710 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.711 DEBUG text call: 涙がでます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.711 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.711 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.711 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.712 DEBUG text call: 【箇条書き－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.712 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.713 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.713 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.713 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.714 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.714 DEBUG text call: カレー粉 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.714 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.715 DEBUG text call: 【－箇条書き：順序あり】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.715 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.715 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.716 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.716 DEBUG text call: ジャワカレー (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.716 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.716 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.717 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.717 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.717 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.717 DEBUG text call: バーモンドカレー (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.718 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.718 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.718 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.719 DEBUG text call: 【箇条書き－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.719 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.719 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.719 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.720 DEBUG text call: 【箇条書き－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.720 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.720 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.721 DEBUG text call: 　順序なし/ありを同じインデントレベルで混在させることはできません。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.721 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.721 DEBUG text call: 　先頭行の一文字目の記号（・、～）によって順序なし/ありを判断します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.721 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.722 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.722 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.722 DEBUG text call: 項目説明 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.722 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.723 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.723 DEBUG text call: 　一文字目に全角コロン（：）があれば、項目説明とみなします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.723 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.724 DEBUG text call: 　対象には行頭に全角コロン（：）を、その説明は行頭に全角ハイフン（－）を記述します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.724 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.724 DEBUG text call: 　説明は半角空白でインデントしても構いません。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.724 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.725 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.725 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.725 DEBUG text call: ：ターメリック (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.725 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.726 DEBUG text call: －香辛料の一種です。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.726 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.726 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.727 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.727 DEBUG text call: 【－項目説明】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.728 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.728 DEBUG text call: 【－対象】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.728 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.729 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.729 DEBUG text call: ターメリック (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.729 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.729 DEBUG text call: 【対象－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.730 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.730 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.730 DEBUG text call: 【－説明】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.730 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.730 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.730 DEBUG text call: 　おいしいカレーを作るには"隠し味"が大切です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.731 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.731 DEBUG text call: 香辛料の一種です。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.731 DEBUG text call: 　隠し味にもいろいろなものがあります。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.731 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.731 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.732 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.732 DEBUG text call: 【説明－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.732 DEBUG text call: 　一般家庭で良く使われる<隠し味>を試してみましょう。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.732 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.732 DEBUG text call: 【項目説明－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.733 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.733 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.733 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.733 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.733 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.734 DEBUG text call: <p>　おいしいカレーを作るには&quot;隠し味&quot;が大切です。<br/> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.734 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.734 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.734 DEBUG text call: 　隠し味にもいろいろなものがあります。</p> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.734 DEBUG text call: 表 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.734 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.735 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.735 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.735 DEBUG text call: <p>　一般家庭で良く使われる&lt;隠し味&gt;を試してみましょう。</p> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.735 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.735 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.735 DEBUG text call: 　半角ハイフン３文字で文字列「表」を挟んだ区切り行で囲まれた範囲を、表とみなします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.736 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.736 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.736 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.736 DEBUG text call: 　以下の行タグ、行範囲タグ内では、brタグのみ挿入します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.736 DEBUG block call: block#箇条書き (ForkJoinPool-2-worker-3 - cl_block#箇条書き.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.736 DEBUG text call: 　セル区切りに半角スペースやタブを使います。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.736 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.737 DEBUG text call: 　半角スペースやタブの連続はすべて取り除きます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.737 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.737 DEBUG text call: 　見出しには先頭に半角アスタリスク(*)を付与してください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.737 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.738 DEBUG text call: 　セルの内容を空文字にしたり、改行を含む文字列にすることはできません。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.738 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.738 DEBUG text call: 　セルの結合や分割には対応していません。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.738 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.739 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.739 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.739 DEBUG text call: ---表--- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.739 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.740 DEBUG text call: *No.	*産物	*産地 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.740 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.740 DEBUG text call: 1	みかん	愛媛 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.740 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.741 DEBUG text call: 2	茶	静岡 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.741 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.741 DEBUG text call: ---表--- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.742 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.742 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.742 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.742 DEBUG text call: 【－表】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.743 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.743 DEBUG text call: 【－行】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.743 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.743 DEBUG text call: 【＝見出しセル】No. (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.744 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.744 DEBUG text call: 【＝見出しセル】産物 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.744 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.745 DEBUG text call: 【＝見出しセル】産地 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.745 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.745 DEBUG text call: 【行－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.745 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.746 DEBUG text call: 【－行】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.746 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.746 DEBUG text call: 【＝セル】1 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.746 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.747 DEBUG text call: 【＝セル】みかん (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.747 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.747 DEBUG text call: 【＝セル】愛媛 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.748 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.748 DEBUG text call: 【行－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.748 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.748 DEBUG text call: 【－行】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.749 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.749 DEBUG text call: 【＝セル】2 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.749 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.749 DEBUG text call: 【＝セル】茶 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.750 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.750 DEBUG text call: 【＝セル】静岡 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.750 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.750 DEBUG text call: 【行－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.751 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.751 DEBUG text call: 【表－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.751 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.752 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.752 DEBUG text call: 　セル区切りに半角パイプ（|）を使うこともできます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.752 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.752 DEBUG text call: 　必ず行頭、行末に半角パイプを記述してください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.753 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.753 DEBUG text call: 　こちらはセルの内容を空文字にすることができます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.753 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.753 DEBUG text call: 　セルの結合や分割には対応していません。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.754 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.754 DEBUG text call: 　値の前後に半角スペースやタブの連続があれば取り除きます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.755 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.755 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.755 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.756 DEBUG text call: ---表--- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.756 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.756 DEBUG text call: |*名前		|ミケ	|ボギー		| (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.757 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.757 DEBUG text call: |*種類		|三毛猫	|コーギー	| (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.757 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.757 DEBUG text call: |*首輪の色	|		|赤			| (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.758 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.758 DEBUG text call: ---表--- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.759 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.759 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.759 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.759 DEBUG text call: 【－表】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.760 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.760 DEBUG text call: 【－行】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.761 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.761 DEBUG text call: 【＝見出しセル】名前 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.761 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.762 DEBUG text call: 【＝セル】ミケ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.762 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.763 DEBUG text call: 【＝セル】ボギー (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.763 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.764 DEBUG text call: 【行－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.764 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.764 DEBUG text call: 【－行】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.764 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.765 DEBUG text call: 【＝見出しセル】種類 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.765 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.765 DEBUG text call: 【＝セル】三毛猫 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.766 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.766 DEBUG text call: 【＝セル】コーギー (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.766 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.767 DEBUG text call: 【行－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.767 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.768 DEBUG text call: 【－行】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.768 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.768 DEBUG text call: 【＝見出しセル】首輪の色 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.769 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.769 DEBUG text call: 【＝セル】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.769 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.770 DEBUG text call: 【＝セル】赤 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.770 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.770 DEBUG text call: 【行－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.771 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.771 DEBUG text call: 【表－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.771 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.771 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.772 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.772 DEBUG text call: コード (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.772 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.772 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.773 DEBUG text call: 　５つの半角ハイフンを区切り行として、コードとすることができます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.773 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.774 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.774 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.774 DEBUG text call: ----- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.775 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.775 DEBUG text call: println "Hello, World!"; (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.775 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.776 DEBUG text call: println "This is sample code of how to hello to all of the world, which is executed " + Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ"); (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.776 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.776 DEBUG text call: ----- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.777 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.777 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.777 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.777 DEBUG text call: 【－コード】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.778 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.778 DEBUG text call: println "Hello, World!"; (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.778 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.778 DEBUG text call: println "This is sample code of how to hello to all of the world, which is executed " + Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ"); (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.779 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.779 DEBUG text call: 【コード－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.780 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.780 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.780 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.780 DEBUG text call: 整形済 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.781 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.781 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.781 DEBUG text call: 　５つの半角イコールを区切り行として、整形済とすることができます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.781 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.782 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.782 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.782 DEBUG text call: ===== (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.782 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.783 DEBUG text call: ルートフォルダ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.783 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.783 DEBUG text call: 　├ binフォルダ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.784 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.784 DEBUG text call: 　│　└ 実行ファイル (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.784 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.784 DEBUG text call: 　└ confフォルダ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.785 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.785 DEBUG text call: ===== (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.785 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.785 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.786 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.786 DEBUG text call: 【－整形済】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.786 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.786 DEBUG text call: ルートフォルダ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.787 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.787 DEBUG text call: 　├ binフォルダ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.788 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.788 DEBUG text call: 　│　└ 実行ファイル (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.788 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.789 DEBUG text call: 　└ confフォルダ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.789 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.789 DEBUG text call: 【整形済－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.789 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.790 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.790 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.790 DEBUG text call: 行範囲タグの汎用的な記法 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.790 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.791 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.791 DEBUG text call: 　半角ハイフン３つで囲んだ文字列を、行範囲タグのタグ名にします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.791 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.791 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.792 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.792 DEBUG text call: ---引用--- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.792 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.793 DEBUG text call: 　吾輩は猫である。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.793 DEBUG --- closure code: combiKey=block#引用元 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<footer>${lowers.join()}</footer>""";

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:19.807 DEBUG block call: block#項目 (ForkJoinPool-2-worker-2 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.810 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.810 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.810 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-2 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:19.811 DEBUG text call: yakumoの使い方 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.811 DEBUG block call: block#項目 (ForkJoinPool-2-worker-2 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.812 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.812 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.812 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-2 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:19.813 DEBUG text call: BLtxt変換 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.813 DEBUG block call: block#項目 (ForkJoinPool-2-worker-2 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.813 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.814 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.814 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-2 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:19.814 DEBUG text call: HTML変換 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.815 DEBUG block call: block#見出し (ForkJoinPool-2-worker-2 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.815 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.815 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.815 DEBUG text call: API仕様書 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.816 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.816 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.816 DEBUG text call: 　API仕様書(Groovydoc)は以下を参照してください。 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.817 DEBUG block call: block#箇条書き (ForkJoinPool-2-worker-2 - cl_block#箇条書き.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.817 DEBUG block call: block#項目 (ForkJoinPool-2-worker-2 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.817 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.817 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.818 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-2 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:19.818 DEBUG text call: Groovydoc (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.818 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.819 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.819 DEBUG text call: 以上 (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.819 DEBUG --- closure code: combiKey=bltxt#note ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLtxt bltxt ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	// 註のノードと、そのキーを収集します
	List noteList = bltxt.grepNodes('inline', '註');
	List noteKeys = [];
	noteList.each { noteKeys << it.attrs[0] }
	if (noteKeys.size() == 0) return '';
	
	// 註記のノードと、そのキーを収集します
	List cmntList = bltxt.grepNodes('meta', '註記');
	List cmntKeys = [];
	Map cmntMap = [:];
	cmntList.each {
		cmntKeys << it.attrs[0];
		cmntMap[it.attrs[0]] = it;
	}
	
	// キーをチェックします
	if (noteKeys.unique(false).size() < noteKeys.size()){
		Map map = [:];
		noteKeys.each { map[it] = (map.containsKey(it))? ++ map[it] : 1 }
		warnings << "註のキーに重複があります。：重複キー=${map.findAll { it.value > 1 }.keySet()}";
		return '';
	}
	List diff1 = noteKeys - cmntKeys;
	if (diff1.size() > 0){
		warnings << "註に対する註記の記述漏れがあります。：diff=${diff1}";
		return '';
	}
	List diff2 = cmntKeys - noteKeys;
	if (diff2.size() > 0){
		warnings << "不要な註記あるいは註の記述漏れがあります。：diff=${diff2}";
		return '';
	}
	
	// 註記を返します
	List list = [];
	list << """<aside>""";
	list << """<dl class="note">""";
	int counter = 0;
	noteKeys.each { String noteKey ->
		counter ++;
		List lowers = cmntMap[noteKey].nodes.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };
		list << """<dt><a name="t${counter}" href="#f${counter}">[*${counter}]</a></dt>""";
		list << """<dd>${lowers.join(lsep)}</dd>""";
	}
	list << """</dl>""";
	list << """</aside>""";
	return list.join(lsep);

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:19.875 DEBUG block call: block#コード (ForkJoinPool-2-worker-5 - cl_block#コード.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.876 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.876 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.877 DEBUG text call: @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/') (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.877 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.877 DEBUG text call: @Grab('io.github.longfish801:yakumo:0.2.00') (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.877 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.878 DEBUG text call: @GrabExclude('org.codehaus.groovy:groovy-all') (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.878 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.878 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.878 DEBUG text call: import io.github.longfish801.yakumo.YmoScript; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.879 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.879 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.879 DEBUG text call: try { (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.879 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.880 DEBUG text call: 	new YmoScript().convert('_bltxt', '_html', new File('sample.txt'), new File('sample.html')); (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.880 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.880 DEBUG text call: } catch (exc){ (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.881 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.881 DEBUG text call: 	println "HTMLへの変換に失敗しました。exc=${exc}"; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.881 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.881 DEBUG text call: } (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.882 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.882 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.882 DEBUG text call: 　convertメソッドの第一引数および第二引数に、変換資材の名前をリストで指定しています。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.882 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.883 DEBUG text call: 　"_bltxt"は yakumo記法に沿ったテキストを bltxt記法へ変換するための変換資材名です。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.883 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.883 DEBUG text call: 　"_html"は bltxt記法によって構造化されたテキストを HTMLへ変換するための変換資材名です。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.883 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.884 DEBUG text call: 　詳しくは (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.884 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:19.884 DEBUG text call: BLtxt変換 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.884 DEBUG text call: 、 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.885 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:19.885 DEBUG text call: HTML変換 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.885 DEBUG text call: を参照してください。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.886 DEBUG block call: block#見出し (ForkJoinPool-2-worker-5 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.886 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.886 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.886 DEBUG text call: YmoDocument (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.887 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.887 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.887 DEBUG text call: 　 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.887 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:19.887 DEBUG text call: YmoDocument (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.888 DEBUG text call: クラスは特定のフォルダ内に格納されたテキストファイルを一括変換することを想定しています。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.888 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.888 DEBUG text call: 　本ドキュメントは YmoDocumentクラスで生成しています。本ドキュメントを生成するサンプルスクリプト（ (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.888 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:19.889 DEBUG text call: sampleDocument/sample.groovy (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.889 DEBUG text call: ）を以下に示します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.889 DEBUG block call: block#コード (ForkJoinPool-2-worker-5 - cl_block#コード.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.890 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.890 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.890 DEBUG text call: @GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/') (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.890 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.891 DEBUG text call: @Grab('io.github.longfish801:yakumo:0.2.00') (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.891 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.891 DEBUG text call: @Grab('org.slf4j:slf4j-api:1.7.25') (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.892 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.892 DEBUG text call: @Grab('ch.qos.logback:logback-classic:1.2.3') (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.892 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.892 DEBUG text call: @GrabExclude('org.codehaus.groovy:groovy-all') (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.893 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.893 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.893 DEBUG text call: import io.github.longfish801.yakumo.YmoDocument; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.893 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.894 DEBUG text call: import org.slf4j.LoggerFactory; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.894 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.894 DEBUG text call: import org.slf4j.Logger; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.894 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.895 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.895 DEBUG text call: Logger LOG = LoggerFactory.getLogger("sample"); (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.895 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.895 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.896 DEBUG text call: try { (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.896 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.896 DEBUG text call: 	new YmoDocument(new File('..')).run(new File('../_html')); (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.896 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.897 DEBUG text call: } catch (exc){ (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.897 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.897 DEBUG text call: 	LOG.error('HTMLへの変換に失敗しました', exc); (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.898 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.898 DEBUG text call: } (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.898 DEBUG block call: block#見出し (ForkJoinPool-2-worker-5 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.898 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.899 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.899 DEBUG text call: 変換の基本的な考え方 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.899 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.899 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.899 DEBUG text call: 　yakumoによる変換は、解析（parse）と適用（apply）の工程から成ります。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.900 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.900 DEBUG text call: 　解析工程は入力に相当します。変換対象のテキストを読みこんで整形し、XMLのような階層関係に構造化された形でメモリ上に保持します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.900 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.900 DEBUG text call: 　適用工程は出力に相当します。メモリ上に保持した内容を目的の形式に加工し、出力します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.901 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.901 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.901 DEBUG text call: 　テキストの整形には washshを利用します。washsh記法で記述されたスクリプトにより、テキストに対して置換処理などを施します。これによりテキストを bltxt文書へ整形します。詳細は (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.901 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:19.902 DEBUG text call: washsh記法 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.902 DEBUG text call: を参照してください。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.902 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.902 DEBUG text call: 　bltxt記法で記述された文書は、XMLのように階層関係のある構造を持たせることができます。bltxt文書を読みこんで、BLtxtインスタンスへ変換します。詳細は (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.903 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:19.903 DEBUG text call: BLtxt記法 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.903 DEBUG text call: を参照してください。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.903 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.904 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.904 DEBUG text call: 　BLtxtインスタンスからクロージャで目的の形式に沿ったテキストを生成します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.904 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.904 DEBUG text call: 　clmap記法により、複数のクロージャをまとめたクロージャマップを定義できます。詳細は (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.904 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:19.907 DEBUG text call: clmap記法 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.907 DEBUG text call: を参照してください。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.907 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.907 DEBUG text call: 　テキストの生成にはテンプレートを利用することもできます。テンプレートの適用には groovy.text.SimpleTemplateEngineを利用します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.908 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.908 DEBUG text call: 　必要に応じて固定ファイルをコピーします。固定ファイルは、変換結果に併せて出力が必要なファイルです。たとえば HTMLへの変換であれば CSSファイルや JavaScriptファイルなどが相当します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.908 DEBUG block call: block#見出し (ForkJoinPool-2-worker-5 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.908 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.909 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.909 DEBUG text call: 変換資材 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.909 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.910 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.910 DEBUG text call: 　変換に必要な各種資材をまとめたものが変換資材です。以下の最低ひとつから構成されます。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.910 DEBUG block call: block#箇条書き (ForkJoinPool-2-worker-5 - cl_block#箇条書き.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.910 DEBUG block call: block#項目 (ForkJoinPool-2-worker-5 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.911 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.911 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.911 DEBUG text call: washshスクリプト (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.912 DEBUG block call: block#項目 (ForkJoinPool-2-worker-5 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.912 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.912 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.912 DEBUG text call: clmapスクリプト (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.913 DEBUG block call: block#項目 (ForkJoinPool-2-worker-5 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.913 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.913 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.913 DEBUG text call: テンプレート (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.914 DEBUG block call: block#項目 (ForkJoinPool-2-worker-5 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.914 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.914 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.914 DEBUG text call: 固定ファイル (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.915 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.915 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.915 DEBUG text call: 　変換資材は、クラスパスにリソースとして作成する場合と、ファイルシステム上にフォルダとして作る場合との二種類あります。どちらも、上記の資材を指定するための変換設定スクリプト ymoSetting.groovyを格納します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.915 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.916 DEBUG text call: 　変換資材がリソースの場合は設定スクリプトを格納したフォルダのリソース名を、変換資材がフォルダの場合は設定スクリプトを格納したフォルダを変換資材として指定します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.916 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.916 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.916 DEBUG text call: 　変換設定スクリプトには以下の変数があらかじめバインドされています。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.917 DEBUG --- closure code: combiKey=block#項目説明 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<dl>${lsep}${lowers.join(lsep)}${lsep}</dl>""";

}--- (ForkJoinPool-2-worker-5 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:19.937 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.939 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.939 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.939 DEBUG text call: 見出し、小見出し (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.940 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.940 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.940 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.941 DEBUG text call: 挿入図 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.941 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.941 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.942 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.942 DEBUG text call: 箇条書き：項目、対象、説明 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.942 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.942 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.943 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.943 DEBUG text call: 表：見出しセル、セル (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.943 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.943 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.944 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.944 DEBUG text call: 引用元 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.944 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.945 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.945 DEBUG text call: 　以下の行範囲タグ内では brタグ、pタグを付与しません。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.945 DEBUG block call: block#箇条書き (ForkJoinPool-2-worker-3 - cl_block#箇条書き.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.945 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.946 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.946 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.946 DEBUG text call: 生データ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.947 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.947 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.947 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.947 DEBUG text call: 整形済 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.948 DEBUG block call: block#項目 (ForkJoinPool-2-worker-3 - cl_block#項目.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.948 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.948 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.948 DEBUG text call: コード (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.949 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.949 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.949 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.949 DEBUG text call: タイトル、サブタイトル、著者名 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.950 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.950 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.950 DEBUG text call: 　タイトル、サブタイトル、著者名は、含意タグで指定します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.950 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.951 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.951 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.951 DEBUG text call: 【＃タイトル】円周率について (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.951 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.952 DEBUG text call: 【＃サブタイトル】著名な語呂合わせ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.952 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.952 DEBUG text call: 【＃著者名】山田太郎 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.952 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.953 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.953 DEBUG text call: 　含意タグはマップ headに変換します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.953 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.953 DEBUG text call: 　テンプレートでは、タイトル、サブタイトル、著者名が記述されていれば出力します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.954 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.954 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.954 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.954 DEBUG text call: <head> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.955 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.955 DEBUG text call:  ... 中略 ... (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.955 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.955 DEBUG text call: <% if (head.containsKey('タイトル')){ %><title><%= head['タイトル'].replaceAll(/<.+?>/, '') %></title><% } %> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.956 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.956 DEBUG text call: </head> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.956 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.956 DEBUG text call:  ... 中略 ... (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.957 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.957 DEBUG text call: <header class="container"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.957 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.957 DEBUG text call: <% if (head.containsKey('タイトル')){ %><h1><%= head['タイトル'] %><% if (head.containsKey('サブタイトル')){ %> <small><%= head['サブタイトル'] %></small><% } %></h1><% } %> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.958 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.958 DEBUG text call: <% if (head.containsKey('著者名')){ %><div class="author"><%= head['著者名'] %></div><% } %> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.958 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.958 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.959 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.959 DEBUG text call: 見出しと目次 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.959 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.959 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.960 DEBUG text call: 　hタグを生成します。一番目の属性値が見出しのレベルとなります。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.960 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.960 DEBUG text call: 　省略時はレベル１扱いとなります。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.960 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.960 DEBUG text call: 　タイトルを h1とする関係上、レベル1が h2、レベル2が h3……となります。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.961 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.961 DEBUG text call: 　目次からページ内リンクで移動できるよう、aタグを挿入します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.961 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.961 DEBUG text call: 　name属性には、BLtxt文書を XML化したときの snum属性を利用します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.962 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.962 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.962 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.962 DEBUG text call: 【＝見出し】カレーの作り方 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.963 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.963 DEBUG text call: 【＝見出し：2】材料の準備 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.963 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.963 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.963 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.964 DEBUG text call: <h2><a name="1">カレーの作り方</a></h2> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.964 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.964 DEBUG text call: <h3><a name="2">材料の準備</a></h3> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.964 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.965 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.965 DEBUG text call: 　見出しから目次を生成し、バインド変数のリスト indexに格納します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.965 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.965 DEBUG text call: 　リスト indexの要素はマップになっており、キー levelに見出しレベルを、キー hrefにリンク先アドレスを、キーtitleにリンク対象文字列を格納しています。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.965 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.966 DEBUG text call: 　テンプレートでは以下のようにして出力しています。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.966 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.966 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.967 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.967 DEBUG text call: <% if (index.size() > 0){ %><nav class="list-group"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.967 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.967 DEBUG text call: <% index.each { Map map -> %><a href="<%= map['href'] %>" class="list-group-item"><%= '　' * (map['level'] - 2) %><%= map['title'] %></a> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.968 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.968 DEBUG text call: <% } %></nav><% } %> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.968 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.968 DEBUG text call: </header> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.969 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.969 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.969 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.970 DEBUG text call: 挿入図 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.970 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.970 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.970 DEBUG text call: 　figureタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.971 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.971 DEBUG text call: 　行タグの属性に画像の説明、画像ファイルへのパスを指定してください。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.971 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.971 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.971 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.972 DEBUG text call: 【＝挿入図：サンプル：img.png】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.972 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.972 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.972 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.973 DEBUG text call: <div class="img"><img src="img.png" alt="サンプル"></div> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.973 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.973 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.973 DEBUG text call: 　画像にキャプションを付与することもできます。figcaptionタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.974 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.974 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.974 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.974 DEBUG text call: 【＝挿入図：サンプル：img.png】これはイメージです。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.975 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.975 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.975 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.975 DEBUG text call: <figure><img src="img.png" alt="サンプル" class="img-responsive center-block"><figcaption>これはイメージです。</figcaption></figure> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.976 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.976 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.976 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.976 DEBUG text call: 註、註記 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.977 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.977 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.977 DEBUG text call: 　註は文中タグで、注記は含意範囲タグで記述します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.977 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.977 DEBUG text call: 　一番目の属性に、紐付けのため共通する文字列を指定してください。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.978 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.978 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.978 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.978 DEBUG text call: 　XML【註：XML】をHTML【註：HTML】に変換します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.979 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.979 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.979 DEBUG text call: 【＊註記：XML】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.979 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.979 DEBUG text call: 　eXtensible Markup Languageの略です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.980 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.980 DEBUG text call: 【註記＊】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.980 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.980 DEBUG text call: 【＊註記：HTML】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.981 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.981 DEBUG text call: 　Hyper Text Markup Languageの略です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.981 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.981 DEBUG text call: 【註記＊】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.982 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.982 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.982 DEBUG text call: 　HTML変換時に通番をふります。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.982 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.983 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.983 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.983 DEBUG text call: <p>　XML<sup><a id="f1" href="#t1">*1</a></sup>をHTML<sup><a id="f2" href="#t2">*2</a></sup>に変換します。</p> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.983 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.983 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.984 DEBUG text call: <dl class="note"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.984 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.984 DEBUG text call: <dt><a name="t1" href="#f1">[*1]</a></dt> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.984 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.985 DEBUG text call: <dd>　eXtensible Markup Languageの略です。</dd> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.985 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.985 DEBUG text call: <dt><a name="t2" href="#f2">[*2]</a></dt> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.986 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.986 DEBUG text call: <dd>　Hyper Text Markup Languageの略です。</dd> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.986 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.986 DEBUG text call: </dl> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.987 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.987 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.987 DEBUG text call: 　生成した註記は、バインド変数 noteに格納します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.987 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.987 DEBUG text call: 　テンプレートでは以下のとおり出力しています。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.988 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.988 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.988 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.988 DEBUG text call: <% if (!note.empty){ %><aside> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.989 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.989 DEBUG text call: <%= note %> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.989 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.989 DEBUG text call: </aside><% } %> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.990 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.990 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.990 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.990 DEBUG text call: 箇条書き (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.991 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.991 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.991 DEBUG text call: 　箇条書きには順序あり、順序なしがあります。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.991 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.991 DEBUG text call: 　それぞれ ul, olタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.992 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.992 DEBUG text call: 　順序あり、順序なしの項目は liタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.992 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.992 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.993 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.993 DEBUG text call: 【－箇条書き】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.993 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.993 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.994 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.994 DEBUG text call: じゃがいも (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.994 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.994 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.995 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.995 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.995 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.996 DEBUG text call: ニンジン (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.996 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.996 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.996 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.997 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.997 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.997 DEBUG block call: block#引用元 (ForkJoinPool-2-worker-1 - cl_block#引用元.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:19.997 DEBUG text call: 玉ねぎ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.997 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.998 DEBUG text call: 【－箇条書き】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.998 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.998 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.998 DEBUG text call: 【－説明】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.998 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.998 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.999 DEBUG text call: 刻むときは注意。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.999 DEBUG text call: 夏目漱石『吾輩は猫である』 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.999 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.999 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:19.999 DEBUG text call: 涙がでます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:19.999 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:19.999 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.000 DEBUG text call: ---引用--- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.000 DEBUG text call: 【説明－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.000 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.000 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.000 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.000 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.000 DEBUG text call: 【箇条書き－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.001 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.001 DEBUG text call: 【－引用】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.001 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.001 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.001 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.001 DEBUG text call: 　吾輩は猫である。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.001 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.001 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.002 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.002 DEBUG text call: 【＝引用元】夏目漱石『吾輩は猫である』 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.002 DEBUG text call: カレー粉 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.002 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.002 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.002 DEBUG text call: 【引用－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.002 DEBUG text call: 【－箇条書き：順序あり】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.002 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.003 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.003 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.003 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.003 DEBUG text call: 　もしくは次の書き方も可能です。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.003 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.003 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.003 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.003 DEBUG text call: ジャワカレー (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.004 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.004 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.004 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.004 DEBUG --- closure code: combiKey=inline ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	warnings << "未対応のインライン要素です。tag=${node.tag}, node=${node.toString()}";
	return (node.nodes.size() == 0)? "【${node.tag}${node.attrs.toString()}】" : "【｜${node.tag}${node.attrs.toString()}】${lowers.join()}【${node.tag}｜】";

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:20.004 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.004 DEBUG text call: 【－項目】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.005 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.005 DEBUG text call: バーモンドカレー (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.005 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.005 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.006 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.006 DEBUG text call: 【箇条書き－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.006 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.007 DEBUG text call: 【項目－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.007 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.007 DEBUG text call: 【箇条書き－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.007 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.008 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.008 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.008 DEBUG text call: <ul> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.008 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.009 DEBUG text call: <li>じゃがいも</li> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.009 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.009 DEBUG text call: <li>ニンジン</li> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.009 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.010 DEBUG text call: <li>玉ねぎ<br/> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.010 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.010 DEBUG text call: <ul> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.010 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.011 DEBUG text call: <li class="dd">→刻むときは注意。<br/> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.011 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.011 DEBUG text call: 　涙がでます。</li> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.011 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.012 DEBUG text call: </ul></li> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.012 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.012 DEBUG text call: <li>カレー粉<br/> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.012 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.013 DEBUG text call: <ol> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.013 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.013 DEBUG text call: <li>ジャワカレー</li> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.014 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.014 DEBUG text call: <li>バーモンドカレー</li> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.014 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.014 DEBUG text call: </ol></li> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.015 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.015 DEBUG text call: </ul> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.015 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.015 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.016 DEBUG text call: 　項目説明の箇条書きは以下となります。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.016 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.016 DEBUG text call: 　項目説明の対象と説明は、それぞれ dt, ddタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.016 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.016 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.017 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.017 DEBUG text call: 【－項目説明】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.017 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.017 DEBUG text call: 【－対象】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.018 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.018 DEBUG text call: ターメリック (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.018 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.018 DEBUG text call: 【対象－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.019 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.019 DEBUG text call: 【－説明】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.019 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.019 DEBUG text call: 香辛料の一種です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.020 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.020 DEBUG text call: 【説明－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.020 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.020 DEBUG text call: 【項目説明－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.021 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.021 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.021 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.021 DEBUG text call: <dl> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.022 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.022 DEBUG text call: <dt>ターメリック</dt> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.022 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.022 DEBUG text call: <dd>香辛料の一種です。</dd> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.023 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.023 DEBUG text call: </dl> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.023 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.023 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.024 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.024 DEBUG text call: 表 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.024 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.024 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.025 DEBUG text call: 　tableタグ（class属性値は"table"）を生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.025 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.025 DEBUG text call: 　第一属性に小見出しを指定することもできます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.025 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.026 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.026 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.026 DEBUG text call: 【－表：各県の名産】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.026 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.027 DEBUG text call: 【－行】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.027 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.027 DEBUG text call: 【＝見出しセル】No. (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.027 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.028 DEBUG text call: 【＝見出しセル】産物 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.028 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.028 DEBUG text call: 【＝見出しセル】産地 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.028 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.029 DEBUG text call: 【行－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.029 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.029 DEBUG text call: 【－行】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.029 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.030 DEBUG text call: 【＝セル】1 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.030 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.031 DEBUG text call: 【＝セル】みかん (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.031 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.031 DEBUG text call: 【＝セル】愛媛 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.031 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.032 DEBUG text call: 【行－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.032 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.032 DEBUG text call: 【－行】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.033 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.033 DEBUG text call: 【＝セル】2 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.033 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.033 DEBUG text call: 【＝セル】茶 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.034 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.034 DEBUG text call: 【＝セル】静岡 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.034 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.034 DEBUG text call: 【行－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.035 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.035 DEBUG text call: 【表－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.035 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.036 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.036 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.036 DEBUG text call: <aside class="panel panel-default"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.036 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.037 DEBUG text call: <header class="panel-heading">各県の名産</header> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.037 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.037 DEBUG text call: <table class="table"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.038 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.038 DEBUG text call: <tr><th>No.</th><th>産物</th><th>産地</th></tr> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.038 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.038 DEBUG text call: <tr><td>1</td><td>みかん</td><td>愛媛</td></tr> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.039 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.039 DEBUG text call: <tr><td>2</td><td>茶</td><td>静岡</td></tr> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.039 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.039 DEBUG text call: </table> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.040 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.040 DEBUG text call: </aside> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.040 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.040 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.041 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.041 DEBUG text call: コラム (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.041 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.041 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.042 DEBUG text call: 　asideタグ（class属性値は"column"）を生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.042 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.042 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.042 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.043 DEBUG text call: 【－コラム】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.043 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.043 DEBUG text call: 　日本人の四割は血液型がＯ型です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.043 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.044 DEBUG text call: 【コラム－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.044 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.044 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.044 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.045 DEBUG text call: <aside class="panel panel-primary"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.045 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.045 DEBUG text call: <div class="panel-body"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.045 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.046 DEBUG text call: <p>　日本人の四割は血液型がＯ型です。</p> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.046 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.046 DEBUG text call: </div> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.046 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.047 DEBUG text call: </aside> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.047 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.047 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.047 DEBUG text call: 　第一属性に小見出しを指定することもできます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.048 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.048 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.048 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.048 DEBUG text call: 【－コラム：８月３１日は】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.049 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.049 DEBUG text call: 　８月３１日は野菜の日です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.049 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.050 DEBUG text call: 　野菜を食べましょう。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.050 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.050 DEBUG text call: 【コラム－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.050 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.051 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.051 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.051 DEBUG text call: <aside class="panel panel-primary"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.051 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.052 DEBUG text call: <header class="panel-heading">８月３１日は</header> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.052 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.052 DEBUG text call: <div class="panel-body"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.052 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.053 DEBUG text call: <p>　８月３１日は野菜の日です。<br/> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.053 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.053 DEBUG text call: 　野菜を食べましょう。</p> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.053 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.054 DEBUG text call: </div> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.054 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.054 DEBUG text call: </aside> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.055 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.055 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.055 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.055 DEBUG text call: 注意 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.056 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.056 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.056 DEBUG text call: 　asideタグ（class属性値は"attention"）を生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.056 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.056 DEBUG text call: 　第一属性に小見出しを指定することもできます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.057 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.057 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.057 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.057 DEBUG text call: 【－注意：中火とは】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.058 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.058 DEBUG text call: 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.058 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.059 DEBUG text call: 【注意－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.059 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.060 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.060 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.060 DEBUG text call: <aside class="panel panel-warning"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.061 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.061 DEBUG text call: <header class="panel-heading">中火とは</header> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.061 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.062 DEBUG text call: <div class="panel-body"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.062 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.062 DEBUG text call: <p>　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。</p> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.062 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.063 DEBUG text call: </div> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.063 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.063 DEBUG text call: </aside> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.063 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.064 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.064 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.064 DEBUG text call: 引用、引用元 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.064 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.065 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.065 DEBUG text call: 　blockquoteタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.065 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.065 DEBUG text call: 　第一属性に小見出しを指定することもできます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.066 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.066 DEBUG text call: 　行タグで引用元を指定することもできます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.066 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.066 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.067 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.067 DEBUG text call: 【－引用】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.067 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.067 DEBUG text call: 　山路を登りながら、こう考えた。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.068 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.068 DEBUG text call: 　智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.068 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.068 DEBUG text call: 【＝引用元】夏目漱石『草枕』 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.069 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.069 DEBUG text call: 【引用－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.069 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.070 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.070 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.070 DEBUG text call: <blockquote> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.070 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.071 DEBUG text call: <p>　山路を登りながら、こう考えた。<br/> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.071 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.071 DEBUG text call: 　智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。</p> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.072 DEBUG --- closure code: combiKey=bind#backlink ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	String outKey ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	BLtxt bltxt = engine.bltxtMap[outKey];
	Map head = clmap.cl('bltxt#head').call(bltxt);
	String backTo = (outKey == 'index')? '..' : 'index.html';
	return """<a href="${backTo}">戻る</a>""";

}--- (ForkJoinPool-2-worker-2 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:20.072 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.072 DEBUG text call: <footer>夏目漱石『草枕』</footer> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.073 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.073 DEBUG text call: </blockquote> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.074 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.074 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.074 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.075 DEBUG text call: コード (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.075 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.075 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.076 DEBUG text call: 　preタグ（class属性値は"code"）を生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.076 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.076 DEBUG text call: 　第一属性に小見出しを指定することもできます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.076 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.077 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.077 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.077 DEBUG text call: 【－コード】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.077 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.078 DEBUG text call: println "Hello, World!"; (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.078 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.078 DEBUG text call: println "This is sample code of how to hello to all of the world, which is executed " + Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ"); (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.078 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.079 DEBUG text call: 【コード－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.079 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.079 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.080 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.080 DEBUG text call: <pre class="code"> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.080 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.080 DEBUG text call: println &quot;Hello, World!&quot;; (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.081 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.081 DEBUG text call: println &quot;This is sample code of how to hello to all of the world, which is executed &quot; + Date().format(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSZ&quot;); (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.081 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.081 DEBUG text call: </pre> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.082 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.082 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.082 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.082 DEBUG text call: 整形済 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.083 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.083 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.083 DEBUG text call: 　preタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.084 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.084 DEBUG text call: 　第一属性に小見出しを指定することもできます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.084 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.084 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.084 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.085 DEBUG text call: 【－整形済】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.085 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.085 DEBUG text call: ルートフォルダ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.086 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.086 DEBUG text call: 　├ binフォルダ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.086 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.086 DEBUG text call: 　│　└ 実行ファイル (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.087 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.087 DEBUG text call: 　└ confフォルダ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.087 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.087 DEBUG text call: 【整形済－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.088 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.088 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.088 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.088 DEBUG text call: <pre>ルートフォルダ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.089 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.089 DEBUG text call: 　├ binフォルダ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.089 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.089 DEBUG text call: 　│　└ 実行ファイル (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.090 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.090 DEBUG text call: 　└ confフォルダ</pre> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.090 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.090 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.091 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.091 DEBUG text call: 生データ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.091 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.091 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.092 DEBUG text call: 　記述内容をそのまま変換結果に反映したいときに使用します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.092 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.092 DEBUG text call: 　BLtxt記法上の特殊文字はエスケープします。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.092 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.093 DEBUG text call: 　HTMLタグのエスケープをしません。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.093 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.093 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.093 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.094 DEBUG text call: 【－生データ】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.094 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.094 DEBUG text call: 墨付きカッコが【強調：そのまま】表示されます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.094 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.095 DEBUG text call: <strong>HTMLタグのエスケープもしません。</strong> (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.095 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.095 DEBUG text call: 【生データ－】 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.095 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.096 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.096 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.096 DEBUG text call: 墨付きカッコが【重要：そのまま】表示されます。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.096 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.097 DEBUG text call: &lt;strong&gt;HTMLタグのエスケープもしません。&lt;/strong&gt; (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.097 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.097 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.097 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.098 DEBUG text call: インライン要素 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.098 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.098 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.098 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.099 DEBUG text call: リンク (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.099 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.099 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.099 DEBUG text call: 　aタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.100 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.100 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.100 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.100 DEBUG text call: 　詳しくは【｜リンク：https://www.google.co.jp/】ネット検索【リンク｜】してください。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.101 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.101 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.101 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.101 DEBUG text call: 　詳しくは<a href="https://www.google.co.jp/">ネット検索</a>してください。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.102 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.102 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.102 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.102 DEBUG text call: 強調 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.103 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.103 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.103 DEBUG text call: 　emタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.103 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.104 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.104 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.104 DEBUG text call: 　必ず最後に【｜強調】確認ボタン【強調｜】をクリックしてください。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.104 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.105 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.105 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.105 DEBUG text call: 　必ず最後に<em>確認ボタン</em>をクリックしてください。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.105 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.106 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.106 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.106 DEBUG text call: 最強調 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.106 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.107 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.107 DEBUG text call: 　strongタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.107 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.107 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.107 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.108 DEBUG text call: 　間違えて【｜最強調】自爆スイッチ【最強調｜】を押さないでください。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.108 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.108 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.108 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.109 DEBUG text call: 　間違えて<strong>自爆スイッチ</strong>を押さないでください。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.109 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.109 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.109 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.110 DEBUG text call: 傍点 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.110 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.110 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.111 DEBUG text call: 　spanタグ（class属性値は"dot"）を生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.115 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.115 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.115 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.116 DEBUG text call: 　ここが【｜傍点】重要【傍点｜】です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.117 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.117 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.117 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.118 DEBUG text call: 　ここが<span class="dot">重要</span>です。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.118 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.119 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.119 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.119 DEBUG text call: ぼかし (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.120 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.120 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.121 DEBUG text call: 　spanタグ（class属性値は"small"）を生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.121 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.121 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.122 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.122 DEBUG text call: 　もちろん本当【｜ぼかし】かもしれない【ぼかし｜】ですよ。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.123 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.123 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.124 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.124 DEBUG text call: 　もちろん本当<span class="small">かもしれない</span>ですよ。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.124 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.125 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.125 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.126 DEBUG text call: 訂正 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.126 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.127 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.127 DEBUG text call: 　sタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.128 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.128 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.128 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.129 DEBUG text call: 　富士山の標高は【｜訂正】３７７７メートル【訂正｜】３７７６メートルです。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.129 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.129 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.130 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.130 DEBUG text call: 　富士山の標高は<s>３７７７メートル</s>３７７６メートルです。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.131 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.131 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.131 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.132 DEBUG text call: 縦中横 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.132 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.133 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.133 DEBUG text call: 　縦中横には対応していないため、特に加工しません。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.133 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.134 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.134 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.134 DEBUG text call: 　シェイクスピア全集の第【｜縦中横】10【縦中横｜】巻に記述されています。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.135 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.135 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.136 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.136 DEBUG text call: 　シェイクスピア全集の第10巻に記述されています。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.136 DEBUG block call: block#見出し (ForkJoinPool-2-worker-3 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.137 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.137 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.137 DEBUG text call: ルビ (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.138 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.138 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.139 DEBUG text call: 　rubyタグを生成します。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.139 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.139 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.140 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.140 DEBUG text call: 　【｜ルビ：すいとう】出納【ルビ｜】係は言った。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.141 DEBUG block call: block#コラム (ForkJoinPool-2-worker-3 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.141 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.141 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.142 DEBUG text call: 　<ruby>出納<rp>［</rp><rt>すいとう</rt><rp>］</rp></ruby>係は言った。 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.142 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.143 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.143 DEBUG text call: 以上 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.150 DEBUG block call: block#項目説明 (ForkJoinPool-2-worker-5 - cl_block#項目説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.152 DEBUG --- closure code: combiKey=block#対象 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<dt>${lowers.join("<br/>${lsep}")}</dt>""";

}--- (ForkJoinPool-2-worker-5 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:20.223 DEBUG inline call: inline#引用 (ForkJoinPool-2-worker-1 - cl_inline.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:20.239 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.240 DEBUG text call: 　山道を登りながらこう考えた。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.240 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.241 DEBUG inline call: inline#引用 (ForkJoinPool-2-worker-1 - cl_inline.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:20.242 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.242 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.242 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.243 DEBUG text call: 【－引用】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.243 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.244 DEBUG text call: 　山道を登りながらこう考えた。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.244 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.245 DEBUG text call: 【引用－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.245 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.246 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.246 DEBUG text call: 　全角コロン（：）で区切ることで、一番目の属性値を指定できます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.246 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.247 DEBUG text call: 　全角コロンの前に行範囲タグ名を、全角コロンの後に属性値を記述します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.247 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.248 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.248 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.248 DEBUG text call: ---注意：中火とは--- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.249 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.249 DEBUG text call: 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.250 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.250 DEBUG text call: ---注意：中火とは--- (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.251 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.251 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.251 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.252 DEBUG text call: 【－注意：中火とは】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.252 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.253 DEBUG text call: 　中火とは、フライパンの底に炎の先端がちょうど届くくらいの状態を指します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.253 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.254 DEBUG text call: 【注意－】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.254 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.255 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.255 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.255 DEBUG text call: マスキング (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.256 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.256 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.257 DEBUG text call: 　washshスクリプトによる整形の対象外とします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.257 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.258 DEBUG text call: 　//***～***//を区切り行として、マスキング対象を囲みます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.258 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.258 DEBUG text call: 　変換後に区切り行は削除します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.259 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.259 DEBUG text call: 　以下のサンプルでは、本来なら箇条書きとして整形されるはずですが、エスケープしているため処理の対象外となっています。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.260 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.260 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.260 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.261 DEBUG text call: //*** (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.261 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.262 DEBUG text call: ・帰りに綿棒を買ってくること。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.262 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.263 DEBUG text call: ***// (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.263 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.264 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.264 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.264 DEBUG text call: ・帰りに綿棒を買ってくること。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.265 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.265 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.266 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.266 DEBUG text call: BLエスケープ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.267 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.267 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.267 DEBUG text call: 　BLtxt記法上の特殊文字をエスケープします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.268 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.268 DEBUG text call: 　半角シャープ５つを区切り行として、エスケープ対象を囲みます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.269 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.269 DEBUG text call: 　変換後に区切り行は削除します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.269 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.270 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.270 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.271 DEBUG text call: ##### (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.271 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.271 DEBUG text call: 墨付きカッコが【強調：そのまま】表示されます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.272 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.272 DEBUG text call: ##### (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.273 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.273 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.274 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.274 DEBUG text call: 墨付きカッコが【強調：そのまま】表示されます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.275 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.275 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.276 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.276 DEBUG text call: 文中タグ／文範囲タグへ整形 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.277 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.277 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.277 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.278 DEBUG text call: リンク (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.278 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.279 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.279 DEBUG text call: 　一番目の属性にリンクとして表示する文字列を、二番目の属性にリンク先アドレスを指定してください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.279 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.280 DEBUG text call: 　一番目の属性のみ指定した場合は、表示する文字列とリンク先アドレスを同じ値とみなします。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.280 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.281 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.281 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.281 DEBUG text call: 　詳しくは (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.282 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-1 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:20.283 DEBUG text call: してください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.283 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.284 DEBUG text call: 　 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.284 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-1 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:20.285 DEBUG text call: でネット検索できます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.285 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.285 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.286 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.286 DEBUG text call: 　詳しくは【｜リンク：https://www.google.co.jp/】ネット検索【リンク｜】してください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.287 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.287 DEBUG text call: 　【｜リンク：https://www.google.co.jp/】https://www.google.co.jp/【リンク｜】でネット検索できます。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.287 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.288 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.288 DEBUG text call: 　URLのみが記述された行や、全角括弧で囲まれた箇所に URLが記述された場合にも変換します。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.289 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.289 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.289 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.290 DEBUG text call: https://www.google.com/ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.290 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.290 DEBUG text call: Google（https://www.google.com/） (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.291 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.291 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.292 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.292 DEBUG text call: 【｜リンク：https://www.google.co.jp/】https://www.google.co.jp/【リンク｜】 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.292 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.293 DEBUG text call: Google（【｜リンク：https://www.google.co.jp/】https://www.google.co.jp/【リンク｜】） (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.293 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.294 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.294 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.295 DEBUG para call (ForkJoinPool-2-worker-2 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.294 DEBUG text call: 強調 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.295 DEBUG line call (ForkJoinPool-2-worker-2 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.295 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.295 DEBUG text call: yakumo (ForkJoinPool-2-worker-2 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.295 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.296 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.296 DEBUG text call: 　必ず最後に (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.297 DEBUG --- closure code: combiKey=inline#強調 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<em>${lowers.join()}</em>""";

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:20.358 DEBUG para call (ForkJoinPool-2-worker-3 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.358 DEBUG line call (ForkJoinPool-2-worker-3 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.359 DEBUG text call: HTML変換 (ForkJoinPool-2-worker-3 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.417 DEBUG block call: block#対象 (ForkJoinPool-2-worker-5 - cl_block#対象.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.419 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.419 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.419 DEBUG text call: yakumo (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.420 DEBUG --- closure code: combiKey=block#説明 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<dd>${lowers.join("<br/>${lsep}")}</dd>""";

}--- (ForkJoinPool-2-worker-5 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:20.477 DEBUG inline call: inline#強調 (ForkJoinPool-2-worker-1 - cl_inline#強調.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:20.478 DEBUG text call: をクリックしてください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.479 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.479 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.479 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.479 DEBUG text call: 　必ず最後に【｜強調】確認ボタン【強調｜】をクリックしてください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.480 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.480 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.480 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.480 DEBUG text call: 最強調 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.481 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.481 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.481 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.481 DEBUG text call: 　間違えて (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.482 DEBUG --- closure code: combiKey=inline#最強調 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<strong>${lowers.join()}</strong>""";

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:20.536 DEBUG block call: block#説明 (ForkJoinPool-2-worker-5 - cl_block#説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.538 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.538 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.539 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:20.539 DEBUG text call: YmoScriptクラス (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.540 DEBUG block call: block#対象 (ForkJoinPool-2-worker-5 - cl_block#対象.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.540 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.540 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.541 DEBUG text call: convName (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.541 DEBUG block call: block#説明 (ForkJoinPool-2-worker-5 - cl_block#説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.541 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.541 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.542 DEBUG text call: 変換名（変換設定スクリプトの格納フォルダ名）、変換資材がリソースの場合のみ (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.542 DEBUG block call: block#対象 (ForkJoinPool-2-worker-5 - cl_block#対象.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.542 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.543 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.543 DEBUG text call: convDir (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.543 DEBUG block call: block#説明 (ForkJoinPool-2-worker-5 - cl_block#説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.543 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.544 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.544 DEBUG text call: 変換設定スクリプトの格納フォルダ（java.io.File）、変換資材がフォルダの場合のみ (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.544 DEBUG block call: block#見出し (ForkJoinPool-2-worker-5 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.545 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.545 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.545 DEBUG text call: YmoScript (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.545 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.546 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.546 DEBUG text call: 　 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.546 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:20.546 DEBUG text call: YmoScriptクラス (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.547 DEBUG text call: は、テキストの変換のための DSLを実行するためのクラスです。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.547 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.547 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.547 DEBUG text call: 　たとえば上述のサンプルは、以下の DSLを実行することと等価です。詳細は groovydocを参照してください。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.547 DEBUG block call: block#コード (ForkJoinPool-2-worker-5 - cl_block#コード.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.548 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.548 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.548 DEBUG text call: import io.github.longfish801.yakumo.YmoScript; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.548 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.549 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.549 DEBUG text call: List convNames = ['_bltxt', '_html']; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.549 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.549 DEBUG text call: File inFile = new File('sample.txt'),  (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.550 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.550 DEBUG text call: File outFile = new File('sample.html')); (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.550 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.550 DEBUG text call: String sourceKey = FilenameUtils.getBaseName(inFile.name); (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.551 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.551 DEBUG text call: new YmoScript().script { (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.551 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.551 DEBUG text call: 	convNames.each { configure(it) } (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.552 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.552 DEBUG text call: 	engine.sourceMap[sourceKey] = inFile; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.552 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.552 DEBUG text call: 	engine.outMap[sourceKey] = outFile; (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.553 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.553 DEBUG text call: 	assetHandler.setup(outFile.canonicalFile.parentFile, 'overwrite'); (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.553 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.553 DEBUG text call: 	doLast { (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.554 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.554 DEBUG text call: 		assetHandler.copy(); (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.554 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.555 DEBUG text call: 	} (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.555 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.555 DEBUG text call: } (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.555 DEBUG block call: block#見出し (ForkJoinPool-2-worker-5 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.556 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.556 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.556 DEBUG text call: YmoDocument (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.556 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.556 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.557 DEBUG text call: 　 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.557 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:20.557 DEBUG text call: YmoDocument (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.558 DEBUG text call: は、特定のフォルダ直下に存在するテキストファイルの一括変換を実現します。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.558 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.558 DEBUG text call: 　以下のように、変換対象のファイルが格納されたフォルダの直下に、サブフォルダとして変換資材が格納されていることを前提としています。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.558 DEBUG block call: block#コード (ForkJoinPool-2-worker-5 - cl_block#コード.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.559 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.559 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.559 DEBUG text call: 変換対象フォルダ/ (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.560 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.560 DEBUG text call: ├変換資材格納フォルダ/ (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.560 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.560 DEBUG text call: │　├変換スクリプト ymoScript.groovy (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.561 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.561 DEBUG text call: │　├変換設定スクリプト ymoSetting.groovy (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.561 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.561 DEBUG text call: │　└変換資材のファイル（washshスクリプトなど） (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.562 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.562 DEBUG text call: ├変換対象ファイル１.txt (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.562 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.562 DEBUG text call: │　… (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.563 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.563 DEBUG text call: └変換対象ファイルｎ.txt (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.563 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.563 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.564 DEBUG text call: 　変換スクリプトは以下の変数があらかじめバインドされています。 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.564 DEBUG block call: block#項目説明 (ForkJoinPool-2-worker-5 - cl_block#項目説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.564 DEBUG block call: block#対象 (ForkJoinPool-2-worker-5 - cl_block#対象.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.564 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.565 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.565 DEBUG text call: scriptFile (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.565 DEBUG block call: block#説明 (ForkJoinPool-2-worker-5 - cl_block#説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.565 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.566 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.566 DEBUG text call: 変換スクリプト（java.io.File） (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.566 DEBUG block call: block#対象 (ForkJoinPool-2-worker-5 - cl_block#対象.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.566 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.567 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.567 DEBUG text call: yakumo (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.567 DEBUG block call: block#説明 (ForkJoinPool-2-worker-5 - cl_block#説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.567 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.568 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.568 DEBUG inline call: inline#リンク (ForkJoinPool-2-worker-5 - cl_inline#リンク.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:20.568 DEBUG text call: YmoDocumentクラス (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.569 DEBUG block call: block#対象 (ForkJoinPool-2-worker-5 - cl_block#対象.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.569 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.569 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.569 DEBUG text call: convDir (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.570 DEBUG block call: block#説明 (ForkJoinPool-2-worker-5 - cl_block#説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.570 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.570 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.570 DEBUG text call: 変換設定スクリプトの格納フォルダ（java.io.File） (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.571 DEBUG block call: block#対象 (ForkJoinPool-2-worker-5 - cl_block#対象.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.571 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.571 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.571 DEBUG text call: targetDir (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.572 DEBUG block call: block#説明 (ForkJoinPool-2-worker-5 - cl_block#説明.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.572 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.572 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.572 DEBUG text call: 変換対象フォルダ（java.io.File） (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.576 DEBUG para call (ForkJoinPool-2-worker-5 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.576 DEBUG line call (ForkJoinPool-2-worker-5 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.576 DEBUG text call: yakumoの使い方 (ForkJoinPool-2-worker-5 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.597 DEBUG inline call: inline#最強調 (ForkJoinPool-2-worker-1 - cl_inline#最強調.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:20.598 DEBUG text call: を押さないでください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.598 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.598 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.599 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.599 DEBUG text call: 　間違えて【｜最強調】自爆スイッチ【最強調｜】を押さないでください。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.599 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.599 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.600 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.600 DEBUG text call: ぼかし (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.600 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.600 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.601 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.601 DEBUG text call: 　もちろん本当 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.601 DEBUG --- closure code: combiKey=inline#ぼかし ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<span class="small">${lowers.join()}</span>""";

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:20.663 DEBUG inline call: inline#ぼかし (ForkJoinPool-2-worker-1 - cl_inline#ぼかし.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:20.664 DEBUG text call: ですよ。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.665 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.665 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.665 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.665 DEBUG text call: 　もちろん本当【｜ぼかし】かもしれない【ぼかし｜】ですよ。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.666 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.666 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.666 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.666 DEBUG text call: 削除 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.667 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.667 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.667 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.667 DEBUG text call: 　富士山の標高は (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.668 DEBUG inline call: inline#削除 (ForkJoinPool-2-worker-1 - cl_inline.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:20.668 DEBUG text call: ３７７６メートルです。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.668 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.668 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.669 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.669 DEBUG text call: 　富士山の標高は【｜削除】３７７７メートル【削除｜】３７７６メートルです。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.669 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.669 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.670 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.670 DEBUG text call: 傍点 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.670 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.670 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.671 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.671 DEBUG text call: 　まだ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.671 DEBUG --- closure code: combiKey=inline#傍点 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return """<span class="dot">${lowers.join()}</span>""";

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:20.742 DEBUG inline call: inline#傍点 (ForkJoinPool-2-worker-1 - cl_inline#傍点.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:20.743 DEBUG text call: じゃないか。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.743 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.743 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.744 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.744 DEBUG text call: 　まだ【｜傍点】午前三時【傍点｜】じゃないか。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.744 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.744 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.745 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.745 DEBUG text call: 縦中横 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.745 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.745 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.746 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.746 DEBUG text call: 　シェイクスピア全集の第 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.746 DEBUG --- closure code: combiKey=inline#縦中横 ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return lowers.join();

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:20.808 DEBUG inline call: inline#縦中横 (ForkJoinPool-2-worker-1 - cl_inline#縦中横.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:20.809 DEBUG text call: 巻に記述されています。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.809 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.809 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.810 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.810 DEBUG text call: 　シェイクスピア全集の第【｜縦中横】10【縦中横｜】巻に記述されています。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.810 DEBUG block call: block#見出し (ForkJoinPool-2-worker-1 - cl_block#見出し.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.810 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.811 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.811 DEBUG text call: ルビ (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.811 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.811 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.812 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.812 DEBUG text call: 　 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.812 DEBUG --- closure code: combiKey=inline#ルビ ---
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
{ 	BLNode node ->
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');
	String lsep = System.lineSeparator();

	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

	return "<ruby>${lowers.join()}<rp>［</rp><rt>${node.attrs[0]}</rt><rp>］</rp></ruby>";

}--- (ForkJoinPool-2-worker-1 - Clinfo.groovy,io.github.longfish801.clmap.Clinfo#createClosure,70)
2019/05/04 08:43:20.876 DEBUG inline call: inline#ルビ (ForkJoinPool-2-worker-1 - cl_inline#ルビ.groovy,cl_inline$_run_closure1#doCall,9)
2019/05/04 08:43:20.877 DEBUG text call: 係は言った。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.877 DEBUG block call: block#コラム (ForkJoinPool-2-worker-1 - cl_block#コラム.groovy,cl_block$_run_closure1#doCall,9)
2019/05/04 08:43:20.877 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.878 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.878 DEBUG text call: 　【｜ルビ：すいとう】出納【ルビ｜】係は言った。 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.878 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.878 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.878 DEBUG text call: 以上 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.879 DEBUG para call (ForkJoinPool-2-worker-1 - cl_para.groovy,cl_para$_run_closure1#doCall,9)
2019/05/04 08:43:20.879 DEBUG line call (ForkJoinPool-2-worker-1 - cl_line.groovy,cl_line$_run_closure1#doCall,9)
2019/05/04 08:43:20.880 DEBUG text call: BLtxt変換 (ForkJoinPool-2-worker-1 - cl_text.groovy,cl_text$_run_closure1#doCall,10)
2019/05/04 08:43:20.883 DEBUG copy assets outDir=..\..\docs (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler#copy,109)
2019/05/04 08:43:20.884 DEBUG copy assets setName=asset path=sampleDocument/app.log (main - AssetHandler.groovy,io.github.longfish801.yakumo.AssetHandler$_copy_closure4$_closure6#doCall,112)
