#! clmap _test

#> dec
	import io.github.longfish801.bltxt.node.BLNode;
	import io.github.longfish801.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;

#> prefix
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');

#> map
#>> args
	String outKey, def out
#>> closure
	Map binds = [:];
	binds['body'] = clmap.cl('bind#body').call(outKey);
	return engine.templateHandler.apply(outKey, out, outKey, binds);

#> map bind
#>> args
	String outKey
#>> closure body
	return clmap.cl('bltxt#body').call(engine.bltxtMap[outKey]).join("\n\n");

#> map bltxt
#>> args
	BLtxt bltxt
#>> closure body
	return bltxt.root.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

#> map para
#>> args
	BLNode node
#>> prefix
	LOG.debug('para call');
#>> closure
	return node.nodes.collect { clmap.cl('line').call(it) }.join("\n");

#> map block
#>> args
	BLNode node
#>> prefix
	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
#>> closure
	return node.toString();

#> map line
#>> args
	BLNode node
#>> prefix
	LOG.debug('line call');
#>> closure
	return node.toString();

#> map inline
#>> args
	BLNode node
#>> prefix
	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
#>> closure
	return node.toString();

#> map text
#>> dec
	import org.apache.commons.text.StringEscapeUtils;
#>> args
	BLNode node
#>> prefix
	LOG.debug('text call: {}', node.text);
#>> closure
	return node.text;

