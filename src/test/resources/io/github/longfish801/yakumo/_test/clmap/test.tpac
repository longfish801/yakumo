#! clmap HTMLに加工

## dec
	import io.github.longfish801.yakumo.bltxt.node.BLNode;
	import io.github.longfish801.yakumo.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;

## prefix
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');

## map
# args
	BLtxt bltxt
# closure
	config.warnings = [];
	Map binding = [:];
	binding['body'] = clmap.cl('#body').call(bltxt);
	return binding;

# closure body
	return bltxt.root.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

## map para
# args
	BLNode node
# prefix
	LOG.debug('para call');
# closure
	return node.nodes.collect { clmap.cl('line').call(it) }.join("\n");

## map block
# args
	BLNode node
# prefix
	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
# closure
	return node.toString();

## map line
# args
	BLNode node
# prefix
	LOG.debug('line call');
# closure
	return node.toString();

## map inline
# args
	BLNode node
# prefix
	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
# closure
	return node.toString();

## map text
# dec
	import org.apache.commons.text.StringEscapeUtils;
# args
	BLNode node
# prefix
	LOG.debug('text call: {}', node.text);
# closure
	return node.text;

