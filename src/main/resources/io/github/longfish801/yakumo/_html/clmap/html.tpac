#! clmap HTMLに加工

## dec
	import io.github.longfish801.yakumo.bltxt.node.BLNode;
	import io.github.longfish801.yakumo.bltxt.BLtxt;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;

## prefix
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');

## map
# args
	BLtxt bltxt
# prefix
	config.warnings = [];
# closure
	Map binding = [:];
	binding['body'] = clmap.cl('#body').call(bltxt);
	binding['head'] = clmap.cl('#head').call(bltxt);
	binding['index']  = clmap.cl('#index').call(bltxt);
	binding['note']  = clmap.cl('#note').call(bltxt);
	return binding;

# closure body
	return bltxt.root.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

# closure head
	// ルート要素直下のメタ要素についてマップを生成します
	Map map = [:];
	bltxt.root.nodes.findAll { it.xmlTag == 'meta' }.each { BLNode node ->
		map[node.tag] = node.nodes.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) }.join("\n");
	}
	return map;

# closure index
	// 目次を生成します
	List list = [];
	bltxt.grepNodes('block', '見出し').each { BLNode node ->
		Map map = [:];
		try {
			map['level'] = Integer.parseInt(node.attrs[0]);
		} catch (NumberFormatException exc){
			throw new Exception('見出しレベルの型変換に失敗しました。見出しレベルは半角数字を指定してください。', exc);
		}
		map['href'] = """#id${node.attrs[0]}_${node.serialNo}""";
		map['title'] = """${node.nodes.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) }.join()}""";
		list << map;
	}
	return list;

# closure note
	// 註のノードと、そのキーを収集します
	List noteList = bltxt.grepNodes('inline', '註');
	List noteKeys = [];
	noteList.each { noteKeys << it.attrs[0] }
	if (noteKeys.size() == 0) return '';
	
	// 註記のノードと、そのキーを収集します
	List cmntList = bltxt.grepNodes('meta', '註記');
	List cmntKeys = [];
	Map cmntMap = [:];
	cmntList.each {
		cmntKeys << it.attrs[0];
		cmntMap[it.attrs[0]] = it;
	}
	
	// キーをチェックします
	if (noteKeys.unique(false).size() < noteKeys.size()){
		Map map = [:];
		noteKeys.each { map[it] = (map.containsKey(it))? ++ map[it] : 1 }
		config.warnings << "註のキーに重複があります。：重複キー=${map.findAll { it.value > 1 }.keySet()}";
		return '';
	}
	List diff1 = noteKeys - cmntKeys;
	if (diff1.size() > 0){
		config.warnings << "註に対する註記の記述漏れがあります。：diff=${diff1}";
		return '';
	}
	List diff2 = cmntKeys - noteKeys;
	if (diff2.size() > 0){
		config.warnings << "不要な註記あるいは註の記述漏れがあります。：diff=${diff2}";
		return '';
	}
	
	// 註記を返します
	List list = [];
	list << """<dl class="note">""";
	int counter = 0;
	noteKeys.each { String noteKey ->
		counter ++;
		List lowers = cmntMap[noteKey].nodes.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };
		list << """<dt><a name="t${counter}" href="#f${counter}">[*${counter}]</a></dt>""";
		list << """<dd>${lowers.join("\n")}</dd>""";
	}
	list << """</dl>""";
	return list.join("\n");

## map para
# args
	BLNode node
# prefix
	LOG.debug('para call');

# closure
	List lowers = node.nodes.collect { clmap.cl('line').call(it) };
	String result = '';
	switch (node.parent.xmlTag){
		case 'bltxt':
			// 最上位にあるならば pタグを付与します
			result = '<p>' + lowers.join("<br/>\n") + '</p>';
			break;
		case 'block':	// 上位がブロック要素の場合
			switch (node.parent.tag){
				case '見出し':
				case '小見出し':
				case '挿入図':
				case '項目':
				case '対象':
				case '説明':
				case '見出しセル':
				case 'セル':
				case '引用元':
					result = lowers.join("<br/>\n");
					break;
				case '生データ':
				case '整形済':
				case 'コード':
					result = lowers.join("\n");
					break;
				default:
					result = '<p>' + lowers.join("<br/>\n") + '</p>';
			}
			break;
		case 'meta':
			if (node.parent.isSingle()){	// 単一の場合
				result = lowers.join("<br/>\n");
			} else {
				result = '<p>' + lowers.join("<br/>\n") + '</p>';
			}
			break;
		default:
			result = lowers.join("<br/>\n");
			break;
	}
	return result;

## map block
# args
	BLNode node
# prefix
	LOG.debug('block call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.findAll { it.xmlTag != 'meta' }.collect { clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

# closure
	config.warnings << "未対応のブロック要素です。tag=${node.tag}, node=${node.toString()}";
	return lowers.join();

# closure 見出し
	config.block.見出し.level = node.attrs[0];
	return """<h${node.attrs[0]}><a name="id${node.attrs[0]}_${node.serialNo}"></a>${lowers.join()}</h${node.attrs[0]}>""";

# closure 小見出し
	int level = (config.block.見出し.isSet('level'))? Integer.parseInt(config.block.見出し.level) + 1 : 2;
	return """<h${level}>${lowers.join()}</h${level}>""";

# closure 挿入図
	String legend = (lowers.join().empty)? '' : """<figcaption>${lowers.join()}</figcaption>""";
	return """<figure><img src="${node.attrs[1]}" alt="${node.attrs[0]}" class="img-responsive center-block">${legend}</figure>""";

# closure 箇条書き
	String result = '';
	switch (node.attrs[0]){
		case '順序なし':
			result = """<ul>\n${lowers.join("\n")}\n</ul>""";
			break;
		case '順序あり':
			result = """<ol>\n${lowers.join("\n")}\n</ol>""";
			break;
		case '対象':
			result = """<dl>\n${lowers.join("\n")}\n</dl>""";
			break;
		case '説明':
			if (node.parent.attrs[0] == '対象'){
				result = """${lowers.join("\n")}""";
			} else {
				result = """<ul>\n${lowers.join("\n")}\n</ul>""";
			}
			break;
		default:
			config.warnings << "未対応の箇条書きです。tag=${node.tag}, node=${node.toString()}";
			break;
	}
	return result;

# closure 項目
	return """<li>${lowers.join("<br/>\n")}</li>""";

# closure 対象
	return """<dt>${lowers.join("<br/>\n")}</dt>""";

# closure 説明
	String result = '';
	if (node.parent.parent.attrs[0] == '対象'){
		result = """<dd>${lowers.join("<br/>\n")}</dd>""";
	} else {
		result = """<li class="dd">→${lowers.join("<br/>\n")}</li>""";
		result = result.replaceAll(/\n/, "\n　");
	}
	return result;

# closure 表
	List list = [];
	list << '<aside class="panel panel-default">'
	if (node.attrs.size() > 0) list << """<header class="panel-heading">${node.attrs[0]}</header>""";
	list << """<table class="table">""";
	list << lowers.join("\n");
	list << """</table>""";
	list << """</aside>""";
	return list.join("\n");

# closure 行
	return """<tr>${lowers.join()}</tr>""";

# closure 見出しセル
	return """<th>${lowers.join("\n")}</th>""";

# closure セル
	return """<td>${lowers.join("\n")}</td>""";

# closure コラム
	List list = [];
	list << """<aside class="panel panel-primary">""";
	if (node.attrs.size() > 0) list << """<header class="panel-heading">${node.attrs[0]}</header>""";
	list << """<div class="panel-body">""";
	list << lowers.join("\n");
	list << """</div>""";
	list << """</aside>""";
	return list.join("\n");

# closure 注意
	List list = [];
	list << """<aside class="panel panel-warning">""";
	if (node.attrs.size() > 0) list << """<header class="panel-heading">${node.attrs[0]}</header>""";
	list << """<div class="panel-body">""";
	list << lowers.join("\n");
	list << """</div>""";
	list << """</aside>""";
	return list.join("\n");

# closure 引用
	String title = (node.attrs.size() == 0)? '' : """<h1>${node.attrs[0]}</h1>\n""";
	return """<blockquote>\n${title}${lowers.join("\n")}\n</blockquote>""";

# closure 引用元
	return """<footer>${lowers.join()}</footer>""";

# closure コード
	String title = (node.attrs.size() == 0)? '' : """<h1>${node.attrs[0]}</h1>\n""";
	return """<pre class="code">\n${title}${lowers.join("\n")}\n</pre>""";

# closure 整形済
	String title = (node.attrs.size() == 0)? '' : """<h1>${node.attrs[0]}</h1>\n""";
	return """<pre>${title}${lowers.join("\n")}</pre>""";

# closure 生データ
	return """${node.nodes.collect { clmap.cl('raw#para').call(it) }.join("\n")}""";

## map line
# args
	BLNode node
# prefix
	LOG.debug('line call');
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };
# closure
	return lowers.join();

## map inline
# args
	BLNode node
# prefix
	LOG.debug('inline call: {}', "${node.xmlTag}#${node.tag}");
	List lowers = node.nodes.collect { (it.xmlTag == 'text')? clmap.cl('text').call(it) : clmap.cl("${it.xmlTag}#${it.tag}").call(it) };

# closure
	config.warnings << "未対応のインライン要素です。tag=${node.tag}, node=${node.toString()}";
	return (node.nodes.size() == 0)? "【${node.tag}${node.attrs.toString()}】" : "【｜${node.tag}${node.attrs.toString()}】${lowers.join()}【${node.tag}｜】";

# closure 註
	return """<sup><a id="f${node.serialNo}" href="#t${node.serialNo}">*${node.serialNo}</a></sup>""";

# closure リンク
	return """<a href="${node.attrs[0]}">${lowers.join()}</a>""";

# closure 強調
	return """<em>${lowers.join()}</em>""";

# closure 最強調
	return """<strong>${lowers.join()}</strong>""";

# closure 傍点
	return """<span class="dot">${lowers.join()}</span>""";

# closure ぼかし
	return """<span class="small">${lowers.join()}</span>""";

# closure 訂正
	return """<s>${lowers.join()}</s>""";

# closure 縦中横
	return lowers.join();

# closure 備考
	return """${lowers.join()}<span class="note">[※${node.attrs[0]}]</span>""";

# closure ルビ
	return "<ruby>${lowers.join()}<rp>［</rp><rt>${node.attrs[0]}</rt><rp>］</rp></ruby>";

## map text
# dec
	import org.apache.commons.text.StringEscapeUtils;
# args
	BLNode node
# prefix
	LOG.debug('text call: {}', node.text);
# closure
	return StringEscapeUtils.escapeHtml4(node.text);

## map raw
# args
	BLNode node
# closure para
	if (node.xmlTag != 'para') config.warnings << "生データに不適切なタグが格納されています。tag=${node.tag}, node=${node.toString()}";
	return node.nodes.collect { clmap.cl('raw#line').call(it) }.join("\n");
# closure line
	if (node.xmlTag != 'line') config.warnings << "生データに不適切なタグが格納されています。tag=${node.tag}, node=${node.toString()}";
	return node.nodes.collect { clmap.cl('raw#text').call(it) }.join();
# closure text
	if (node.xmlTag != 'text') config.warnings << "生データに不適切なタグが格納されています。tag=${node.tag}, node=${node.toString()}";
	return node.text;

