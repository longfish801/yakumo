#! clmap:thtml.crosscut
#: 見出しへの参照など複数の変換結果に関する横断的な処理をします。
#-dec
	import io.github.longfish801.bltxt.node.BLNode
	import io.github.longfish801.yakumo.YmoConvertException
#>

#> map:prop
#>> closure:resultKey
	return resultKey
#-prefix
	if (resultKey == null) throw new YmoConvertException('resultKeyがバインドされていません。')
#>> closure:resultKeys
	return resultKeys
#-prefix
	if (resultKeys == null) throw new YmoConvertException('resultKeysがバインドされていません。')
#>> closure:sourceMap
	return sourceMap
#-prefix
	if (sourceMap == null) throw new YmoConvertException('sourceMapがバインドされていません。')
#>> closure:headerMap
	return headerMap
#-prefix
	if (headerMap == null) throw new YmoConvertException('headerMapがバインドされていません。')
#>

#> map:relation
#: 変換対象と変換結果との対応関係を返します。
#: ひとつの変換結果に複数の変換対象を含む事態を想定しています。
#: ただしデフォルトでは、変換対象と変換結果が一対一とみなしています。
#: 必要に応じて処理を上書きしてください。
#>> closure:targets
	targetKeys = [ resultKey ]
#-args
	String resultKey
#-return
	List targetKeys
#>> closure:result
	resultKey = targetKey
#-args
	String targetKey
#-return
	String resultKey
#>

#> map:filename
#-return
	String filename
#>> closure:target
#: 変換対象キーに対応する変換結果のファイル名を返します。
	String resultKey = clmap.cl('/thtml.crosscut/relation#result').call(targetKey)
	filename = clmap.cl('#result').call(resultKey)
#-args
	String targetKey
#>> closure:result
#: 変換結果キーに対応する変換結果のファイル名を返します。
#: 変換結果に設定された出力先が Fileであればファイル名を返します。
#: そうでない場合は警告ログを出力して空文字を返します。
#: 必要に応じて処理を上書きしてください。
	Map sourceMap = clmap.cl('/thtml.crosscut/prop#sourceMap').call()
	if (sourceMap[resultKey] == null || !(sourceMap[resultKey] instanceof File)){
		clmap.cl('/tbase.logging/fprint#warn').call('変換結果の出力先がファイルではないためファイル名を取得できません。 resultKey=%s', [ resultKey ])
		return ''
	}
	filename = sourceMap[resultKey].name
#-args
	String resultKey
#>

#> map:headline
#>> closure:level
#: 見出しのノードから見出しレベルを参照して返します。
#: 見出しの htmlタグに合わせてインクリメントしています。
#: たとえばレベルとして 1が指定されたなら h2タグ相当のため 2を返します。
	if (node.attrs.size() == 0){
		throw new YmoConvertException("見出しにレベルが指定されていません。 node=${node.toString()}")
	}
	level = clmap.cl('/tbase.type#parseInt').call(node.attrs[0], '見出しレベル') + 1
#-dec
	import io.github.longfish801.yakumo.YmoConvertException
#-args
	BLNode node
#-return
	int level
#>

#>> closure:anchor
#: 見出しのアンカーを返します。
	anchor = "id${clmap.cl('#level').call(node)}_${node.serialNo}"
#-args
	BLNode node
#-return
	String anchor
#>

#>> closure:headermap
#: 見出しとアンカーとのマップを生成します。
	headerMap = [:]
	bltxtMap.each { String targetKey, def bltxt ->
		bltxt.grepNodes('block', '見出し').each { def node ->
			String alias = (node.attrs.size() < 2)
				? clmap.cl('/ttext').call(node)
				: node.attrs[1]
			if (!headerMap.containsKey(alias)) headerMap[alias] = []
			headerMap[alias] << clmap.cl('/thtml.crosscut/headline#anchor').call(node)
		}
	}
#-args
	Map bltxtMap
#-return
	Map headerMap
#>

#>> closure:path
#: 変換結果や見出しへリンクするための URLパスを生成します。
	// 大域変数を参照します
	String resultKey = clmap.cl('/thtml.crosscut/prop#resultKey').call()
	Map sourceMap = clmap.cl('/thtml.crosscut/prop#sourceMap').call()
	Map headerMap = clmap.cl('/thtml.crosscut/prop#headerMap').call()
	// 参照タグに指定された属性値を変換結果キーとアンカーに分離します
	int idxDiv = aliasAttr.indexOf('＃')
	List splited = aliasAttr.split('＃')
	String toResultKey = (idxDiv == 0)? null : splited[0]
	if (toResultKey == resultKey) toResultKey = null
	String alias = (idxDiv < 0)? null : splited[1]
	// 見出しのアンカーを参照します
	String anchor
	if (alias != null){
		if (headerMap[alias] == null){
			clmap.cl('/tbase.logging/fprint#warn').call("別名に対応する見出しがありません。aliasAttr=%s", [ aliasAttr ])
			return ''
		}
		if (headerMap[alias].size() > 1){
			clmap.cl('/tbase.logging/fprint#warn').call("別名に対応する見出しが２つ以上あります。aliasAttr=%s", [ aliasAttr ])
			return ''
		}
		anchor = headerMap[alias][0]
	}
	// 変換結果へのファイルパスを参照します
	String relPath
	if (toResultKey != null){
		Closure getRelativePath
		getRelativePath = { File base, File target ->
			if (base.parentFile == null) {
				throw new IOException("共通するフォルダが無いため相対パスを取得できません。 base=${base.path}")
			}
			if (target.canonicalPath.startsWith(base.canonicalPath)){
				return target.canonicalPath.substring(base.canonicalPath.length() + 1)
			} else {
				return ('../' + getRelativePath(base.parentFile, target))
			}
		}
		if (sourceMap[resultKey] == null || !(sourceMap[resultKey] instanceof File)){
			clmap.cl('/tbase.logging/fprint#warn').call("現在の変換対象の出力先がファイルではないためファイルパスを取得できません。 resultKey=%s", [ resultKey ])
			return ''
		}
		if (sourceMap[toResultKey] == null || !(sourceMap[toResultKey] instanceof File)){
			clmap.cl('/tbase.logging/fprint#warn').call("参照先の変換対象の出力先がファイルではないためファイルパスを取得できません。 toResultKey=%s", [ toResultKey ])
			return ''
		}
		relPath = getRelativePath(sourceMap[resultKey].parentFile, sourceMap[toResultKey])
	}
	// URLパスを生成します
	path = (anchor == null)? '' : '#' + anchor
	path = (relPath == null)? path : relPath + path
#-args
	String aliasAttr
#-return
	String path
#>

#> map:navi
#: ナビゲーションのHTMLを生成します。
#-args
	String resultKey
#-return
	String html
#-prefix
	def templater = clmap.cl('/tbase.template#apply')
	String templateKey = "${clmap.path}/data:template#"
#>> data:template
#-upper <a href=".."><i class="bi bi-arrow-up-circle"></i></a>
#-index <a href="index.html#tocAll"><i class="bi bi-arrow-up-circle"></i></a>
#-back <a href="${href}"><i class="bi bi-arrow-left-circle"></i></a>
#-next <a href="${href}"><i class="bi bi-arrow-right-circle"></i></a>
#>> closure
	// 変換対象がひとつのみならば上位へのリンクのみとします
	List resultKeys = clmap.cl('/thtml.crosscut/prop#resultKeys').call()
	if (resultKeys.size() == 1){
		return templater.call(templateKey + 'upper', [:])
	}
	
	// 現在のページの位置を参照しておきます
	int idx = resultKeys.indexOf(resultKey)
	if (idx < 0) throw new YmoConvertException("変換結果のファイル名がリストにありません resultKey=${resultKey}, resultKeys=${resultKeys}")
	
	// 戻るリンクを追加します
	List links = []
	if (resultKeys[idx - 1] != 'index'){
		links << templater.call(templateKey + 'back', [
			href: clmap.cl('/thtml.crosscut/filename#result').call(resultKeys[idx - 1]),
		])
	}
	
	// 中央に表示するリンクを追加します
	String centerLink = (resultKey == 'index')
		? templater.call(templateKey + 'upper', [:])
		: templater.call(templateKey + 'index', [:])
	links << centerLink
	
	// 次へのリンクを追加します
	if (idx < resultKeys.size() -  1){
		links << templater.call(templateKey + 'next', [
			href: clmap.cl('/thtml.crosscut/filename#result').call(resultKeys[idx + 1]),
		])
	}
	html = links.join(System.lineSeparator())
#>

#> map:toc
#-args
	Map bltxtMap
#-return
	String html
#>> closure
#: h1～h6を対象とした総目次を生成します。
	html = clmap.cl('level#').call(bltxtMap, 0)
#>> closure:h1
#: h1のみを対象とした総目次を生成します。
	html = clmap.cl('level#').call(bltxtMap, 1)
#>> map:need
#>>> closure
	List targetKeys = bltxtMap.keySet() as List
	targetKeys.remove('index')
	judge = (targetKeys.size() > 0)? true : false
#-return
	boolean judge
#>> map:level
#>>> data:template
#-title <li class="nav-item toc-h1"><a href="${href}" class="nav-link">${title}</a></li>${lower}
#>>> config
title {
	dflt = '（無題）'
}
#>>> closure
#: 総目次を生成します。
#: 変換対象と変換結果が一対一であることが前提となります。
#: 変換対象キー "index"は目次の対象として除外します。
	def config = clmap.solve("${clmap.path}/config").config()
	List resultKeys = clmap.cl('/thtml.crosscut/prop#resultKeys').call()
	html = resultKeys.findAll {
		it != 'index'
	}.collect { String resultKey ->
		clmap.cl('/thtml.crosscut/relation#targets').call(resultKey).collect { String targetKey ->
			def bltxt = bltxtMap[targetKey]
			return templater.call(templateKey + 'title', [
				href: clmap.cl('/thtml.crosscut/filename#target').call(targetKey),
				title: clmap.cl('/thtml.htmlize').cl('#meta').call(bltxt, 'タイトル', config.title.dflt),
				lower: (maxLevel != 1)? System.lineSeparator() + clmap.cl('/thtml.meta/onedoc/toc#').call(bltxt, maxLevel, targetKey) : '',
			])
		}.join(System.lineSeparator())
	}.join(System.lineSeparator())
#-args
	Map bltxtMap
	int maxLevel
#-prefix
	def templater = clmap.cl('/tbase.template#apply')
	String templateKey = "${clmap.path}/data:template#"
#>
