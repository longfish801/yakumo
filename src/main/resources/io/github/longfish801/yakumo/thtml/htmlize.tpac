#! clmap:htmlize
#-dec
	import io.github.longfish801.bltxt.node.BLNode
#>

#> closure
#:BLNodeをHTML化して返します。
	html = clmap.cl("node#${node.xmlTag}").call(node)
#-args
	BLNode node
#-return
	String html
#>

#> closure:meta
	List greped = clmap.cl('/util#grep').call(bltxt, 'meta', name, clmap.cl('/htmlize'))
	result = (greped.empty)? dflt : greped.join(System.lineSeparator())
#-dec
	import io.github.longfish801.bltxt.BLtxt
#-args
	BLtxt bltxt
	String name
	String dflt
#-return
	String result
#>

#> map:node
#-args
	BLNode node
#-return
	String html
#-prefix
	clmap.cl('/util/log#trace').call("htmlize {} tag={}", [node.xmlTag, node.tag])
	List lowers
	if (node.nodes != null){
		lowers = clmap.cl('/util#lowers').call(node, clmap.cl('/htmlize'))
	}
#>> closure
	throw new UnsupportedOperationException("未対応のタグです。xmlTag=${node.xmlTag}, node=${node.toString()}")
#>> closure:bltxt
	html = lowers.join(System.lineSeparator() * 2)
#>> closure:line
	html = lowers.join()
#>> closure:text
	html = StringEscapeUtils.escapeHtml4(node.text)
#-dec
	import org.apache.commons.text.StringEscapeUtils
#>> closure:para
	String parent = (node.parent.xmlTag == 'block')?
		"${node.parent.xmlTag}_${node.parent.tag}" : node.parent.xmlTag
	html = clmap.cl("/htmlize/parent#${parent}").call(node, lowers)
#>> closure:block
	html = clmap.cl("/htmlize/block#${node.tag}").call(node, lowers)
#>> closure:inline
	html = clmap.cl("/htmlize/inline#${node.tag}").call(node, lowers)
#>> closure:meta
	html = lowers.join(System.lineSeparator())
#>

#> map:parent
#-args
	BLNode node
	List lowers
#-return
	String html
#>> closure
	html = '<p>' + lowers.join("<br/>" + System.lineSeparator()) + '</p>'
#>> closure:bltxt
	html = '<p>' + lowers.join("<br/>" + System.lineSeparator()) + '</p>'
#>> closure:meta
	html = (node.parent.single)? lowers.join("<br/>" + System.lineSeparator())
		: '<p>' + lowers.join("<br/>" + System.lineSeparator()) + '</p>'
#>> closure:block_見出し
	html = lowers.join("<br/>" + System.lineSeparator())
#>> closure:block_画像
	html = lowers.join("<br/>" + System.lineSeparator())
#>> closure:block_項目
	html = lowers.join("<br/>" + System.lineSeparator())
#>> closure:block_引用元
	html = lowers.join("<br/>" + System.lineSeparator())
#>> closure:block_生データ
	html = lowers.join(System.lineSeparator())
#>> closure:block_整形済
	html = lowers.join(System.lineSeparator())
#>> closure:block_コード
	html = lowers.join(System.lineSeparator())
#>

#> map:block
#-args
	BLNode node
	List lowers
#-return
	String html
#-prefix
	def templater = clmap.cl('/util#template')
	String templateKey = "${clmap.path}/data:template#${node.tag}"
#>> data:template
#-見出し <h${level}><a name="${id}"></a>${text}</h${level}>
#-箇条書き
<ul>
${text}
</ul>
#-項目 <li>${text}</li>
#-コラム
<aside class="alert alert-success" role="alert">
<% if (title != null){ %><header class="alert-heading"><i class="bi bi-info-circle-fill"></i> ${title}</header><% } %>
${text}
</aside>
#-注意
<aside class="alert alert-danger" role="alert">
<% if (title != null){ %><header class="alert-heading"><i class="bi bi-exclamation-triangle-fill"></i> ${title}</header><% } %>
${text}
</aside>
#-引用
<blockquote>
${text}
</blockquote>
#-引用元 <footer><cite>${text}</cite></footer>
#-コード
<pre>
${text}
</pre>
#-画像
<figure class="text-center">
<img src="${path}" class="img-fluid" alt="${alt}">
<% if (text != null){ %><figcaption>${text}</figcaption><% } %>
</figure>
#>> closure
	clmap.cl('/util/fprint#warn').call("未対応のブロック要素です。tag=%s, node=%s", [node.tag, node.toString()])
	html = lowers.join()
#>> closure:見出し
	int level = clmap.cl('/htmlize/headline#level').call(node)
	html = templater.call(templateKey, [
		text: lowers.join(),
		level: level,
		id: "id${level}_${node.serialNo}"
	])
#>> closure:箇条書き
	html = templater.call(templateKey, [ text: lowers.join(System.lineSeparator()) ])
#>> closure:項目
	html = templater.call(templateKey, [ text: lowers.join(System.lineSeparator()) ])
#>> closure:コラム
	html = templater.call(templateKey, [
		text: lowers.join(System.lineSeparator()),
		title: (node.attrs.size() > 0)? node.attrs[0] : null
	])
#>> closure:注意
	html = templater.call(templateKey, [
		text: lowers.join(System.lineSeparator()),
		title: (node.attrs.size() > 0)? node.attrs[0] : null
	])
#>> closure:引用
	html = templater.call(templateKey, [ text: lowers.join(System.lineSeparator()) ])
#>> closure:引用元
	html = templater.call(templateKey, [ text: lowers.join() ])
#>> closure:コード
	html = templater.call(templateKey, [ text: lowers.join(System.lineSeparator()) ])
#>> closure:画像
	html = templater.call(templateKey, [
		text: (lowers.size() > 0)? lowers.join() : null,
		path: node.attrs[1],
		alt: node.attrs[0]
	])
#>

#> map:inline
#-args
	BLNode node
	List lowers
#-return
	String html
#-prefix
	def templater = clmap.cl('/util#template')
	String templateKey = "${clmap.path}/data:template#${node.tag}"
	String text = (lowers != null)? lowers.join() : ''
#>> data:template
#-註 <sup><a id="f${id}" href="#t${id}">*${id}</a></sup>
#-リンク <a href="${url}">${text}</a>
#-重要 <strong>${text}</strong>
#-補足 <small>${text}</small>
#-訂正 <s>${text}</s>
#-傍点 <span class="dot">${text}</span>
#-ルビ <ruby>${text}<rp>［</rp><rt>${ruby}</rt><rp>］</rp></ruby>
#>> closure
	clmap.cl('/util/fprint#warn').call("未対応のインライン要素です。tag=%s, node=%s", [node.tag, node.toString()])
	html = (node.nodes.size() == 0)? "【${node.tag}${node.attrs.toString()}】"
		: "【｜${node.tag}${node.attrs.toString()}】${text}【${node.tag}｜】"
#>> closure:註
	html = templater.call(templateKey, [
		id: node.serialNo,
		url: node.attrs[0]
	])
#>> closure:リンク
	html = templater.call(templateKey, [
		text: text,
		url: node.attrs[0]
	])
#>> closure:重要
	html = templater.call(templateKey, [ text: text ])
#>> closure:補足
	html = templater.call(templateKey, [ text: text ])
#>> closure:訂正
	html = templater.call(templateKey, [ text: text ])
#>> closure:縦中横
	html = text
#>> closure:傍点
	html = templater.call(templateKey, [ text: text ])
#>> closure:ルビ
	html = templater.call(templateKey, [
		text: text,
		ruby: node.attrs[0]
	])
#>

#> map:headline
#>> config
dflt = 2
increment = 1
#>> closure:level
	def config = clmap.solve("${clmap.path}/config").config()
	level = config.dflt
	if (node.attrs.size() > 0){
		level = clmap.cl('/util#parseInt').call(node.attrs[0], '見出しレベル') + config.increment
	}
#-args
	BLNode node
#-return
	int level
#>
