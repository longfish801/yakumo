#! clmap:thtml
#: BLtxt文書を HTML形式に変換します。
#>

#> closure
#: BLtxt文書を HTMLに変換するメイン処理です。
	// テンプレートに適用するバインド変数のマップを生成します
	binds = [
		clmap: clmap,
		resultKey: resultKey,
		bltxtMap: bltxtMap,
		appendMap: appendMap,
	]
#-dec
	import io.github.longfish801.bltxt.BLtxt
#-args
	String resultKey
	Map bltxtMap
	Map appendMap
#-return
	Map binds
#-prefix
	clmap.cl('/tbase.logging').properties['logid'] = resultKey
	clmap.cl('/tbase.logging/log#debug').call('BGN thtml', [])
#-suffix
	clmap.cl('/tbase.logging/log#debug').call('END thtml', [])
#>

#> closure:prepare
#: BLtxt文書を HTMLに変換するための事前準備をします。
	// 足跡を大域変数として格納します
	clmap.cl('/tbase.logging').properties['fprint'] = script.fprint
	
	// BLtxtのルート要素と変換対象キーとのマップを大域変数として格納します
	clmap.cl('/thtml.htmlize/inline').properties['targetMap'] = bltxtMap.collectEntries { String targetKey, def bltxt ->
		[ bltxt.root, targetKey ]
	}
	
	// 変換結果キーのリストを作成し、大域変数として格納します
	// もし "index"があれば必ず先頭にします
	List resultKeys = script.results.map.keySet() as List
	if (resultKeys.remove('index')) resultKeys.add(0, 'index')
	clmap.cl('/thtml.crosscut').properties['resultKeys'] = resultKeys
	
	// 見出しとアンカーとのマップを生成し、大域変数として格納します
	clmap.cl('/thtml.crosscut/headline').properties['headerMap'] = clmap.cl('/thtml.crosscut/headline#headermap').call(bltxtMap)
#-dec
	import io.github.longfish801.yakumo.ConvertScript
#-args
	Map bltxtMap
	ConvertScript script
#-return
	Map appendMap
#-prefix
	clmap.cl('/tbase.logging').properties['logid'] = 'prepare'
	clmap.cl('/tbase.logging/log#debug').call('BGN thtml prepare', [])
#-suffix
	clmap.cl('/tbase.logging/log#debug').call('END thtml prepare', [])
#>
