PARSER_BEGIN(BLtxtParser)

package io.github.longfish801.yakumo.parser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import io.github.longfish801.yakumo.bltxt.BLtxtMakerIF;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * BLtxt文書を解析します。
 * @version 1.0.00 2017/08/02
 * @author io.github.longfish801
 */
public class BLtxtParser {
	/** ログ出力インスタンス */
	private static final Logger LOG = LoggerFactory.getLogger(BLtxtParser.class);
	/** BLtxtMakerIF */
	private BLtxtMakerIF maker = null;
	/** 行番号 */
	private int lineNo = -1;
	/** タグ外の文字列あるいは属性値 */
	private StringBuilder buffer = null;

	/**
	 * BLtxt文書を解析します。
	 * @param maker BLtxtMakerIF
	 * @return BLtxt文書の解析結果
	 * @exception ParseException 対象文字列がBLtxt記法に違反しています。
	 */
	public Object parse(BLtxtMakerIF maker) throws ParseException {
		this.maker = maker;
		try {
			root();
		} catch (TokenMgrError exc){
			LOG.error("BLtxt文書の" + lineNo + "行目を解析中に字句誤りがみつかりました。exc=" + exc.toString());
			this.maker.loggingCurrentStatus();
			throw exc;
		} catch (ParseException exc){
			LOG.error("BLtxt文書の" + lineNo + "行目を解析中に構文誤りがみつかりました。exc=" + exc.toString());
			this.maker.loggingCurrentStatus();
			throw exc;
		} catch (Throwable exc){
			LOG.error("BLtxt文書の" + lineNo + "行目を解析中に問題が生じました。exc=" + exc.toString());
			this.maker.loggingCurrentStatus();
			throw exc;
		}
		return maker.getResult();
	}
}
PARSER_END(BLtxtParser)

TOKEN : {
	< NEWLINE	: "\r\n" | "\n" | "\r" >
|	< ESCAPED	: "￥【" | "￥】" | "￥：" | "￥￥" >
|	< LRNG_BGN	: "【－" >
|	< LRNG_END	: "－】" >
|	< SRNG_BGN	: "【｜" >
|	< SRNG_END	: "｜】" >
|	< MRNG_BGN	: "【＊" >
|	< MRNG_END	: "＊】" >
|	< TAG_LINE	: "【＝" >
|	< TAG_META	: "【＃" >
|	< TAG_BGN	: "【" >
|	< TAG_END	: "】" >
|	< SIGN_ATTR	: "：" >
|	< SIGN_KIND	: "－" | "｜" | "＝" | "＃" | "＊" >
|	< SAFE_TXT	: (~[ "\n", "\r", "￥", "：", "【", "】", "－", "｜", "＝", "＃", "＊" ])+ >
}

	/**
	 * BLxml全体を解析します。<br>
	 * BLxml全体は、改行と段落から成ります。<br>
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void root() : {
		LOG.trace("root BGN");
		lineNo = 1;
		maker.createRoot();
	}
{
	( ( LOOKAHEAD(1) newLine() )+ | paragraph() )* <EOF>
	{
		LOG.trace("root END");
	}
}

	/**
	 * 改行を解析します。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void newLine() : {
		LOG.trace("newLine");
		lineNo ++;
	}
{
	<NEWLINE>
}

	/**
	 * 段落を解析します。<br>
	 * 段落は、空行を含まない連続した複数の行です。<br>
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void paragraph() : {
		maker.createParaBgn(lineNo);
	}
{
	( LOOKAHEAD(1) sentence() ( LOOKAHEAD(1) newLine() )? )+
	{
		maker.createParaEnd(lineNo);
	}
}

	/**
	 * 行を解析します。<br>
	 * 行は、行範囲タグ、含意範囲タグ、行タグのある行、文のいずれかです。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void sentence() : {
		LOG.trace("sentence lineNo={}", lineNo);
	}
{
	(  blockLine() | blockBgn() | metaLine() | metaBgn() | LOOKAHEAD(3) blockEnd() | LOOKAHEAD(3) metaEnd() | line() )
}

	/**
	 * 行タグのある行を解析します。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void blockLine() : {
		LOG.trace("blockLine called");
	}
{
	blockLineTag() ( LOOKAHEAD(1) line() )*
	{
		maker.createBlockTerminate(lineNo);
	}
}

	/**
	 * 行タグを解析します。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void blockLineTag() : {
		LOG.trace("blockLine called");
		String tagName = "";
	}
{
	<TAG_LINE> tagName = tagName() (attr())* <TAG_END>
	{
		maker.createBlock(tagName, lineNo);
	}
}

	/**
	 * 行範囲開始タグを解析します。<br>
	 * 行範囲開始タグは、行範囲タグ開始記号とタグ終了記号に挟まれたタグ名、属性の集合から成ります。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void blockBgn() : {
		LOG.trace("blockBgn called");
		String tagName = "";
	}
{
	<LRNG_BGN> tagName = tagName() (attr())* <TAG_END>
	{
		maker.createBlockBgn(tagName, lineNo);
	}
}

	/**
	 * 行範囲終了タグを解析します。<br>
	 * 行範囲終了タグは、タグ開始記号と行範囲タグ終了記号に挟まれたタグ名から成ります。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void blockEnd() : {
		LOG.trace("blockEnd called");
		String tagName = "";
	}
{
	<TAG_BGN> tagName = tagName() <LRNG_END>
	{
		maker.createBlockEnd(tagName, lineNo);
	}
}

	/**
	 * 含意タグのある行を解析します。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void metaLine() : {
		LOG.trace("metaLine called");
	}
{
	metaLineTag() ( LOOKAHEAD(1) line() )*
	{
		maker.createMetaTerminate(lineNo);
	}
}

	/**
	 * 含意タグを解析します。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void metaLineTag() : {
		LOG.trace("metaLine called");
		String tagName = "";
	}
{
	<TAG_META> tagName = tagName() (attr())* <TAG_END>
	{
		maker.createMeta(tagName, lineNo);
	}
}

	/**
	 * 含意範囲開始タグを解析します。<br>
	 * 含意範囲開始タグは、含意範囲タグ開始記号とタグ終了記号に挟まれたタグ名、属性の集合から成ります。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void metaBgn() : {
		LOG.trace("metaBgn called");
		String tagName = "";
	}
{
	<MRNG_BGN> tagName = tagName() (attr())* <TAG_END>
	{
		maker.createMetaBgn(tagName, lineNo);
	}
}

	/**
	 * 含意範囲終了タグを解析します。<br>
	 * 含意範囲終了タグは、タグ開始記号と含意範囲タグ終了記号に挟まれたタグ名から成ります。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void metaEnd() : {
		LOG.trace("metaEnd called");
		String tagName = "";
	}
{
	<TAG_BGN> tagName = tagName() <MRNG_END>
	{
		maker.createMetaEnd(tagName, lineNo);
	}
}

	/**
	 * 文を解析します。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void line() : {
		LOG.trace("line called");
		maker.createLineBgn(lineNo);
	}
{
	( LOOKAHEAD(1) lineChoice() )+
	{
		maker.createLineEnd(lineNo);
	}
}

	/**
	 * 文の要素を解析します。<br>
	 * 文中タグ、文範囲タグ、含意タグ、平文のいずれかです。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void lineChoice() : {
	}
{
	( LOOKAHEAD(3) inlineEnd() | inlineBgn() | inline() | plainText() )
}

	/**
	 * 文中タグを解析します。<br>
	 * 文中タグは、タグ開始記号とタグ終了記号に挟まれたタグ名、属性の集合から成ります。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void inline() : {
		LOG.trace("inline called");
		String tagName = "";
	}
{
	<TAG_BGN> tagName = tagName() (attr())* <TAG_END>
	{
		maker.createInline(tagName, lineNo);
	}
}

	/**
	 * 文範囲開始タグを解析します。<br>
	 * 文範囲開始タグは、文範囲タグ開始記号とタグ終了記号に挟まれたタグ名、属性の集合から成ります。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void inlineBgn() : {
		LOG.trace("inlineBgn called");
		String tagName = "";
	}
{
	<SRNG_BGN> tagName = tagName() (attr())* <TAG_END>
	{
		maker.createInlineBgn(tagName, lineNo);
	}
}

	/**
	 * 文範囲終了タグを解析します。<br>
	 * 文範囲終了タグは、タグ開始記号と文範囲タグ終了記号に挟まれたタグ名から成ります。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void inlineEnd() : {
		LOG.trace("inlineEndcalled");
		String tagName = "";
	}
{
	<TAG_BGN> tagName = tagName() <SRNG_END>
	{
		maker.createInlineEnd(tagName, lineNo);
	}
}

	/**
	 * タグ名を解析します。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	String tagName() : {
		Token token;
	}
{
	token = <SAFE_TXT>
	{
		LOG.trace("tagName tag={}", token.image);
		return token.image;
	}
}

	/**
	 * 属性を解析します。<br>
	 * 属性は、属性記号と、属性値から成ります。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void attr() : {
	}
{
	<SIGN_ATTR> ( attrVal() )*
}

	/**
	 * 属性値に使用可能な文字列を解析します。<br>
	 * 属性値は、エスケープ文字列、エスケープ記号、その他の文字列の混在から成ります。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void attrVal() : {
		buffer =  new StringBuilder("");
	}
{
	( LOOKAHEAD(1) attrValChoice() )+
	{
		maker.createAttr(buffer.toString(), lineNo);
	}
}

	/**
	 * 属性値の要素を解析します。<br>
	 * エスケープ文字列、各記号、その他の文字列の混在から成ります。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void attrValChoice() : {
	}
{
	( escaped() | signKind() | safeTxt() )
}

	/**
	 * 平文を解析します。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void plainText() : {
		buffer =  new StringBuilder("");
	}
{
	( LOOKAHEAD(1) plainTextChoice() )+
	{
		maker.createText(buffer.toString(), lineNo);
	}
}

	/**
	 * 平文の要素を解析します。<br>
	 * エスケープ文字列、各記号、属性値区切り、その他の文字列の混在から成ります。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void plainTextChoice() : {
	}
{
	( escaped() | signKind() | signAttr() | safeTxt() )
}

	/**
	 * エスケープ文字列を解析します。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void escaped() : {
		Token token;
	}
{
	token = <ESCAPED>
	{
		LOG.trace("escape token={}", token.image);
		buffer.append(token.image.substring(1));
	}
}

	/**
	 * 属性値区切りを表す文字を解析します。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void signAttr() : {
		Token token;
	}
{
	token = <SIGN_ATTR>
	{
		buffer.append(token.image);
	}
}

	/**
	 * タグ種別を表す文字を解析します。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void signKind() : {
		Token token;
	}
{
	token = <SIGN_KIND>
	{
		buffer.append(token.image);
	}
}

	/**
	 * その他の文字列を解析します。
	 * @exception ParseException 対象文字列がBLxml形式に違反しています。
	 */
	void safeTxt() : {
		Token token;
	}
{
	token = <SAFE_TXT>
	{
		LOG.trace("text token={}", token.image);
		buffer.append(token.image);
	}
}
