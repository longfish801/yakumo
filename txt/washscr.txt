
【＃タイトル】WashScr記法

■概要

　WashScr記法は、Washスクリプトのための記法です。
　Washスクリプトは、テキストの整形に特化したスクリプトです。
　文法は【リンク：TPAC記法：tpac.html】をベースにしています。
　【リンク：Clmap記法：clmap.html】の拡張であり、Clmap記法のタグが使用できます。

■構成

　ファイルに記述する場合、文字コードは UTF-8としてください。
　Clmap記法で使用できるタグはすべて使用できます。

　先頭に宣言をひとつ持ちます。
　タグ名は「washscr」です。
　スペース区切りで任意の名前を付与してください。名前は省略可です。

----- コード -----
#! washscr 整形スクリプト
----- コード -----

　宣言の次行から、タグを記述します。
　タグには範囲指定タグと処理タグの二種類があります。
　範囲指定タグによって指定された範囲内の文字列に対し、処理タグで指定された処理をします。

■範囲指定タグ
□sliceタグ

　betweenタグは、区切り行で分割した各行を処理タグに渡します。
　sliceタグの後に、処理名称を記述してください。

　div属性には分割の区切りとなる行を正規表現で指定します。
　デフォルトは空行を意味する正規表現(^$)です。

　divhandle属性には区切り行の扱いを指定します。以下のいずれかを指定できます。
　デフォルトは "exclude"です。
　"include"の場合、区切り行は範囲の先頭に付与します。

・include - 区切り行を含めて処理タグに渡します。
・exclude - 区切り行は処理タグに渡さず、そのまま残します。
・delete - 区切り行を削除します。

　処理タグによる処理の対象とするか、クロージャで判断させることができます。
　judge属性にクロージャのコンビキーを指定します。
　クロージャには引数List<String> linesを渡します。
　linesは、分割した文字列を行毎に分割したリストです。
　処理対象とするか否かを boolean値で返してください。
　judge属性の指定がない場合は、すべて処理対象となります。

----- コード -----
## slice 分割
#-div ^$
#-divhandle include
#-judge slice#judge

## map replace
# args
	List<String> lines
# closure judge
	return (line[0] == '--- 対象外 ---')? false : true;
----- コード -----

□betweenタグ

　betweenタグは、特定の開始行から終了行の範囲の行を処理タグに渡します。
　範囲外の文字列はそのまま残ります。
　betweenタグの後に、処理名称を記述してください。

　bgn属性には開始行を正規表現で指定します。
　必須項目です。

　end属性には終了行を正規表現で指定します。
　デフォルトは空文字です。
　空文字の場合、開始行と一致する文字列を終了行とみなします。
　終了行は開始行の次行から探します。
　開始行はあるのに終了行がないままファイル末端を迎えた場合は、ファイル末端を終了行とみなします。

　divhandle属性には区切り行の扱いを指定します。
　詳細はsliceタグを参照してください。

　処理を実施するか判断するクロージャを judge属性で指定できます。
　詳細はsliceタグを参照してください。

----- コード -----
## between 範囲分割
#-bgn ^\~{5,}$
#-end ^\_{5,}$
#-divhandle include
----- コード -----

■処理タグ
□replaceタグ

　固定文字列での置換をします。
　replaceタグの後に、処理名称を記述してください。

　後続行には、検索文字列と置換後文字列をタブ区切りで記述します。
　改行区切りで複数指定できます。
　改行コードを含む検索文字列を指定しても有効とはなりません。

　置換を実行するか否か判定する場合、judge属性を指定します。
　クロージャのコンビキーを指定します。
　クロージャには引数List<String> linesを渡します。
　引数linesは、範囲内の文字列を行毎に分割したリストです。
　処理対象とするか否かを boolean値で返してください。
　judge属性の指定がない場合は、すべて処理対象となります。

　対象文字列の前処理をする場合、first属性を指定します。
　クロージャのコンビキーを指定します。
　クロージャには引数List<String> linesを渡します。
　引数linesは、範囲内の文字列を行毎に分割したリストです。
　処理結果を List<String>で返してください。
　なお、前処理よりも先に judge属性による判定を実施します。

　対象文字列の後処理をする場合、last属性を指定します。
　置換後の文字列を引数 linesに渡すこと以外は first属性と同じです。

----- コード -----
# replace 固定置換
#-judge replace#判定
#-first replace#前処理
#-last replace#後処理
テスト	試験
サンプル	例

## map replace
# args
	List<String> lines
# closure 判定
	return (line[0] == '--- 対象外 ---')? false : true;
# closure 前処理
	return lines.collect { "${it} -サンプル" };
# closure 後処理
	return lines.collect { "テスト- ${it}" };
----- コード -----

□reprexタグ

　正規表現での置換をします。
　reprexタグの後に、処理名称を記述してください。

　後続行には、検索文字列と置換後文字列をタブ区切りで記述します。
　改行区切りで複数指定できます。
　改行コードを含む検索文字列を指定しても有効となりません。

　judge属性、first属性、last属性を指定できます。
　詳細はreplaceタグを参照してください。

----- コード -----
# reprex 正規表現置換
テスト(\d+)	サンプル#$1
テスト(\d+)	試験#$1
----- コード -----

□callタグ

　範囲文字列の処理をするクロージャを呼ぶことができます。
　callタグの後に、処理名称を記述してください。

　combi属性にクロージャのコンビキーを指定します。必須です。
　クロージャには引数List<String> linesを渡します。
　引数linesは、分割した文字列を行毎に分割したリストです。
　暗黙の引数 config.idxで呼び出し順（0始まり）を参照できます。
　config.isLastの値が trueのときは最後の要素です。
　処理結果を List<String>で返してください。

　judge属性、first属性、last属性を指定できます。
　詳細はreplaceタグを参照してください。

----- コード -----
# call 範囲処理
#-combi range#add

## map range
# args
	List<String> lines
# closure add
	lines.add(0, '--- ここから ---');
	lines << '--- ここまで ---';
	return lines;
----- コード -----

■クロージャ呼び出しについて

　クロージャ呼び出し時、暗黙の引数 configに以下の情報を格納します。

－config.{ID}.index
　→範囲指定タグで分割された範囲の位置（0始まり）
－config.{ID}.isLast
　→範囲指定タグで分割された範囲の、最後の範囲か否か

　IDは、タグ名と名前を半角シャープ(#)で連結した文字列です。
　たとえば以下は、まず空行区切りで分割します。
　先頭の範囲のみ「--- ここから ---」という行を先頭に付与します。
　末尾の範囲のみ「--- ここまで ---」という行を末尾に付与します。

----- コード -----
# slice
# call 範囲指定
#-combi #先頭と末尾に追記

## map
# args
	List<String> lines
# closure 先頭と末尾に追記
	if (config.'call#範囲指定'.idx == 0) lines.add(0, '--- ここから ---');
	if (config.'call#範囲指定'.isLast) lines << '--- ここまで ---';
	return lines;
----- コード -----

　各タグの処理は並列実行されます。
　このため、たとえば初めのほうのタグで configに設定した値が、必ずしも後のほうのタグで参照できるとは限らないため注意してください。

以上
